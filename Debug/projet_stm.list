
projet_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013eac  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08013ff0  08013ff0  00014ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144f0  080144f0  00016370  2**0
                  CONTENTS
  4 .ARM          00000008  080144f0  080144f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080144f8  080144f8  00016370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144f8  080144f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080144fc  080144fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  08014500  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000370  08014870  00016370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d8  08014870  000169d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000379f6  00000000  00000000  00016399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e80  00000000  00000000  0004dd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030d0  00000000  00000000  00052c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000025bc  00000000  00000000  00055ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c068  00000000  00000000  0005829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000294e4  00000000  00000000  00074304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab003  00000000  00000000  0009d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001487eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e974  00000000  00000000  00148830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001571a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	08013fd4 	.word	0x08013fd4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	08013fd4 	.word	0x08013fd4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_f2uiz>:
 800114c:	0042      	lsls	r2, r0, #1
 800114e:	d20e      	bcs.n	800116e <__aeabi_f2uiz+0x22>
 8001150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001154:	d30b      	bcc.n	800116e <__aeabi_f2uiz+0x22>
 8001156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800115a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115e:	d409      	bmi.n	8001174 <__aeabi_f2uiz+0x28>
 8001160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	4770      	bx	lr
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	4770      	bx	lr
 8001174:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001178:	d101      	bne.n	800117e <__aeabi_f2uiz+0x32>
 800117a:	0242      	lsls	r2, r0, #9
 800117c:	d102      	bne.n	8001184 <__aeabi_f2uiz+0x38>
 800117e:	f04f 30ff 	mov.w	r0, #4294967295
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b968 	b.w	8001474 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f806 	bl	80011bc <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	460c      	mov	r4, r1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d14e      	bne.n	8001266 <__udivmoddi4+0xaa>
 80011c8:	4694      	mov	ip, r2
 80011ca:	458c      	cmp	ip, r1
 80011cc:	4686      	mov	lr, r0
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	d962      	bls.n	800129a <__udivmoddi4+0xde>
 80011d4:	b14a      	cbz	r2, 80011ea <__udivmoddi4+0x2e>
 80011d6:	f1c2 0320 	rsb	r3, r2, #32
 80011da:	4091      	lsls	r1, r2
 80011dc:	fa20 f303 	lsr.w	r3, r0, r3
 80011e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e4:	4319      	orrs	r1, r3
 80011e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80011f2:	fb07 1114 	mls	r1, r7, r4, r1
 80011f6:	fa1f f68c 	uxth.w	r6, ip
 80011fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001202:	fb04 f106 	mul.w	r1, r4, r6
 8001206:	4299      	cmp	r1, r3
 8001208:	d90a      	bls.n	8001220 <__udivmoddi4+0x64>
 800120a:	eb1c 0303 	adds.w	r3, ip, r3
 800120e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001212:	f080 8110 	bcs.w	8001436 <__udivmoddi4+0x27a>
 8001216:	4299      	cmp	r1, r3
 8001218:	f240 810d 	bls.w	8001436 <__udivmoddi4+0x27a>
 800121c:	3c02      	subs	r4, #2
 800121e:	4463      	add	r3, ip
 8001220:	1a59      	subs	r1, r3, r1
 8001222:	fbb1 f0f7 	udiv	r0, r1, r7
 8001226:	fb07 1110 	mls	r1, r7, r0, r1
 800122a:	fb00 f606 	mul.w	r6, r0, r6
 800122e:	fa1f f38e 	uxth.w	r3, lr
 8001232:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001236:	429e      	cmp	r6, r3
 8001238:	d90a      	bls.n	8001250 <__udivmoddi4+0x94>
 800123a:	eb1c 0303 	adds.w	r3, ip, r3
 800123e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001242:	f080 80fa 	bcs.w	800143a <__udivmoddi4+0x27e>
 8001246:	429e      	cmp	r6, r3
 8001248:	f240 80f7 	bls.w	800143a <__udivmoddi4+0x27e>
 800124c:	4463      	add	r3, ip
 800124e:	3802      	subs	r0, #2
 8001250:	2100      	movs	r1, #0
 8001252:	1b9b      	subs	r3, r3, r6
 8001254:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001258:	b11d      	cbz	r5, 8001262 <__udivmoddi4+0xa6>
 800125a:	40d3      	lsrs	r3, r2
 800125c:	2200      	movs	r2, #0
 800125e:	e9c5 3200 	strd	r3, r2, [r5]
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	428b      	cmp	r3, r1
 8001268:	d905      	bls.n	8001276 <__udivmoddi4+0xba>
 800126a:	b10d      	cbz	r5, 8001270 <__udivmoddi4+0xb4>
 800126c:	e9c5 0100 	strd	r0, r1, [r5]
 8001270:	2100      	movs	r1, #0
 8001272:	4608      	mov	r0, r1
 8001274:	e7f5      	b.n	8001262 <__udivmoddi4+0xa6>
 8001276:	fab3 f183 	clz	r1, r3
 800127a:	2900      	cmp	r1, #0
 800127c:	d146      	bne.n	800130c <__udivmoddi4+0x150>
 800127e:	42a3      	cmp	r3, r4
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xcc>
 8001282:	4290      	cmp	r0, r2
 8001284:	f0c0 80ee 	bcc.w	8001464 <__udivmoddi4+0x2a8>
 8001288:	1a86      	subs	r6, r0, r2
 800128a:	eb64 0303 	sbc.w	r3, r4, r3
 800128e:	2001      	movs	r0, #1
 8001290:	2d00      	cmp	r5, #0
 8001292:	d0e6      	beq.n	8001262 <__udivmoddi4+0xa6>
 8001294:	e9c5 6300 	strd	r6, r3, [r5]
 8001298:	e7e3      	b.n	8001262 <__udivmoddi4+0xa6>
 800129a:	2a00      	cmp	r2, #0
 800129c:	f040 808f 	bne.w	80013be <__udivmoddi4+0x202>
 80012a0:	eba1 040c 	sub.w	r4, r1, ip
 80012a4:	2101      	movs	r1, #1
 80012a6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012aa:	fa1f f78c 	uxth.w	r7, ip
 80012ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80012b2:	fb08 4416 	mls	r4, r8, r6, r4
 80012b6:	fb07 f006 	mul.w	r0, r7, r6
 80012ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d908      	bls.n	80012d8 <__udivmoddi4+0x11c>
 80012c6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80012ce:	d202      	bcs.n	80012d6 <__udivmoddi4+0x11a>
 80012d0:	4298      	cmp	r0, r3
 80012d2:	f200 80cb 	bhi.w	800146c <__udivmoddi4+0x2b0>
 80012d6:	4626      	mov	r6, r4
 80012d8:	1a1c      	subs	r4, r3, r0
 80012da:	fbb4 f0f8 	udiv	r0, r4, r8
 80012de:	fb08 4410 	mls	r4, r8, r0, r4
 80012e2:	fb00 f707 	mul.w	r7, r0, r7
 80012e6:	fa1f f38e 	uxth.w	r3, lr
 80012ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ee:	429f      	cmp	r7, r3
 80012f0:	d908      	bls.n	8001304 <__udivmoddi4+0x148>
 80012f2:	eb1c 0303 	adds.w	r3, ip, r3
 80012f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012fa:	d202      	bcs.n	8001302 <__udivmoddi4+0x146>
 80012fc:	429f      	cmp	r7, r3
 80012fe:	f200 80ae 	bhi.w	800145e <__udivmoddi4+0x2a2>
 8001302:	4620      	mov	r0, r4
 8001304:	1bdb      	subs	r3, r3, r7
 8001306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800130a:	e7a5      	b.n	8001258 <__udivmoddi4+0x9c>
 800130c:	f1c1 0720 	rsb	r7, r1, #32
 8001310:	408b      	lsls	r3, r1
 8001312:	fa22 fc07 	lsr.w	ip, r2, r7
 8001316:	ea4c 0c03 	orr.w	ip, ip, r3
 800131a:	fa24 f607 	lsr.w	r6, r4, r7
 800131e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001322:	fbb6 f8f9 	udiv	r8, r6, r9
 8001326:	fa1f fe8c 	uxth.w	lr, ip
 800132a:	fb09 6618 	mls	r6, r9, r8, r6
 800132e:	fa20 f307 	lsr.w	r3, r0, r7
 8001332:	408c      	lsls	r4, r1
 8001334:	fa00 fa01 	lsl.w	sl, r0, r1
 8001338:	fb08 f00e 	mul.w	r0, r8, lr
 800133c:	431c      	orrs	r4, r3
 800133e:	0c23      	lsrs	r3, r4, #16
 8001340:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001344:	4298      	cmp	r0, r3
 8001346:	fa02 f201 	lsl.w	r2, r2, r1
 800134a:	d90a      	bls.n	8001362 <__udivmoddi4+0x1a6>
 800134c:	eb1c 0303 	adds.w	r3, ip, r3
 8001350:	f108 36ff 	add.w	r6, r8, #4294967295
 8001354:	f080 8081 	bcs.w	800145a <__udivmoddi4+0x29e>
 8001358:	4298      	cmp	r0, r3
 800135a:	d97e      	bls.n	800145a <__udivmoddi4+0x29e>
 800135c:	f1a8 0802 	sub.w	r8, r8, #2
 8001360:	4463      	add	r3, ip
 8001362:	1a1e      	subs	r6, r3, r0
 8001364:	fbb6 f3f9 	udiv	r3, r6, r9
 8001368:	fb09 6613 	mls	r6, r9, r3, r6
 800136c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001370:	b2a4      	uxth	r4, r4
 8001372:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001376:	45a6      	cmp	lr, r4
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x1d0>
 800137a:	eb1c 0404 	adds.w	r4, ip, r4
 800137e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001382:	d266      	bcs.n	8001452 <__udivmoddi4+0x296>
 8001384:	45a6      	cmp	lr, r4
 8001386:	d964      	bls.n	8001452 <__udivmoddi4+0x296>
 8001388:	3b02      	subs	r3, #2
 800138a:	4464      	add	r4, ip
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	fba0 8302 	umull	r8, r3, r0, r2
 8001394:	eba4 040e 	sub.w	r4, r4, lr
 8001398:	429c      	cmp	r4, r3
 800139a:	46c6      	mov	lr, r8
 800139c:	461e      	mov	r6, r3
 800139e:	d350      	bcc.n	8001442 <__udivmoddi4+0x286>
 80013a0:	d04d      	beq.n	800143e <__udivmoddi4+0x282>
 80013a2:	b155      	cbz	r5, 80013ba <__udivmoddi4+0x1fe>
 80013a4:	ebba 030e 	subs.w	r3, sl, lr
 80013a8:	eb64 0406 	sbc.w	r4, r4, r6
 80013ac:	fa04 f707 	lsl.w	r7, r4, r7
 80013b0:	40cb      	lsrs	r3, r1
 80013b2:	431f      	orrs	r7, r3
 80013b4:	40cc      	lsrs	r4, r1
 80013b6:	e9c5 7400 	strd	r7, r4, [r5]
 80013ba:	2100      	movs	r1, #0
 80013bc:	e751      	b.n	8001262 <__udivmoddi4+0xa6>
 80013be:	fa0c fc02 	lsl.w	ip, ip, r2
 80013c2:	f1c2 0320 	rsb	r3, r2, #32
 80013c6:	40d9      	lsrs	r1, r3
 80013c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013cc:	fa20 f303 	lsr.w	r3, r0, r3
 80013d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013d4:	fbb1 f0f8 	udiv	r0, r1, r8
 80013d8:	fb08 1110 	mls	r1, r8, r0, r1
 80013dc:	4094      	lsls	r4, r2
 80013de:	431c      	orrs	r4, r3
 80013e0:	fa1f f78c 	uxth.w	r7, ip
 80013e4:	0c23      	lsrs	r3, r4, #16
 80013e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013ea:	fb00 f107 	mul.w	r1, r0, r7
 80013ee:	4299      	cmp	r1, r3
 80013f0:	d908      	bls.n	8001404 <__udivmoddi4+0x248>
 80013f2:	eb1c 0303 	adds.w	r3, ip, r3
 80013f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013fa:	d22c      	bcs.n	8001456 <__udivmoddi4+0x29a>
 80013fc:	4299      	cmp	r1, r3
 80013fe:	d92a      	bls.n	8001456 <__udivmoddi4+0x29a>
 8001400:	3802      	subs	r0, #2
 8001402:	4463      	add	r3, ip
 8001404:	1a5b      	subs	r3, r3, r1
 8001406:	fbb3 f1f8 	udiv	r1, r3, r8
 800140a:	fb08 3311 	mls	r3, r8, r1, r3
 800140e:	b2a4      	uxth	r4, r4
 8001410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001414:	fb01 f307 	mul.w	r3, r1, r7
 8001418:	42a3      	cmp	r3, r4
 800141a:	d908      	bls.n	800142e <__udivmoddi4+0x272>
 800141c:	eb1c 0404 	adds.w	r4, ip, r4
 8001420:	f101 36ff 	add.w	r6, r1, #4294967295
 8001424:	d213      	bcs.n	800144e <__udivmoddi4+0x292>
 8001426:	42a3      	cmp	r3, r4
 8001428:	d911      	bls.n	800144e <__udivmoddi4+0x292>
 800142a:	3902      	subs	r1, #2
 800142c:	4464      	add	r4, ip
 800142e:	1ae4      	subs	r4, r4, r3
 8001430:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001434:	e73b      	b.n	80012ae <__udivmoddi4+0xf2>
 8001436:	4604      	mov	r4, r0
 8001438:	e6f2      	b.n	8001220 <__udivmoddi4+0x64>
 800143a:	4608      	mov	r0, r1
 800143c:	e708      	b.n	8001250 <__udivmoddi4+0x94>
 800143e:	45c2      	cmp	sl, r8
 8001440:	d2af      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 8001442:	ebb8 0e02 	subs.w	lr, r8, r2
 8001446:	eb63 060c 	sbc.w	r6, r3, ip
 800144a:	3801      	subs	r0, #1
 800144c:	e7a9      	b.n	80013a2 <__udivmoddi4+0x1e6>
 800144e:	4631      	mov	r1, r6
 8001450:	e7ed      	b.n	800142e <__udivmoddi4+0x272>
 8001452:	4603      	mov	r3, r0
 8001454:	e79a      	b.n	800138c <__udivmoddi4+0x1d0>
 8001456:	4630      	mov	r0, r6
 8001458:	e7d4      	b.n	8001404 <__udivmoddi4+0x248>
 800145a:	46b0      	mov	r8, r6
 800145c:	e781      	b.n	8001362 <__udivmoddi4+0x1a6>
 800145e:	4463      	add	r3, ip
 8001460:	3802      	subs	r0, #2
 8001462:	e74f      	b.n	8001304 <__udivmoddi4+0x148>
 8001464:	4606      	mov	r6, r0
 8001466:	4623      	mov	r3, r4
 8001468:	4608      	mov	r0, r1
 800146a:	e711      	b.n	8001290 <__udivmoddi4+0xd4>
 800146c:	3e02      	subs	r6, #2
 800146e:	4463      	add	r3, ip
 8001470:	e732      	b.n	80012d8 <__udivmoddi4+0x11c>
 8001472:	bf00      	nop

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <TIM6_IRQ>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float Temperature;

void TIM6_IRQ(void)		// Gestion et Affichage Température
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &Temperature);
 800147c:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <TIM6_IRQ+0x1c>)
 800147e:	2101      	movs	r1, #1
 8001480:	2000      	movs	r0, #0
 8001482:	f007 ff03 	bl	800928c <IKS01A3_ENV_SENSOR_GetValue>
    Affichage_TEMP();
 8001486:	f000 f885 	bl	8001594 <Affichage_TEMP>
    display_temp();
 800148a:	f000 f8af 	bl	80015ec <display_temp>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000644 	.word	0x20000644

08001498 <floatToInt>:



 void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)		// Formatage
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 80014a4:	f04f 0100 	mov.w	r1, #0
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff fe15 	bl	80010d8 <__aeabi_fcmpge>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <floatToInt+0x24>
  {
    out_value->sign = 0;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e006      	b.n	80014ca <floatToInt+0x32>
  }else
  {
    out_value->sign = 1;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
    in = -in;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5 / pow(10, dec_prec));
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7fe ffc4 	bl	8000458 <__aeabi_f2d>
 80014d0:	4604      	mov	r4, r0
 80014d2:	460d      	mov	r5, r1
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7fe ffad 	bl	8000434 <__aeabi_i2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	492a      	ldr	r1, [pc, #168]	@ (800158c <floatToInt+0xf4>)
 80014e4:	f011 fe10 	bl	8013108 <pow>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	f04f 0000 	mov.w	r0, #0
 80014f0:	4927      	ldr	r1, [pc, #156]	@ (8001590 <floatToInt+0xf8>)
 80014f2:	f7ff f933 	bl	800075c <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7fe fe4d 	bl	800019c <__adddf3>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fad5 	bl	8000ab8 <__aeabi_d2f>
 800150e:	4603      	mov	r3, r0
 8001510:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff fdf4 	bl	8001100 <__aeabi_f2iz>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fbcd 	bl	8000cc4 <__aeabi_ui2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4619      	mov	r1, r3
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fb16 	bl	8000b60 <__aeabi_fsub>
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7fe ff8d 	bl	8000458 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7fe ff76 	bl	8000434 <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	490e      	ldr	r1, [pc, #56]	@ (800158c <floatToInt+0xf4>)
 8001552:	f011 fdd9 	bl	8013108 <pow>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe ffd3 	bl	8000508 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f011 ff35 	bl	80133d8 <trunc>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fa77 	bl	8000a68 <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	609a      	str	r2, [r3, #8]
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	40240000 	.word	0x40240000
 8001590:	3fe00000 	.word	0x3fe00000

08001594 <Affichage_TEMP>:


void Affichage_TEMP(void)		// Affichage Température console

{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <Affichage_TEMP+0x48>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	1d39      	adds	r1, r7, #4
 80015a0:	2202      	movs	r2, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff78 	bl	8001498 <floatToInt>

	snprintf(dataOut1, MAX_BUF_SIZE, "Temperature: %c%d.%02d degC ", ((out_value.sign > 0) ? '-' : '+'), (int)out_value.out_int, (int)out_value.out_dec);
 80015a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd01      	ble.n	80015b4 <Affichage_TEMP+0x20>
 80015b0:	232d      	movs	r3, #45	@ 0x2d
 80015b2:	e000      	b.n	80015b6 <Affichage_TEMP+0x22>
 80015b4:	232b      	movs	r3, #43	@ 0x2b
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	9101      	str	r1, [sp, #4]
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <Affichage_TEMP+0x4c>)
 80015c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <Affichage_TEMP+0x50>)
 80015c6:	f00f fcdd 	bl	8010f84 <sniprintf>
	printf("%s \r\n", dataOut1);
 80015ca:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <Affichage_TEMP+0x50>)
 80015cc:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <Affichage_TEMP+0x54>)
 80015ce:	f00f fc69 	bl	8010ea4 <iprintf>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000644 	.word	0x20000644
 80015e0:	08013ff0 	.word	0x08013ff0
 80015e4:	2000038c 	.word	0x2000038c
 80015e8:	08014010 	.word	0x08014010

080015ec <display_temp>:

void display_temp(void)		// Affichage Température LCD
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
	IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, &Temperature);
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <display_temp+0x78>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	2000      	movs	r0, #0
 80015f8:	f007 fe48 	bl	800928c <IKS01A3_ENV_SENSOR_GetValue>
	char buff[4];
	displayFloatToInt_t out_value;
	floatToInt(Temperature, &out_value, 2);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <display_temp+0x78>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4639      	mov	r1, r7
 8001602:	2202      	movs	r2, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff47 	bl	8001498 <floatToInt>
	sprintf(buff, "%d", (int)out_value.out_int);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4915      	ldr	r1, [pc, #84]	@ (8001668 <display_temp+0x7c>)
 8001614:	4618      	mov	r0, r3
 8001616:	f00f fce9 	bl	8010fec <siprintf>
	MAX7219_DisplayChar('1',buff[0],0);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	2031      	movs	r0, #49	@ 0x31
 8001622:	f000 fd1a 	bl	800205a <MAX7219_DisplayChar>
	MAX7219_DisplayChar('2',buff[1],1);
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	2032      	movs	r0, #50	@ 0x32
 800162e:	f000 fd14 	bl	800205a <MAX7219_DisplayChar>
	sprintf(buff, "%d", (int)out_value.out_dec);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	461a      	mov	r2, r3
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	490b      	ldr	r1, [pc, #44]	@ (8001668 <display_temp+0x7c>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00f fcd5 	bl	8010fec <siprintf>
	MAX7219_DisplayChar('3',buff[0],0);
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	2033      	movs	r0, #51	@ 0x33
 800164a:	f000 fd06 	bl	800205a <MAX7219_DisplayChar>
	//MAX7219_DisplayChar('3','.');
	MAX7219_DisplayChar('4',buff[1],0);
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	2200      	movs	r2, #0
 8001652:	4619      	mov	r1, r3
 8001654:	2034      	movs	r0, #52	@ 0x34
 8001656:	f000 fd00 	bl	800205a <MAX7219_DisplayChar>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000644 	.word	0x20000644
 8001668:	08014018 	.word	0x08014018

0800166c <adcFunction>:

void adcFunction(void)		// Releve des valeurs ADC
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc); // Start ADC with interrupt
 8001670:	4887      	ldr	r0, [pc, #540]	@ (8001890 <adcFunction+0x224>)
 8001672:	f008 fdbb 	bl	800a1ec <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc,100);
 8001676:	2164      	movs	r1, #100	@ 0x64
 8001678:	4885      	ldr	r0, [pc, #532]	@ (8001890 <adcFunction+0x224>)
 800167a:	f008 fe43 	bl	800a304 <HAL_ADC_PollForConversion>
  analogValue= HAL_ADC_GetValue(&hadc);
 800167e:	4884      	ldr	r0, [pc, #528]	@ (8001890 <adcFunction+0x224>)
 8001680:	f008 fed0 	bl	800a424 <HAL_ADC_GetValue>
 8001684:	4603      	mov	r3, r0
 8001686:	4a83      	ldr	r2, [pc, #524]	@ (8001894 <adcFunction+0x228>)
 8001688:	6013      	str	r3, [r2, #0]
  // Borne supérieure à 2100 car bug au delà
  if (analogValue>2100)
 800168a:	4b82      	ldr	r3, [pc, #520]	@ (8001894 <adcFunction+0x228>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f640 0234 	movw	r2, #2100	@ 0x834
 8001692:	4293      	cmp	r3, r2
 8001694:	d903      	bls.n	800169e <adcFunction+0x32>
  {
	  analogValue=2100;
 8001696:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <adcFunction+0x228>)
 8001698:	f640 0234 	movw	r2, #2100	@ 0x834
 800169c:	601a      	str	r2, [r3, #0]
  }
  HAL_ADC_Stop(&hadc);
 800169e:	487c      	ldr	r0, [pc, #496]	@ (8001890 <adcFunction+0x224>)
 80016a0:	f008 fe04 	bl	800a2ac <HAL_ADC_Stop>
  printf("ADC_Value = %lu \n\r",analogValue);//valeur max à gauche 4095
 80016a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001894 <adcFunction+0x228>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	487b      	ldr	r0, [pc, #492]	@ (8001898 <adcFunction+0x22c>)
 80016ac:	f00f fbfa 	bl	8010ea4 <iprintf>

	  if(analogValue >= 0 && analogValue < 300)
 80016b0:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <adcFunction+0x228>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016b8:	d21e      	bcs.n	80016f8 <adcFunction+0x8c>
  		{
	  	  	  printf("0-300");
 80016ba:	4878      	ldr	r0, [pc, #480]	@ (800189c <adcFunction+0x230>)
 80016bc:	f00f fbf2 	bl	8010ea4 <iprintf>
	  	  	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2102      	movs	r1, #2
 80016c4:	4876      	ldr	r0, [pc, #472]	@ (80018a0 <adcFunction+0x234>)
 80016c6:	f009 fe47 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2104      	movs	r1, #4
 80016ce:	4874      	ldr	r0, [pc, #464]	@ (80018a0 <adcFunction+0x234>)
 80016d0:	f009 fe42 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016da:	4871      	ldr	r0, [pc, #452]	@ (80018a0 <adcFunction+0x234>)
 80016dc:	f009 fe3c 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016e6:	486e      	ldr	r0, [pc, #440]	@ (80018a0 <adcFunction+0x234>)
 80016e8:	f009 fe36 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016f2:	486b      	ldr	r0, [pc, #428]	@ (80018a0 <adcFunction+0x234>)
 80016f4:	f009 fe30 	bl	800b358 <HAL_GPIO_WritePin>
  		}

	   if(analogValue >= 300 && analogValue < 600)
 80016f8:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <adcFunction+0x228>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001700:	d323      	bcc.n	800174a <adcFunction+0xde>
 8001702:	4b64      	ldr	r3, [pc, #400]	@ (8001894 <adcFunction+0x228>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800170a:	d21e      	bcs.n	800174a <adcFunction+0xde>
				{
		  	  printf("300-600");
 800170c:	4865      	ldr	r0, [pc, #404]	@ (80018a4 <adcFunction+0x238>)
 800170e:	f00f fbc9 	bl	8010ea4 <iprintf>
		  	HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	4862      	ldr	r0, [pc, #392]	@ (80018a0 <adcFunction+0x234>)
 8001718:	f009 fe1e 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2104      	movs	r1, #4
 8001720:	485f      	ldr	r0, [pc, #380]	@ (80018a0 <adcFunction+0x234>)
 8001722:	f009 fe19 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800172c:	485c      	ldr	r0, [pc, #368]	@ (80018a0 <adcFunction+0x234>)
 800172e:	f009 fe13 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001738:	4859      	ldr	r0, [pc, #356]	@ (80018a0 <adcFunction+0x234>)
 800173a:	f009 fe0d 	bl	800b358 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001744:	4856      	ldr	r0, [pc, #344]	@ (80018a0 <adcFunction+0x234>)
 8001746:	f009 fe07 	bl	800b358 <HAL_GPIO_WritePin>
				}

	   if(analogValue >= 600 && analogValue < 900)
 800174a:	4b52      	ldr	r3, [pc, #328]	@ (8001894 <adcFunction+0x228>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001752:	d323      	bcc.n	800179c <adcFunction+0x130>
 8001754:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <adcFunction+0x228>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800175c:	d21e      	bcs.n	800179c <adcFunction+0x130>
				{
				printf("600-900");
 800175e:	4852      	ldr	r0, [pc, #328]	@ (80018a8 <adcFunction+0x23c>)
 8001760:	f00f fba0 	bl	8010ea4 <iprintf>
				HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2102      	movs	r1, #2
 8001768:	484d      	ldr	r0, [pc, #308]	@ (80018a0 <adcFunction+0x234>)
 800176a:	f009 fdf5 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2104      	movs	r1, #4
 8001772:	484b      	ldr	r0, [pc, #300]	@ (80018a0 <adcFunction+0x234>)
 8001774:	f009 fdf0 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800177e:	4848      	ldr	r0, [pc, #288]	@ (80018a0 <adcFunction+0x234>)
 8001780:	f009 fdea 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178a:	4845      	ldr	r0, [pc, #276]	@ (80018a0 <adcFunction+0x234>)
 800178c:	f009 fde4 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001796:	4842      	ldr	r0, [pc, #264]	@ (80018a0 <adcFunction+0x234>)
 8001798:	f009 fdde 	bl	800b358 <HAL_GPIO_WritePin>
				}

	   if(analogValue >= 900 && analogValue < 1200)
 800179c:	4b3d      	ldr	r3, [pc, #244]	@ (8001894 <adcFunction+0x228>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80017a4:	d323      	bcc.n	80017ee <adcFunction+0x182>
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <adcFunction+0x228>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80017ae:	d21e      	bcs.n	80017ee <adcFunction+0x182>
			{
				printf("900-1200");
 80017b0:	483e      	ldr	r0, [pc, #248]	@ (80018ac <adcFunction+0x240>)
 80017b2:	f00f fb77 	bl	8010ea4 <iprintf>
				HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2102      	movs	r1, #2
 80017ba:	4839      	ldr	r0, [pc, #228]	@ (80018a0 <adcFunction+0x234>)
 80017bc:	f009 fdcc 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2104      	movs	r1, #4
 80017c4:	4836      	ldr	r0, [pc, #216]	@ (80018a0 <adcFunction+0x234>)
 80017c6:	f009 fdc7 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017d0:	4833      	ldr	r0, [pc, #204]	@ (80018a0 <adcFunction+0x234>)
 80017d2:	f009 fdc1 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017dc:	4830      	ldr	r0, [pc, #192]	@ (80018a0 <adcFunction+0x234>)
 80017de:	f009 fdbb 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e8:	482d      	ldr	r0, [pc, #180]	@ (80018a0 <adcFunction+0x234>)
 80017ea:	f009 fdb5 	bl	800b358 <HAL_GPIO_WritePin>
				}

	   if(analogValue >= 1200 && analogValue < 1500)
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <adcFunction+0x228>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80017f6:	d324      	bcc.n	8001842 <adcFunction+0x1d6>
 80017f8:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <adcFunction+0x228>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001800:	4293      	cmp	r3, r2
 8001802:	d81e      	bhi.n	8001842 <adcFunction+0x1d6>
				{
				printf("1200-1500");
 8001804:	482a      	ldr	r0, [pc, #168]	@ (80018b0 <adcFunction+0x244>)
 8001806:	f00f fb4d 	bl	8010ea4 <iprintf>
				HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2102      	movs	r1, #2
 800180e:	4824      	ldr	r0, [pc, #144]	@ (80018a0 <adcFunction+0x234>)
 8001810:	f009 fda2 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2104      	movs	r1, #4
 8001818:	4821      	ldr	r0, [pc, #132]	@ (80018a0 <adcFunction+0x234>)
 800181a:	f009 fd9d 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001824:	481e      	ldr	r0, [pc, #120]	@ (80018a0 <adcFunction+0x234>)
 8001826:	f009 fd97 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <adcFunction+0x234>)
 8001832:	f009 fd91 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800183c:	4818      	ldr	r0, [pc, #96]	@ (80018a0 <adcFunction+0x234>)
 800183e:	f009 fd8b 	bl	800b358 <HAL_GPIO_WritePin>
				}

	   if(analogValue >= 1500)
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <adcFunction+0x228>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f240 52db 	movw	r2, #1499	@ 0x5db
 800184a:	4293      	cmp	r3, r2
 800184c:	d91e      	bls.n	800188c <adcFunction+0x220>
				{
				printf("1500++");
 800184e:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <adcFunction+0x248>)
 8001850:	f00f fb28 	bl	8010ea4 <iprintf>
				HAL_GPIO_WritePin(L0_GPIO_Port, L0_Pin,GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2102      	movs	r1, #2
 8001858:	4811      	ldr	r0, [pc, #68]	@ (80018a0 <adcFunction+0x234>)
 800185a:	f009 fd7d 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin,GPIO_PIN_SET);
 800185e:	2201      	movs	r2, #1
 8001860:	2104      	movs	r1, #4
 8001862:	480f      	ldr	r0, [pc, #60]	@ (80018a0 <adcFunction+0x234>)
 8001864:	f009 fd78 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin,GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800186e:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <adcFunction+0x234>)
 8001870:	f009 fd72 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L3_GPIO_Port, L3_Pin,GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187a:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <adcFunction+0x234>)
 800187c:	f009 fd6c 	bl	800b358 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(L4_GPIO_Port, L4_Pin,GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <adcFunction+0x234>)
 8001888:	f009 fd66 	bl	800b358 <HAL_GPIO_WritePin>
				}
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2000048c 	.word	0x2000048c
 8001894:	20000640 	.word	0x20000640
 8001898:	0801401c 	.word	0x0801401c
 800189c:	08014030 	.word	0x08014030
 80018a0:	40020400 	.word	0x40020400
 80018a4:	08014038 	.word	0x08014038
 80018a8:	08014040 	.word	0x08014040
 80018ac:	08014048 	.word	0x08014048
 80018b0:	08014054 	.word	0x08014054
 80018b4:	08014060 	.word	0x08014060

080018b8 <buzzer>:

void buzzer(float Delay)		// Buzzer avec délai fonction du champ
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	Delay = 200000/Delay;
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4811      	ldr	r0, [pc, #68]	@ (8001908 <buzzer+0x50>)
 80018c4:	f7ff fb0a 	bl	8000edc <__aeabi_fdiv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	607b      	str	r3, [r7, #4]
	printf("Delay = %.4f !!!! \r\n",Delay);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7fe fdc3 	bl	8000458 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	480d      	ldr	r0, [pc, #52]	@ (800190c <buzzer+0x54>)
 80018d8:	f00f fae4 	bl	8010ea4 <iprintf>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Démarre le buzzer
 80018dc:	2104      	movs	r1, #4
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <buzzer+0x58>)
 80018e0:	f00d fcfc 	bl	800f2dc <HAL_TIM_PWM_Start>
    HAL_Delay(100); // Durée du bip
 80018e4:	2064      	movs	r0, #100	@ 0x64
 80018e6:	f008 fb19 	bl	8009f1c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); // Arrête le buzzer
 80018ea:	2104      	movs	r1, #4
 80018ec:	4808      	ldr	r0, [pc, #32]	@ (8001910 <buzzer+0x58>)
 80018ee:	f00d fd8b 	bl	800f408 <HAL_TIM_PWM_Stop>
    HAL_Delay(Delay); // Délai avant le prochain bip
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fc2a 	bl	800114c <__aeabi_f2uiz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f008 fb0e 	bl	8009f1c <HAL_Delay>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	48435000 	.word	0x48435000
 800190c:	08014068 	.word	0x08014068
 8001910:	20000578 	.word	0x20000578

08001914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191a:	f008 fa91 	bl	8009e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191e:	f000 f889 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001922:	f000 faa5 	bl	8001e70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001926:	f000 fa79 	bl	8001e1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800192a:	f000 f94b 	bl	8001bc4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800192e:	f000 f9cb 	bl	8001cc8 <MX_TIM3_Init>
  MX_ADC_Init();
 8001932:	f000 f8cd 	bl	8001ad0 <MX_ADC_Init>
  MX_TIM6_Init();
 8001936:	f000 fa3b 	bl	8001db0 <MX_TIM6_Init>
  MX_TIM2_Init();
 800193a:	f000 f979 	bl	8001c30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Test LCD
   MAX7219_Init();
 800193e:	f000 fb37 	bl	8001fb0 <MAX7219_Init>
   MAX7219_DisplayTestStart();
 8001942:	f000 fb52 	bl	8001fea <MAX7219_DisplayTestStart>
   HAL_Delay(2000);
 8001946:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800194a:	f008 fae7 	bl	8009f1c <HAL_Delay>
   MAX7219_DisplayTestStop();
 800194e:	f000 fb54 	bl	8001ffa <MAX7219_DisplayTestStop>

   // Test de comm' des capteurs
if(IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE) != BSP_ERROR_NONE)
 8001952:	2101      	movs	r1, #1
 8001954:	2000      	movs	r0, #0
 8001956:	f007 fb8b 	bl	8009070 <IKS01A3_ENV_SENSOR_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <main+0x52>
{
	printf("Defaut init Temp !!! \r\n");
 8001960:	482d      	ldr	r0, [pc, #180]	@ (8001a18 <main+0x104>)
 8001962:	f00f fb07 	bl	8010f74 <puts>
}

if(IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0,MOTION_MAGNETO) != BSP_ERROR_NONE)
 8001966:	2104      	movs	r1, #4
 8001968:	2002      	movs	r0, #2
 800196a:	f007 ff19 	bl	80097a0 <IKS01A3_MOTION_SENSOR_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <main+0x66>
{
	printf("Defaut init Magneto !!! \r\n");
 8001974:	4829      	ldr	r0, [pc, #164]	@ (8001a1c <main+0x108>)
 8001976:	f00f fafd 	bl	8010f74 <puts>
}

// Init Buzzer
HAL_TIM_PWM_Init(&htim3);
 800197a:	4829      	ldr	r0, [pc, #164]	@ (8001a20 <main+0x10c>)
 800197c:	f00d fc66 	bl	800f24c <HAL_TIM_PWM_Init>
HAL_TIM_Base_Start_IT(&htim3);
 8001980:	4827      	ldr	r0, [pc, #156]	@ (8001a20 <main+0x10c>)
 8001982:	f00d fc11 	bl	800f1a8 <HAL_TIM_Base_Start_IT>

// Test Timer interruption Température
if(HAL_TIM_Base_Start_IT(&htim6)!= HAL_OK)
 8001986:	4827      	ldr	r0, [pc, #156]	@ (8001a24 <main+0x110>)
 8001988:	f00d fc0e 	bl	800f1a8 <HAL_TIM_Base_Start_IT>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <main+0x82>
{
	Error_Handler();
 8001992:	f000 faef 	bl	8001f74 <Error_Handler>

while (1)
{
	{
	    // Gestion et Recupération valeur magneto
	    IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, &mag_axes);
 8001996:	463b      	mov	r3, r7
 8001998:	461a      	mov	r2, r3
 800199a:	2104      	movs	r1, #4
 800199c:	2002      	movs	r0, #2
 800199e:	f007 fffb 	bl	8009998 <IKS01A3_MOTION_SENSOR_GetAxes>
	    printf("\n X = %ld Y = %ld Z = %ld \n ", mag_axes.x, mag_axes.y, mag_axes.z);
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	481f      	ldr	r0, [pc, #124]	@ (8001a28 <main+0x114>)
 80019aa:	f00f fa7b 	bl	8010ea4 <iprintf>
	    float moyenne_mag = sqrt(mag_axes.x * mag_axes.x + mag_axes.y * mag_axes.y + mag_axes.z * mag_axes.z);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	fb03 f202 	mul.w	r2, r3, r2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	441a      	add	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fd32 	bl	8000434 <__aeabi_i2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f011 fbfe 	bl	80131d8 <sqrt>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f868 	bl	8000ab8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
	    printf("Magnitude moyenne: %ld\n", (long)moyenne_mag);
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fb87 	bl	8001100 <__aeabi_f2iz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <main+0x118>)
 80019f8:	f00f fa54 	bl	8010ea4 <iprintf>
	    fflush(stdout);
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <main+0x11c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00f f978 	bl	8010cf8 <fflush>
	    // Buzzer fonction du champ
	    buzzer(moyenne_mag);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff55 	bl	80018b8 <buzzer>

	    // ADC et LED
	    adcFunction();
 8001a0e:	f7ff fe2d 	bl	800166c <adcFunction>
	{
 8001a12:	bf00      	nop
 8001a14:	e7bf      	b.n	8001996 <main+0x82>
 8001a16:	bf00      	nop
 8001a18:	08014080 	.word	0x08014080
 8001a1c:	08014098 	.word	0x08014098
 8001a20:	20000578 	.word	0x20000578
 8001a24:	200005b8 	.word	0x200005b8
 8001a28:	080140b4 	.word	0x080140b4
 8001a2c:	080140d4 	.word	0x080140d4
 8001a30:	200001a4 	.word	0x200001a4

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b092      	sub	sp, #72	@ 0x48
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2234      	movs	r2, #52	@ 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00f fbca 	bl	80111dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <SystemClock_Config+0x98>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <SystemClock_Config+0x98>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a64:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a66:	2302      	movs	r3, #2
 8001a68:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6e:	2310      	movs	r3, #16
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a80:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001a84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00c f9ae 	bl	800ddec <HAL_RCC_OscConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a96:	f000 fa6d 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00c fcca 	bl	800e44c <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001abe:	f000 fa59 	bl	8001f74 <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3748      	adds	r7, #72	@ 0x48
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]
 8001ae6:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001af2:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001af4:	4a31      	ldr	r2, [pc, #196]	@ (8001bbc <MX_ADC_Init+0xec>)
 8001af6:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001af8:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b04:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b10:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001b16:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001b1c:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001b22:	4b25      	ldr	r3, [pc, #148]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001b28:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001b30:	4b21      	ldr	r3, [pc, #132]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b40:	2210      	movs	r2, #16
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b52:	4819      	ldr	r0, [pc, #100]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b54:	f008 fa04 	bl	8009f60 <HAL_ADC_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001b5e:	f000 fa09 	bl	8001f74 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <MX_ADC_Init+0xf0>)
 8001b64:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	763b      	strb	r3, [r7, #24]
  AnalogWDGConfig.HighThreshold = 1000;
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001b80:	f008 feda 	bl	800a938 <HAL_ADC_AnalogWDGConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001b8a:	f000 f9f3 	bl	8001f74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b92:	2301      	movs	r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	@ (8001bb8 <MX_ADC_Init+0xe8>)
 8001ba0:	f008 fd5e 	bl	800a660 <HAL_ADC_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_ADC_Init+0xde>
  {
    Error_Handler();
 8001baa:	f000 f9e3 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000048c 	.word	0x2000048c
 8001bbc:	40012400 	.word	0x40012400
 8001bc0:	00800200 	.word	0x00800200

08001bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bca:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <MX_SPI1_Init+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bd0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001c10:	220a      	movs	r2, #10
 8001c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_SPI1_Init+0x64>)
 8001c16:	f00c fedf 	bl	800e9d8 <HAL_SPI_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c20:	f000 f9a8 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200004e0 	.word	0x200004e0
 8001c2c:	40013000 	.word	0x40013000

08001c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	463b      	mov	r3, r7
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c76:	f00d fa57 	bl	800f128 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c80:	f000 f978 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001c92:	f00d fd95 	bl	800f7c0 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c9c:	f000 f96a 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_TIM2_Init+0x94>)
 8001cae:	f00e f89b 	bl	800fde8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb8:	f000 f95c 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000538 	.word	0x20000538

08001cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <MX_TIM3_Init+0xe4>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2278;
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d06:	f640 02e6 	movw	r2, #2278	@ 0x8e6
 8001d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d18:	4823      	ldr	r0, [pc, #140]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d1a:	f00d fa05 	bl	800f128 <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001d24:	f000 f926 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	4619      	mov	r1, r3
 8001d34:	481c      	ldr	r0, [pc, #112]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d36:	f00d fd43 	bl	800f7c0 <HAL_TIM_ConfigClockSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d40:	f000 f918 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d44:	4818      	ldr	r0, [pc, #96]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d46:	f00d fa81 	bl	800f24c <HAL_TIM_PWM_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d50:	f000 f910 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	4811      	ldr	r0, [pc, #68]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d64:	f00e f840 	bl	800fde8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001d6e:	f000 f901 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d72:	2360      	movs	r3, #96	@ 0x60
 8001d74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1139;
 8001d76:	f240 4373 	movw	r3, #1139	@ 0x473
 8001d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	2204      	movs	r2, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d8c:	f00d fc56 	bl	800f63c <HAL_TIM_PWM_ConfigChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001d96:	f000 f8ed 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d9a:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <MX_TIM3_Init+0xe0>)
 8001d9c:	f000 fafa 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001da0:	bf00      	nop
 8001da2:	3728      	adds	r7, #40	@ 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000578 	.word	0x20000578
 8001dac:	40000400 	.word	0x40000400

08001db0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	463b      	mov	r3, r7
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001dc0:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <MX_TIM6_Init+0x68>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001dc6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001dca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dd8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001de2:	f00d f9a1 	bl	800f128 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001dec:	f000 f8c2 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_TIM6_Init+0x64>)
 8001dfe:	f00d fff3 	bl	800fde8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e08:	f000 f8b4 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200005b8 	.word	0x200005b8
 8001e18:	40001000 	.word	0x40001000

08001e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <MX_USART2_UART_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e54:	f00e f826 	bl	800fea4 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 f889 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200005f8 	.word	0x200005f8
 8001e6c:	40004400 	.word	0x40004400

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a28      	ldr	r2, [pc, #160]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <MX_GPIO_Init+0xd4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f641 4106 	movw	r1, #7174	@ 0x1c06
 8001eec:	4816      	ldr	r0, [pc, #88]	@ (8001f48 <MX_GPIO_Init+0xd8>)
 8001eee:	f009 fa33 	bl	800b358 <HAL_GPIO_WritePin>
                          |L4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ef8:	4814      	ldr	r0, [pc, #80]	@ (8001f4c <MX_GPIO_Init+0xdc>)
 8001efa:	f009 fa2d 	bl	800b358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 8001efe:	f641 4306 	movw	r3, #7174	@ 0x1c06
 8001f02:	617b      	str	r3, [r7, #20]
                          |L4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <MX_GPIO_Init+0xd8>)
 8001f18:	f008 ff9e 	bl	800ae58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_GPIO_Init+0xdc>)
 8001f36:	f008 ff8f 	bl	800ae58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	@ 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020000 	.word	0x40020000

08001f50 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	//ITM_SendChar(ch);	// Printf sur la console, mais le debugger ne fonctionne pas
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8001f58:	1d39      	adds	r1, r7, #4
 8001f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4803      	ldr	r0, [pc, #12]	@ (8001f70 <__io_putchar+0x20>)
 8001f62:	f00d ffef 	bl	800ff44 <HAL_UART_Transmit>
	return(ch);
 8001f66:	687b      	ldr	r3, [r7, #4]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200005f8 	.word	0x200005f8

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <Error_Handler+0x8>

08001f80 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001f84:	2201      	movs	r2, #1
 8001f86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f8a:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <SPI_CS_High+0x14>)
 8001f8c:	f009 f9e4 	bl	800b358 <HAL_GPIO_WritePin>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40020000 	.word	0x40020000

08001f98 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa2:	4802      	ldr	r0, [pc, #8]	@ (8001fac <SPI_CS_Low+0x14>)
 8001fa4:	f009 f9d8 	bl	800b358 <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40020000 	.word	0x40020000

08001fb0 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8001fb4:	2107      	movs	r1, #7
 8001fb6:	200b      	movs	r0, #11
 8001fb8:	f000 f8a0 	bl	80020fc <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2009      	movs	r0, #9
 8001fc0:	f000 f89c 	bl	80020fc <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8001fc4:	f000 f809 	bl	8001fda <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8001fc8:	f000 f817 	bl	8001ffa <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 8001fcc:	f000 f82f 	bl	800202e <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	f000 f81a 	bl	800200a <MAX7219_SetBrightness>
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 8001fde:	2101      	movs	r1, #1
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f000 f88b 	bl	80020fc <MAX7219_Write>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <MAX7219_DisplayTestStart>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStart (void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 1);                 // put MAX7219 into "display test" mode
 8001fee:	2101      	movs	r1, #1
 8001ff0:	200f      	movs	r0, #15
 8001ff2:	f000 f883 	bl	80020fc <MAX7219_Write>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 8001ffe:	2100      	movs	r1, #0
 8002000:	200f      	movs	r0, #15
 8002002:	f000 f87b 	bl	80020fc <MAX7219_Write>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}

0800200a <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	4619      	mov	r1, r3
 8002020:	200a      	movs	r0, #10
 8002022:	f000 f86b 	bl	80020fc <MAX7219_Write>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 8002034:	2300      	movs	r3, #0
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	e007      	b.n	800204a <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f85c 	bl	80020fc <MAX7219_Write>
  for (i=0; i < 8; i++)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	3301      	adds	r3, #1
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b07      	cmp	r3, #7
 800204e:	d9f4      	bls.n	800203a <MAX7219_Clear+0xc>
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character, int dot )
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	603a      	str	r2, [r7, #0]
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	460b      	mov	r3, r1
 8002068:	71bb      	strb	r3, [r7, #6]
	if(dot){
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <MAX7219_DisplayChar+0x38>
		int valdot = MAX7219_LookupCode(character)|0x80;
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f81c 	bl	80020b0 <MAX7219_LookupCode>
 8002078:	4603      	mov	r3, r0
 800207a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800207e:	b2db      	uxtb	r3, r3
 8002080:	60fb      	str	r3, [r7, #12]
		MAX7219_Write(digit, valdot);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f836 	bl	80020fc <MAX7219_Write>
	}else{
		MAX7219_Write(digit, MAX7219_LookupCode(character));
	}
}
 8002090:	e00a      	b.n	80020a8 <MAX7219_DisplayChar+0x4e>
		MAX7219_Write(digit, MAX7219_LookupCode(character));
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f80b 	bl	80020b0 <MAX7219_LookupCode>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f82a 	bl	80020fc <MAX7219_Write>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e00f      	b.n	80020e0 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <MAX7219_LookupCode+0x48>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d105      	bne.n	80020da <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <MAX7219_LookupCode+0x48>)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	e009      	b.n	80020ee <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <MAX7219_LookupCode+0x48>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e9      	bne.n	80020c0 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	080140ec 	.word	0x080140ec

080020fc <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 800210c:	f7ff ff44 	bl	8001f98 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f80c 	bl	8002130 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8002118:	79bb      	ldrb	r3, [r7, #6]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f808 	bl	8002130 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8002120:	f7ff ff2e 	bl	8001f80 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 8002124:	f7ff ff38 	bl	8001f98 <SPI_CS_Low>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 800213a:	1df9      	adds	r1, r7, #7
 800213c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002140:	2201      	movs	r2, #1
 8002142:	4803      	ldr	r0, [pc, #12]	@ (8002150 <MAX7219_SendByte+0x20>)
 8002144:	f00c fcd1 	bl	800eaea <HAL_SPI_Transmit>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200004e0 	.word	0x200004e0

08002154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_MspInit+0x5c>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002164:	6253      	str	r3, [r2, #36]	@ 0x24
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_MspInit+0x5c>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002194:	6253      	str	r3, [r2, #36]	@ 0x24
 8002196:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021a2:	2007      	movs	r0, #7
 80021a4:	f008 fdba 	bl	800ad1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <HAL_ADC_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a18      	ldr	r2, [pc, #96]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	61d3      	str	r3, [r2, #28]
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <HAL_ADC_MspInit+0x88>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002206:	2301      	movs	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220a:	2303      	movs	r3, #3
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4809      	ldr	r0, [pc, #36]	@ (8002240 <HAL_ADC_MspInit+0x8c>)
 800221a:	f008 fe1d 	bl	800ae58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2012      	movs	r0, #18
 8002224:	f008 fd85 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002228:	2012      	movs	r0, #18
 800222a:	f008 fd9e 	bl	800ad6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	@ 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40012400 	.word	0x40012400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000

08002244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_SPI_MspInit+0x8c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d12f      	bne.n	80022c6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a1a      	ldr	r2, [pc, #104]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 800226c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_SPI_MspInit+0x90>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002296:	23e0      	movs	r3, #224	@ 0xe0
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4809      	ldr	r0, [pc, #36]	@ (80022d8 <HAL_SPI_MspInit+0x94>)
 80022b2:	f008 fdd1 	bl	800ae58 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2023      	movs	r0, #35	@ 0x23
 80022bc:	f008 fd39 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022c0:	2023      	movs	r0, #35	@ 0x23
 80022c2:	f008 fd52 	bl	800ad6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40013000 	.word	0x40013000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ec:	d114      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	4a25      	ldr	r2, [pc, #148]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6253      	str	r3, [r2, #36]	@ 0x24
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	201c      	movs	r0, #28
 800230c:	f008 fd11 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002310:	201c      	movs	r0, #28
 8002312:	f008 fd2a 	bl	800ad6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002316:	e032      	b.n	800237e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1b      	ldr	r2, [pc, #108]	@ (800238c <HAL_TIM_Base_MspInit+0xb0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d114      	bne.n	800234c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002322:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	4a18      	ldr	r2, [pc, #96]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6253      	str	r3, [r2, #36]	@ 0x24
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	201d      	movs	r0, #29
 8002340:	f008 fcf7 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002344:	201d      	movs	r0, #29
 8002346:	f008 fd10 	bl	800ad6a <HAL_NVIC_EnableIRQ>
}
 800234a:	e018      	b.n	800237e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM6)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <HAL_TIM_Base_MspInit+0xb4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d113      	bne.n	800237e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	4a0b      	ldr	r2, [pc, #44]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 800235c:	f043 0310 	orr.w	r3, r3, #16
 8002360:	6253      	str	r3, [r2, #36]	@ 0x24
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_TIM_Base_MspInit+0xac>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	202b      	movs	r0, #43	@ 0x2b
 8002374:	f008 fcdd 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002378:	202b      	movs	r0, #43	@ 0x2b
 800237a:	f008 fcf6 	bl	800ad6a <HAL_NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40000400 	.word	0x40000400
 8002390:	40001000 	.word	0x40001000

08002394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d11b      	bne.n	80023ee <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_TIM_MspPostInit+0x68>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_TIM_MspPostInit+0x68>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_TIM_MspPostInit+0x68>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = BUZZ_Pin;
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023de:	2302      	movs	r3, #2
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	4805      	ldr	r0, [pc, #20]	@ (8002400 <HAL_TIM_MspPostInit+0x6c>)
 80023ea:	f008 fd35 	bl	800ae58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40000400 	.word	0x40000400
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020800 	.word	0x40020800

08002404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	@ (8002480 <HAL_UART_MspInit+0x7c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d127      	bne.n	8002476 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_UART_MspInit+0x80>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	4a16      	ldr	r2, [pc, #88]	@ (8002484 <HAL_UART_MspInit+0x80>)
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	6253      	str	r3, [r2, #36]	@ 0x24
 8002432:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <HAL_UART_MspInit+0x80>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_UART_MspInit+0x80>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a10      	ldr	r2, [pc, #64]	@ (8002484 <HAL_UART_MspInit+0x80>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_UART_MspInit+0x80>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002456:	230c      	movs	r3, #12
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002466:	2307      	movs	r3, #7
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	@ (8002488 <HAL_UART_MspInit+0x84>)
 8002472:	f008 fcf1 	bl	800ae58 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002476:	bf00      	nop
 8002478:	3728      	adds	r7, #40	@ 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40004400 	.word	0x40004400
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <NMI_Handler+0x4>

08002494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <HardFault_Handler+0x4>

0800249c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <MemManage_Handler+0x4>

080024a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024dc:	f007 fd02 	bl	8009ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <ADC1_IRQHandler+0x10>)
 80024ea:	f007 ffa7 	bl	800a43c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000048c 	.word	0x2000048c

080024f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <TIM2_IRQHandler+0x10>)
 80024fe:	f00c ffc0 	bl	800f482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000538 	.word	0x20000538

0800250c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <TIM3_IRQHandler+0x10>)
 8002512:	f00c ffb6 	bl	800f482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000578 	.word	0x20000578

08002520 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <I2C1_EV_IRQHandler+0x10>)
 8002526:	f009 fbe9 	bl	800bcfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000648 	.word	0x20000648

08002534 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <I2C1_ER_IRQHandler+0x10>)
 800253a:	f009 fd32 	bl	800bfa2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000648 	.word	0x20000648

08002548 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <SPI1_IRQHandler+0x10>)
 800254e:	f00c fc0f 	bl	800ed70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200004e0 	.word	0x200004e0

0800255c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <TIM6_IRQHandler+0x14>)
 8002562:	f00c ff8e 	bl	800f482 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */
TIM6_IRQ();
 8002566:	f7fe ff87 	bl	8001478 <TIM6_IRQ>
  /* USER CODE END TIM6_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200005b8 	.word	0x200005b8

08002574 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800257e:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <BSP_I2C1_Init+0x58>)
 8002580:	4a13      	ldr	r2, [pc, #76]	@ (80025d0 <BSP_I2C1_Init+0x5c>)
 8002582:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002584:	4b13      	ldr	r3, [pc, #76]	@ (80025d4 <BSP_I2C1_Init+0x60>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4912      	ldr	r1, [pc, #72]	@ (80025d4 <BSP_I2C1_Init+0x60>)
 800258c:	600a      	str	r2, [r1, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d117      	bne.n	80025c2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002592:	480e      	ldr	r0, [pc, #56]	@ (80025cc <BSP_I2C1_Init+0x58>)
 8002594:	f009 fe02 	bl	800c19c <HAL_I2C_GetState>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d111      	bne.n	80025c2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800259e:	480b      	ldr	r0, [pc, #44]	@ (80025cc <BSP_I2C1_Init+0x58>)
 80025a0:	f000 f8e2 	bl	8002768 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80025aa:	4808      	ldr	r0, [pc, #32]	@ (80025cc <BSP_I2C1_Init+0x58>)
 80025ac:	f000 f8a8 	bl	8002700 <MX_I2C1_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80025b6:	f06f 0307 	mvn.w	r3, #7
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	e001      	b.n	80025c2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000648 	.word	0x20000648
 80025d0:	40005400 	.word	0x40005400
 80025d4:	2000069c 	.word	0x2000069c

080025d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80025e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <BSP_I2C1_DeInit+0x48>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <BSP_I2C1_DeInit+0x48>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002620 <BSP_I2C1_DeInit+0x48>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <BSP_I2C1_DeInit+0x48>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <BSP_I2C1_DeInit+0x4c>)
 80025fe:	f000 f909 	bl	8002814 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002602:	4808      	ldr	r0, [pc, #32]	@ (8002624 <BSP_I2C1_DeInit+0x4c>)
 8002604:	f009 f804 	bl	800b610 <HAL_I2C_DeInit>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800260e:	f06f 0307 	mvn.w	r3, #7
 8002612:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000069c 	.word	0x2000069c
 8002624:	20000648 	.word	0x20000648

08002628 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af04      	add	r7, sp, #16
 800262e:	60ba      	str	r2, [r7, #8]
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	81fb      	strh	r3, [r7, #14]
 8002636:	460b      	mov	r3, r1
 8002638:	81bb      	strh	r3, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002642:	89ba      	ldrh	r2, [r7, #12]
 8002644:	89f9      	ldrh	r1, [r7, #14]
 8002646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2301      	movs	r3, #1
 8002656:	480c      	ldr	r0, [pc, #48]	@ (8002688 <BSP_I2C1_WriteReg+0x60>)
 8002658:	f009 f830 	bl	800b6bc <HAL_I2C_Mem_Write>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002662:	4809      	ldr	r0, [pc, #36]	@ (8002688 <BSP_I2C1_WriteReg+0x60>)
 8002664:	f009 fda7 	bl	800c1b6 <HAL_I2C_GetError>
 8002668:	4603      	mov	r3, r0
 800266a:	2b04      	cmp	r3, #4
 800266c:	d103      	bne.n	8002676 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800266e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e002      	b.n	800267c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002676:	f06f 0303 	mvn.w	r3, #3
 800267a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800267c:	697b      	ldr	r3, [r7, #20]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000648 	.word	0x20000648

0800268c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	@ 0x28
 8002690:	af04      	add	r7, sp, #16
 8002692:	60ba      	str	r2, [r7, #8]
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	81fb      	strh	r3, [r7, #14]
 800269a:	460b      	mov	r3, r1
 800269c:	81bb      	strh	r3, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80026a6:	89ba      	ldrh	r2, [r7, #12]
 80026a8:	89f9      	ldrh	r1, [r7, #14]
 80026aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	480c      	ldr	r0, [pc, #48]	@ (80026ec <BSP_I2C1_ReadReg+0x60>)
 80026bc:	f009 f8f8 	bl	800b8b0 <HAL_I2C_Mem_Read>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80026c6:	4809      	ldr	r0, [pc, #36]	@ (80026ec <BSP_I2C1_ReadReg+0x60>)
 80026c8:	f009 fd75 	bl	800c1b6 <HAL_I2C_GetError>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d103      	bne.n	80026da <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026d2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e002      	b.n	80026e0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026da:	f06f 0303 	mvn.w	r3, #3
 80026de:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80026e0:	697b      	ldr	r3, [r7, #20]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000648 	.word	0x20000648

080026f0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80026f4:	f007 fc08 	bl	8009f08 <HAL_GetTick>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <MX_I2C1_Init+0x60>)
 8002710:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <MX_I2C1_Init+0x64>)
 8002716:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800272a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f008 fe1f 	bl	800b388 <HAL_I2C_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40005400 	.word	0x40005400
 8002764:	00061a80 	.word	0x00061a80

08002768 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002770:	4b26      	ldr	r3, [pc, #152]	@ (800280c <I2C1_MspInit+0xa4>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4a25      	ldr	r2, [pc, #148]	@ (800280c <I2C1_MspInit+0xa4>)
 8002776:	f043 0302 	orr.w	r3, r3, #2
 800277a:	61d3      	str	r3, [r2, #28]
 800277c:	4b23      	ldr	r3, [pc, #140]	@ (800280c <I2C1_MspInit+0xa4>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800278c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800278e:	2312      	movs	r3, #18
 8002790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800279a:	2304      	movs	r3, #4
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	481a      	ldr	r0, [pc, #104]	@ (8002810 <I2C1_MspInit+0xa8>)
 80027a6:	f008 fb57 	bl	800ae58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80027aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b0:	2312      	movs	r3, #18
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80027bc:	2304      	movs	r3, #4
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4812      	ldr	r0, [pc, #72]	@ (8002810 <I2C1_MspInit+0xa8>)
 80027c8:	f008 fb46 	bl	800ae58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <I2C1_MspInit+0xa4>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <I2C1_MspInit+0xa4>)
 80027d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d6:	6253      	str	r3, [r2, #36]	@ 0x24
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <I2C1_MspInit+0xa4>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	201f      	movs	r0, #31
 80027ea:	f008 faa2 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027ee:	201f      	movs	r0, #31
 80027f0:	f008 fabb 	bl	800ad6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2020      	movs	r0, #32
 80027fa:	f008 fa9a 	bl	800ad32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027fe:	2020      	movs	r0, #32
 8002800:	f008 fab3 	bl	800ad6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002804:	bf00      	nop
 8002806:	3728      	adds	r7, #40	@ 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	40020400 	.word	0x40020400

08002814 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <I2C1_MspDeInit+0x3c>)
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	4a0b      	ldr	r2, [pc, #44]	@ (8002850 <I2C1_MspDeInit+0x3c>)
 8002822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002826:	6253      	str	r3, [r2, #36]	@ 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800282c:	4809      	ldr	r0, [pc, #36]	@ (8002854 <I2C1_MspDeInit+0x40>)
 800282e:	f008 fca3 	bl	800b178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002832:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002836:	4807      	ldr	r0, [pc, #28]	@ (8002854 <I2C1_MspDeInit+0x40>)
 8002838:	f008 fc9e 	bl	800b178 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800283c:	201f      	movs	r0, #31
 800283e:	f008 faa2 	bl	800ad86 <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002842:	2020      	movs	r0, #32
 8002844:	f008 fa9f 	bl	800ad86 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	40020400 	.word	0x40020400

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <_kill>:

int _kill(int pid, int sig)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002870:	f00e fd06 	bl	8011280 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	2216      	movs	r2, #22
 8002878:	601a      	str	r2, [r3, #0]
  return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_exit>:

void _exit (int status)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffe7 	bl	8002866 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <_exit+0x12>

0800289c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00a      	b.n	80028c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ae:	f3af 8000 	nop.w
 80028b2:	4601      	mov	r1, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf0      	blt.n	80028ae <_read+0x12>
  }

  return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e009      	b.n	80028fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fb2d 	bl	8001f50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf1      	blt.n	80028e8 <_write+0x12>
  }
  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_close>:

int _close(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002934:	605a      	str	r2, [r3, #4]
  return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <_isatty>:

int _isatty(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	@ (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	@ (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f00e fc6e 	bl	8011280 <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20014000 	.word	0x20014000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	200006a0 	.word	0x200006a0
 80029d8:	200009d8 	.word	0x200009d8

080029dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e8:	f7ff fff8 	bl	80029dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ec:	480b      	ldr	r0, [pc, #44]	@ (8002a1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80029ee:	490c      	ldr	r1, [pc, #48]	@ (8002a20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80029f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a24 <LoopFillZerobss+0x16>)
  movs r3, #0
 80029f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f4:	e002      	b.n	80029fc <LoopCopyDataInit>

080029f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fa:	3304      	adds	r3, #4

080029fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a00:	d3f9      	bcc.n	80029f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a04:	4c09      	ldr	r4, [pc, #36]	@ (8002a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a08:	e001      	b.n	8002a0e <LoopFillZerobss>

08002a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a0c:	3204      	adds	r2, #4

08002a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a10:	d3fb      	bcc.n	8002a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a12:	f00e fc3b 	bl	801128c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a16:	f7fe ff7d 	bl	8001914 <main>
  bx lr
 8002a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002a24:	08014500 	.word	0x08014500
  ldr r2, =_sbss
 8002a28:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002a2c:	200009d8 	.word	0x200009d8

08002a30 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <COMP_ACQ_IRQHandler>
	...

08002a34 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e034      	b.n	8002ab6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7b1a      	ldrb	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac0 <HTS221_RegisterBusIO+0x8c>)
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HTS221_RegisterBusIO+0x90>)
 8002a8e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4798      	blx	r3
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	e002      	b.n	8002ab6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	080030fd 	.word	0x080030fd
 8002ac4:	0800315f 	.word	0x0800315f

08002ac8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d108      	bne.n	8002aec <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa9e 	bl	800301c <HTS221_Initialize>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e004      	b.n	8002af6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d111      	bne.n	8002b34 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f87e 	bl	8002c12 <HTS221_HUM_Disable>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b20:	e00d      	b.n	8002b3e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f95f 	bl	8002de6 <HTS221_TEMP_Disable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	e004      	b.n	8002b3e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3320      	adds	r3, #32
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc2a 	bl	80033b0 <hts221_device_id_get>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e000      	b.n	8002b6a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <HTS221_GetCapabilities+0x50>)
 8002ba0:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4a07      	ldr	r2, [pc, #28]	@ (8002bc4 <HTS221_GetCapabilities+0x50>)
 8002ba6:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	41480000 	.word	0x41480000

08002bc8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e015      	b.n	8002c0a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3320      	adds	r3, #32
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fbef 	bl	80033d2 <hts221_power_on_set>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	e004      	b.n	8002c0a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e015      	b.n	8002c54 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10b      	bne.n	8002c4a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3320      	adds	r3, #32
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fbca 	bl	80033d2 <hts221_power_on_set>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	e004      	b.n	8002c54 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f965 	bl	8002f38 <HTS221_GetOutputDataRate>
 8002c6e:	4603      	mov	r3, r0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f99b 	bl	8002fc0 <HTS221_SetOutputDataRate>
 8002c8a:	4603      	mov	r3, r0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3320      	adds	r3, #32
 8002ca2:	f107 020c 	add.w	r2, r7, #12
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fc5e 	bl	800356a <hts221_hum_adc_point_0_get>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb8:	e069      	b.n	8002d8e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 0220 	add.w	r2, r3, #32
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 fba8 	bl	800341e <hts221_hum_rh_point_0_get>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	e059      	b.n	8002d8e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 0220 	add.w	r2, r3, #32
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f000 fc5f 	bl	80035ac <hts221_hum_adc_point_1_get>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf8:	e049      	b.n	8002d8e <HTS221_HUM_GetHumidity+0xfa>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f103 0220 	add.w	r2, r3, #32
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	330c      	adds	r3, #12
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 fba8 	bl	800345e <hts221_hum_rh_point_1_get>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	e039      	b.n	8002d8e <HTS221_HUM_GetHumidity+0xfa>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3320      	adds	r3, #32
 8002d22:	f107 021c 	add.w	r2, r7, #28
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fafd 	bl	8003328 <hts221_humidity_raw_get>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
 8002d38:	e029      	b.n	8002d8e <HTS221_HUM_GetHumidity+0xfa>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002d3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd ffc4 	bl	8000ccc <__aeabi_i2f>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f991 	bl	8003074 <Linear_Interpolation>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe f9a5 	bl	80010b0 <__aeabi_fcmplt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HTS221_HUM_GetHumidity+0xe0>
  {
    *Value = 0.0f;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <HTS221_HUM_GetHumidity+0x104>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f9b6 	bl	80010ec <__aeabi_fcmpgt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HTS221_HUM_GetHumidity+0xf8>
  {
    *Value = 100.0f;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	4a03      	ldr	r2, [pc, #12]	@ (8002d98 <HTS221_HUM_GetHumidity+0x104>)
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	42c80000 	.word	0x42c80000

08002d9c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e015      	b.n	8002dde <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3320      	adds	r3, #32
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fb05 	bl	80033d2 <hts221_power_on_set>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e004      	b.n	8002dde <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e015      	b.n	8002e28 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3320      	adds	r3, #32
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fae0 	bl	80033d2 <hts221_power_on_set>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002e18:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1c:	e004      	b.n	8002e28 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f87b 	bl	8002f38 <HTS221_GetOutputDataRate>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002e56:	6839      	ldr	r1, [r7, #0]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8b1 	bl	8002fc0 <HTS221_SetOutputDataRate>
 8002e5e:	4603      	mov	r3, r0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3320      	adds	r3, #32
 8002e76:	f107 020c 	add.w	r2, r7, #12
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fbb6 	bl	80035ee <hts221_temp_adc_point_0_get>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8c:	e04f      	b.n	8002f2e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f103 0220 	add.w	r2, r3, #32
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	3304      	adds	r3, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f000 fafe 	bl	800349e <hts221_temp_deg_point_0_get>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	e03f      	b.n	8002f2e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f103 0220 	add.w	r2, r3, #32
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	3308      	adds	r3, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f000 fbb7 	bl	8003630 <hts221_temp_adc_point_1_get>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	e02f      	b.n	8002f2e <HTS221_TEMP_GetTemperature+0xc6>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f103 0220 	add.w	r2, r3, #32
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	330c      	adds	r3, #12
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f000 fb11 	bl	8003504 <hts221_temp_deg_point_1_get>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eec:	e01f      	b.n	8002f2e <HTS221_TEMP_GetTemperature+0xc6>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8002eee:	2300      	movs	r3, #0
 8002ef0:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3320      	adds	r3, #32
 8002ef6:	f107 021c 	add.w	r2, r7, #28
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa35 	bl	800336c <hts221_temperature_raw_get>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0c:	e00f      	b.n	8002f2e <HTS221_TEMP_GetTemperature+0xc6>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002f0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd feda 	bl	8000ccc <__aeabi_i2f>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f8a7 	bl	8003074 <Linear_Interpolation>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3320      	adds	r3, #32
 8002f4a:	f107 020b 	add.w	r2, r7, #11
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f98b 	bl	800326c <hts221_data_rate_get>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e025      	b.n	8002fae <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d81d      	bhi.n	8002fa4 <HTS221_GetOutputDataRate+0x6c>
 8002f68:	a201      	add	r2, pc, #4	@ (adr r2, 8002f70 <HTS221_GetOutputDataRate+0x38>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f8b 	.word	0x08002f8b
 8002f78:	08002f95 	.word	0x08002f95
 8002f7c:	08002f9d 	.word	0x08002f9d
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
      break;
 8002f88:	e010      	b.n	8002fac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f90:	601a      	str	r2, [r3, #0]
      break;
 8002f92:	e00b      	b.n	8002fac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4a08      	ldr	r2, [pc, #32]	@ (8002fb8 <HTS221_GetOutputDataRate+0x80>)
 8002f98:	601a      	str	r2, [r3, #0]
      break;
 8002f9a:	e007      	b.n	8002fac <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HTS221_GetOutputDataRate+0x84>)
 8002fa0:	601a      	str	r2, [r3, #0]
      break;
 8002fa2:	e003      	b.n	8002fac <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	60fb      	str	r3, [r7, #12]
      break;
 8002faa:	bf00      	nop
  }

  return ret;
 8002fac:	68fb      	ldr	r3, [r7, #12]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40e00000 	.word	0x40e00000
 8002fbc:	41480000 	.word	0x41480000

08002fc0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002fca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f7fe f878 	bl	80010c4 <__aeabi_fcmple>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HTS221_SetOutputDataRate+0x1e>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e009      	b.n	8002ff2 <HTS221_SetOutputDataRate+0x32>
 8002fde:	490e      	ldr	r1, [pc, #56]	@ (8003018 <HTS221_SetOutputDataRate+0x58>)
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f7fe f86f 	bl	80010c4 <__aeabi_fcmple>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HTS221_SetOutputDataRate+0x30>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e000      	b.n	8002ff2 <HTS221_SetOutputDataRate+0x32>
 8002ff0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002ff2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3320      	adds	r3, #32
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f90f 	bl	8003220 <hts221_data_rate_set>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HTS221_SetOutputDataRate+0x4e>
  {
    return HTS221_ERROR;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	e000      	b.n	8003010 <HTS221_SetOutputDataRate+0x50>
  }

  return HTS221_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40e00000 	.word	0x40e00000

0800301c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f9d1 	bl	80033d2 <hts221_power_on_set>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	e017      	b.n	800306c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3320      	adds	r3, #32
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f94a 	bl	80032dc <hts221_block_data_update_set>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e00b      	b.n	800306c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003054:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ffb1 	bl	8002fc0 <HTS221_SetOutputDataRate>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	e000      	b.n	800306c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003074:	b5b0      	push	{r4, r5, r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7fd fd69 	bl	8000b60 <__aeabi_fsub>
 800308e:	4603      	mov	r3, r0
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fe6e 	bl	8000d74 <__aeabi_fmul>
 8003098:	4603      	mov	r3, r0
 800309a:	461c      	mov	r4, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f7fd fe64 	bl	8000d74 <__aeabi_fmul>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461d      	mov	r5, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7fd fe5a 	bl	8000d74 <__aeabi_fmul>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4619      	mov	r1, r3
 80030c4:	4628      	mov	r0, r5
 80030c6:	f7fd fd4b 	bl	8000b60 <__aeabi_fsub>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4619      	mov	r1, r3
 80030ce:	4620      	mov	r0, r4
 80030d0:	f7fd fd48 	bl	8000b64 <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461c      	mov	r4, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7fd fd3c 	bl	8000b60 <__aeabi_fsub>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4619      	mov	r1, r3
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fd fef5 	bl	8000edc <__aeabi_fdiv>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bdb0      	pop	{r4, r5, r7, pc}

080030fc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	461a      	mov	r2, r3
 8003108:	460b      	mov	r3, r1
 800310a:	72fb      	strb	r3, [r7, #11]
 800310c:	4613      	mov	r3, r2
 800310e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10e      	bne.n	800313a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	695c      	ldr	r4, [r3, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	47a0      	blx	r4
 8003136:	4603      	mov	r3, r0
 8003138:	e00d      	b.n	8003156 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	695c      	ldr	r4, [r3, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	7b1b      	ldrb	r3, [r3, #12]
 8003142:	4618      	mov	r0, r3
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	893b      	ldrh	r3, [r7, #8]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	47a0      	blx	r4
 8003154:	4603      	mov	r3, r0
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}

0800315e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	461a      	mov	r2, r3
 800316a:	460b      	mov	r3, r1
 800316c:	72fb      	strb	r3, [r7, #11]
 800316e:	4613      	mov	r3, r2
 8003170:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	691c      	ldr	r4, [r3, #16]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	7b1b      	ldrb	r3, [r3, #12]
 8003186:	4618      	mov	r0, r3
 8003188:	7afb      	ldrb	r3, [r7, #11]
 800318a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	47a0      	blx	r4
 8003198:	4603      	mov	r3, r0
 800319a:	e00d      	b.n	80031b8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	691c      	ldr	r4, [r3, #16]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
 80031a4:	4618      	mov	r0, r3
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	4619      	mov	r1, r3
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	47a0      	blx	r4
 80031b6:	4603      	mov	r3, r0
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}

080031c0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	460b      	mov	r3, r1
 80031ce:	72fb      	strb	r3, [r7, #11]
 80031d0:	4613      	mov	r3, r2
 80031d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685c      	ldr	r4, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68d8      	ldr	r0, [r3, #12]
 80031dc:	893b      	ldrh	r3, [r7, #8]
 80031de:	7af9      	ldrb	r1, [r7, #11]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	47a0      	blx	r4
 80031e4:	6178      	str	r0, [r7, #20]

  return ret;
 80031e6:	697b      	ldr	r3, [r7, #20]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}

080031f0 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	460b      	mov	r3, r1
 80031fe:	72fb      	strb	r3, [r7, #11]
 8003200:	4613      	mov	r3, r2
 8003202:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681c      	ldr	r4, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68d8      	ldr	r0, [r3, #12]
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	7af9      	ldrb	r1, [r7, #11]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	47a0      	blx	r4
 8003214:	6178      	str	r0, [r7, #20]

  return ret;
 8003216:	697b      	ldr	r3, [r7, #20]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800322c:	f107 0208 	add.w	r2, r7, #8
 8003230:	2301      	movs	r3, #1
 8003232:	2120      	movs	r1, #32
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffc3 	bl	80031c0 <hts221_read_reg>
 800323a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10f      	bne.n	8003262 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	b2da      	uxtb	r2, r3
 800324a:	7a3b      	ldrb	r3, [r7, #8]
 800324c:	f362 0301 	bfi	r3, r2, #0, #2
 8003250:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003252:	f107 0208 	add.w	r2, r7, #8
 8003256:	2301      	movs	r3, #1
 8003258:	2120      	movs	r1, #32
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffc8 	bl	80031f0 <hts221_write_reg>
 8003260:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003262:	68fb      	ldr	r3, [r7, #12]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003276:	f107 0208 	add.w	r2, r7, #8
 800327a:	2301      	movs	r3, #1
 800327c:	2120      	movs	r1, #32
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff9e 	bl	80031c0 <hts221_read_reg>
 8003284:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003286:	7a3b      	ldrb	r3, [r7, #8]
 8003288:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d81a      	bhi.n	80032c8 <hts221_data_rate_get+0x5c>
 8003292:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <hts221_data_rate_get+0x2c>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b1 	.word	0x080032b1
 80032a0:	080032b9 	.word	0x080032b9
 80032a4:	080032c1 	.word	0x080032c1
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
      break;
 80032ae:	e00f      	b.n	80032d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
      break;
 80032b6:	e00b      	b.n	80032d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
      break;
 80032be:	e007      	b.n	80032d0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2203      	movs	r2, #3
 80032c4:	701a      	strb	r2, [r3, #0]
      break;
 80032c6:	e003      	b.n	80032d0 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2204      	movs	r2, #4
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	bf00      	nop
  }

  return ret;
 80032d0:	68fb      	ldr	r3, [r7, #12]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop

080032dc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80032e8:	f107 0208 	add.w	r2, r7, #8
 80032ec:	2301      	movs	r3, #1
 80032ee:	2120      	movs	r1, #32
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff65 	bl	80031c0 <hts221_read_reg>
 80032f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	b2da      	uxtb	r2, r3
 8003306:	7a3b      	ldrb	r3, [r7, #8]
 8003308:	f362 0382 	bfi	r3, r2, #2, #1
 800330c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800330e:	f107 0208 	add.w	r2, r7, #8
 8003312:	2301      	movs	r3, #1
 8003314:	2120      	movs	r1, #32
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ff6a 	bl	80031f0 <hts221_write_reg>
 800331c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003332:	f107 0208 	add.w	r2, r7, #8
 8003336:	2302      	movs	r3, #2
 8003338:	2128      	movs	r1, #40	@ 0x28
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ff40 	bl	80031c0 <hts221_read_reg>
 8003340:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003342:	7a7b      	ldrb	r3, [r7, #9]
 8003344:	b21a      	sxth	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	b29b      	uxth	r3, r3
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b29b      	uxth	r3, r3
 8003356:	7a3a      	ldrb	r2, [r7, #8]
 8003358:	4413      	add	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	b21a      	sxth	r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	801a      	strh	r2, [r3, #0]

  return ret;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003376:	f107 0208 	add.w	r2, r7, #8
 800337a:	2302      	movs	r3, #2
 800337c:	212a      	movs	r1, #42	@ 0x2a
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff1e 	bl	80031c0 <hts221_read_reg>
 8003384:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003386:	7a7b      	ldrb	r3, [r7, #9]
 8003388:	b21a      	sxth	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003394:	b29b      	uxth	r3, r3
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b29b      	uxth	r3, r3
 800339a:	7a3a      	ldrb	r2, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	801a      	strh	r2, [r3, #0]

  return ret;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80033ba:	2301      	movs	r3, #1
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	210f      	movs	r1, #15
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fefd 	bl	80031c0 <hts221_read_reg>
 80033c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80033de:	f107 0208 	add.w	r2, r7, #8
 80033e2:	2301      	movs	r3, #1
 80033e4:	2120      	movs	r1, #32
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff feea 	bl	80031c0 <hts221_read_reg>
 80033ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10f      	bne.n	8003414 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	7a3b      	ldrb	r3, [r7, #8]
 80033fe:	f362 13c7 	bfi	r3, r2, #7, #1
 8003402:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003404:	f107 0208 	add.w	r2, r7, #8
 8003408:	2301      	movs	r3, #1
 800340a:	2120      	movs	r1, #32
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff feef 	bl	80031f0 <hts221_write_reg>
 8003412:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003414:	68fb      	ldr	r3, [r7, #12]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003428:	f107 020b 	add.w	r2, r7, #11
 800342c:	2301      	movs	r3, #1
 800342e:	2130      	movs	r1, #48	@ 0x30
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fec5 	bl	80031c0 <hts221_read_reg>
 8003436:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003438:	7afb      	ldrb	r3, [r7, #11]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fc46 	bl	8000ccc <__aeabi_i2f>
 8003440:	4603      	mov	r3, r0
 8003442:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fd48 	bl	8000edc <__aeabi_fdiv>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	601a      	str	r2, [r3, #0]

  return ret;
 8003454:	68fb      	ldr	r3, [r7, #12]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003468:	f107 020b 	add.w	r2, r7, #11
 800346c:	2301      	movs	r3, #1
 800346e:	2131      	movs	r1, #49	@ 0x31
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff fea5 	bl	80031c0 <hts221_read_reg>
 8003476:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fc26 	bl	8000ccc <__aeabi_i2f>
 8003480:	4603      	mov	r3, r0
 8003482:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fd28 	bl	8000edc <__aeabi_fdiv>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	601a      	str	r2, [r3, #0]

  return ret;
 8003494:	68fb      	ldr	r3, [r7, #12]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80034a8:	f107 020f 	add.w	r2, r7, #15
 80034ac:	2301      	movs	r3, #1
 80034ae:	2132      	movs	r1, #50	@ 0x32
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fe85 	bl	80031c0 <hts221_read_reg>
 80034b6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d11d      	bne.n	80034fa <hts221_temp_deg_point_0_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80034be:	f107 0210 	add.w	r2, r7, #16
 80034c2:	2301      	movs	r3, #1
 80034c4:	2135      	movs	r1, #53	@ 0x35
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fe7a 	bl	80031c0 <hts221_read_reg>
 80034cc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80034ce:	7c3b      	ldrb	r3, [r7, #16]
 80034d0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	4413      	add	r3, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fbf3 	bl	8000ccc <__aeabi_i2f>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fcf5 	bl	8000edc <__aeabi_fdiv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80034fa:	697b      	ldr	r3, [r7, #20]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800350e:	f107 020f 	add.w	r2, r7, #15
 8003512:	2301      	movs	r3, #1
 8003514:	2133      	movs	r1, #51	@ 0x33
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe52 	bl	80031c0 <hts221_read_reg>
 800351c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11d      	bne.n	8003560 <hts221_temp_deg_point_1_get+0x5c>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003524:	f107 0210 	add.w	r2, r7, #16
 8003528:	2301      	movs	r3, #1
 800352a:	2135      	movs	r1, #53	@ 0x35
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fe47 	bl	80031c0 <hts221_read_reg>
 8003532:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003534:	7c3b      	ldrb	r3, [r7, #16]
 8003536:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800353a:	b2db      	uxtb	r3, r3
 800353c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	4413      	add	r3, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f7fd fbc0 	bl	8000ccc <__aeabi_i2f>
 800354c:	4603      	mov	r3, r0
 800354e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fcc2 	bl	8000edc <__aeabi_fdiv>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003560:	697b      	ldr	r3, [r7, #20]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003574:	f107 0208 	add.w	r2, r7, #8
 8003578:	2302      	movs	r3, #2
 800357a:	2136      	movs	r1, #54	@ 0x36
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fe1f 	bl	80031c0 <hts221_read_reg>
 8003582:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003584:	7a7b      	ldrb	r3, [r7, #9]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	b29b      	uxth	r3, r3
 800358a:	7a3a      	ldrb	r2, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fb98 	bl	8000ccc <__aeabi_i2f>
 800359c:	4602      	mov	r2, r0
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	601a      	str	r2, [r3, #0]

  return ret;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80035b6:	f107 0208 	add.w	r2, r7, #8
 80035ba:	2302      	movs	r3, #2
 80035bc:	213a      	movs	r1, #58	@ 0x3a
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fdfe 	bl	80031c0 <hts221_read_reg>
 80035c4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80035c6:	7a7b      	ldrb	r3, [r7, #9]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	7a3a      	ldrb	r2, [r7, #8]
 80035ce:	4413      	add	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80035d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fd fb77 	bl	8000ccc <__aeabi_i2f>
 80035de:	4602      	mov	r2, r0
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	601a      	str	r2, [r3, #0]

  return ret;
 80035e4:	68fb      	ldr	r3, [r7, #12]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 80035f8:	f107 0208 	add.w	r2, r7, #8
 80035fc:	2302      	movs	r3, #2
 80035fe:	213c      	movs	r1, #60	@ 0x3c
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fddd 	bl	80031c0 <hts221_read_reg>
 8003606:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003608:	7a7b      	ldrb	r3, [r7, #9]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	b29b      	uxth	r3, r3
 800360e:	7a3a      	ldrb	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003616:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fb56 	bl	8000ccc <__aeabi_i2f>
 8003620:	4602      	mov	r2, r0
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	601a      	str	r2, [r3, #0]

  return ret;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800363a:	f107 0208 	add.w	r2, r7, #8
 800363e:	2302      	movs	r3, #2
 8003640:	213e      	movs	r1, #62	@ 0x3e
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fdbc 	bl	80031c0 <hts221_read_reg>
 8003648:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800364a:	7a7b      	ldrb	r3, [r7, #9]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	7a3a      	ldrb	r2, [r7, #8]
 8003652:	4413      	add	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003658:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fb35 	bl	8000ccc <__aeabi_i2f>
 8003662:	4602      	mov	r2, r0
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	601a      	str	r2, [r3, #0]

  return ret;
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e051      	b.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	7b1a      	ldrb	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <LIS2DW12_RegisterBusIO+0xcc>)
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <LIS2DW12_RegisterBusIO+0xd0>)
 80036d2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e020      	b.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4798      	blx	r3
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e016      	b.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d112      	bne.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10d      	bne.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003718:	2305      	movs	r3, #5
 800371a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800371c:	7afb      	ldrb	r3, [r7, #11]
 800371e:	461a      	mov	r2, r3
 8003720:	2121      	movs	r1, #33	@ 0x21
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fcbf 	bl	80040a6 <LIS2DW12_Write_Reg>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003734:	68fb      	ldr	r3, [r7, #12]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	080043cd 	.word	0x080043cd
 8003744:	08004403 	.word	0x08004403

08003748 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3320      	adds	r3, #32
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f993 	bl	8004a82 <lis2dw12_auto_increment_set>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	e04b      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3320      	adds	r3, #32
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f8aa 	bl	80048c8 <lis2dw12_block_data_update_set>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	e03f      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3320      	adds	r3, #32
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f001 f9a1 	bl	8004ace <lis2dw12_fifo_mode_set>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e033      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3320      	adds	r3, #32
 800379c:	2104      	movs	r1, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fe7a 	bl	8004498 <lis2dw12_power_mode_set>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e027      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <LIS2DW12_Init+0xc0>)
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3320      	adds	r3, #32
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 ff6b 	bl	80046a8 <lis2dw12_data_rate_set>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	e010      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3320      	adds	r3, #32
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 f895 	bl	8004914 <lis2dw12_full_scale_set>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295
 80037f4:	e004      	b.n	8003800 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	42c80000 	.word	0x42c80000

0800380c <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f884 	bl	8003922 <LIS2DW12_ACC_Disable>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	e010      	b.n	8003848 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3320      	adds	r3, #32
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f001 f8fd 	bl	8004a60 <lis2dw12_device_id_get>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e000      	b.n	8003874 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2210      	movs	r2, #16
 80038a8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4a06      	ldr	r2, [pc, #24]	@ (80038d4 <LIS2DW12_GetCapabilities+0x58>)
 80038bc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	44c80000 	.word	0x44c80000

080038d8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e015      	b.n	800391a <LIS2DW12_ACC_Enable+0x42>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fbec 	bl	80040dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <LIS2DW12_ACC_Enable+0x38>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	e004      	b.n	800391a <LIS2DW12_ACC_Enable+0x42>
  }

  pObj->acc_is_enabled = 1;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e010      	b.n	800395a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3320      	adds	r3, #32
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 feb2 	bl	80046a8 <lis2dw12_data_rate_set>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
 800394e:	e004      	b.n	800395a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	f107 020b 	add.w	r2, r7, #11
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 ffef 	bl	8004960 <lis2dw12_full_scale_get>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e080      	b.n	8003a90 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3320      	adds	r3, #32
 8003992:	f107 020a 	add.w	r2, r7, #10
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fdcb 	bl	8004534 <lis2dw12_power_mode_get>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	e072      	b.n	8003a90 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 80039aa:	7abb      	ldrb	r3, [r7, #10]
 80039ac:	2b1b      	cmp	r3, #27
 80039ae:	bf8c      	ite	hi
 80039b0:	2201      	movhi	r2, #1
 80039b2:	2200      	movls	r2, #0
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	2a00      	cmp	r2, #0
 80039b8:	d162      	bne.n	8003a80 <LIS2DW12_ACC_GetSensitivity+0x11c>
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 80039c2:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d12f      	bne.n	8003a34 <LIS2DW12_ACC_GetSensitivity+0xd0>
 80039d4:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d04c      	beq.n	8003a80 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d81b      	bhi.n	8003a24 <LIS2DW12_ACC_GetSensitivity+0xc0>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <LIS2DW12_ACC_GetSensitivity+0x90>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a0d 	.word	0x08003a0d
 80039fc:	08003a15 	.word	0x08003a15
 8003a00:	08003a1d 	.word	0x08003a1d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4a24      	ldr	r2, [pc, #144]	@ (8003a98 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003a08:	601a      	str	r2, [r3, #0]
          break;
 8003a0a:	e012      	b.n	8003a32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4a23      	ldr	r2, [pc, #140]	@ (8003a9c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003a10:	601a      	str	r2, [r3, #0]
          break;
 8003a12:	e00e      	b.n	8003a32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4a22      	ldr	r2, [pc, #136]	@ (8003aa0 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003a18:	601a      	str	r2, [r3, #0]
          break;
 8003a1a:	e00a      	b.n	8003a32 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4a21      	ldr	r2, [pc, #132]	@ (8003aa4 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003a20:	601a      	str	r2, [r3, #0]
          break;
 8003a22:	e006      	b.n	8003a32 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4a20      	ldr	r2, [pc, #128]	@ (8003aa8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003a28:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	60fb      	str	r3, [r7, #12]
          break;
 8003a30:	bf00      	nop
      }
      break;
 8003a32:	e02c      	b.n	8003a8e <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d81a      	bhi.n	8003a70 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a61 	.word	0x08003a61
 8003a4c:	08003a69 	.word	0x08003a69
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4a16      	ldr	r2, [pc, #88]	@ (8003aac <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003a54:	601a      	str	r2, [r3, #0]
          break;
 8003a56:	e012      	b.n	8003a7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	@ (8003ab0 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003a5c:	601a      	str	r2, [r3, #0]
          break;
 8003a5e:	e00e      	b.n	8003a7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4a0d      	ldr	r2, [pc, #52]	@ (8003a98 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003a64:	601a      	str	r2, [r3, #0]
          break;
 8003a66:	e00a      	b.n	8003a7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a9c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003a6c:	601a      	str	r2, [r3, #0]
          break;
 8003a6e:	e006      	b.n	8003a7e <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003a74:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	60fb      	str	r3, [r7, #12]
          break;
 8003a7c:	bf00      	nop
      }
      break;
 8003a7e:	e006      	b.n	8003a8e <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003a84:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	60fb      	str	r3, [r7, #12]
      break;
 8003a8c:	bf00      	nop
  }

  return ret;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	3f79db23 	.word	0x3f79db23
 8003a9c:	3ff9db23 	.word	0x3ff9db23
 8003aa0:	4079db23 	.word	0x4079db23
 8003aa4:	40f9db23 	.word	0x40f9db23
 8003aa8:	bf800000 	.word	0xbf800000
 8003aac:	3e79db23 	.word	0x3e79db23
 8003ab0:	3ef9db23 	.word	0x3ef9db23

08003ab4 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3320      	adds	r3, #32
 8003ac6:	f107 020b 	add.w	r2, r7, #11
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fe31 	bl	8004734 <lis2dw12_data_rate_get>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	e14f      	b.n	8003d7e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3320      	adds	r3, #32
 8003ae2:	f107 020a 	add.w	r2, r7, #10
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fd23 	bl	8004534 <lis2dw12_power_mode_get>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	e141      	b.n	8003d7e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003afa:	7afb      	ldrb	r3, [r7, #11]
 8003afc:	2b32      	cmp	r3, #50	@ 0x32
 8003afe:	f200 8136 	bhi.w	8003d6e <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003bd5 	.word	0x08003bd5
 8003b0c:	08003bdf 	.word	0x08003bdf
 8003b10:	08003c39 	.word	0x08003c39
 8003b14:	08003c41 	.word	0x08003c41
 8003b18:	08003c49 	.word	0x08003c49
 8003b1c:	08003c51 	.word	0x08003c51
 8003b20:	08003c59 	.word	0x08003c59
 8003b24:	08003c61 	.word	0x08003c61
 8003b28:	08003cbb 	.word	0x08003cbb
 8003b2c:	08003d15 	.word	0x08003d15
 8003b30:	08003d6f 	.word	0x08003d6f
 8003b34:	08003d6f 	.word	0x08003d6f
 8003b38:	08003d6f 	.word	0x08003d6f
 8003b3c:	08003d6f 	.word	0x08003d6f
 8003b40:	08003d6f 	.word	0x08003d6f
 8003b44:	08003d6f 	.word	0x08003d6f
 8003b48:	08003d6f 	.word	0x08003d6f
 8003b4c:	08003d6f 	.word	0x08003d6f
 8003b50:	08003bd5 	.word	0x08003bd5
 8003b54:	08003d6f 	.word	0x08003d6f
 8003b58:	08003d6f 	.word	0x08003d6f
 8003b5c:	08003d6f 	.word	0x08003d6f
 8003b60:	08003d6f 	.word	0x08003d6f
 8003b64:	08003d6f 	.word	0x08003d6f
 8003b68:	08003d6f 	.word	0x08003d6f
 8003b6c:	08003d6f 	.word	0x08003d6f
 8003b70:	08003d6f 	.word	0x08003d6f
 8003b74:	08003d6f 	.word	0x08003d6f
 8003b78:	08003d6f 	.word	0x08003d6f
 8003b7c:	08003d6f 	.word	0x08003d6f
 8003b80:	08003d6f 	.word	0x08003d6f
 8003b84:	08003d6f 	.word	0x08003d6f
 8003b88:	08003d6f 	.word	0x08003d6f
 8003b8c:	08003d6f 	.word	0x08003d6f
 8003b90:	08003d6f 	.word	0x08003d6f
 8003b94:	08003d6f 	.word	0x08003d6f
 8003b98:	08003d6f 	.word	0x08003d6f
 8003b9c:	08003d6f 	.word	0x08003d6f
 8003ba0:	08003d6f 	.word	0x08003d6f
 8003ba4:	08003d6f 	.word	0x08003d6f
 8003ba8:	08003d6f 	.word	0x08003d6f
 8003bac:	08003d6f 	.word	0x08003d6f
 8003bb0:	08003d6f 	.word	0x08003d6f
 8003bb4:	08003d6f 	.word	0x08003d6f
 8003bb8:	08003d6f 	.word	0x08003d6f
 8003bbc:	08003d6f 	.word	0x08003d6f
 8003bc0:	08003d6f 	.word	0x08003d6f
 8003bc4:	08003d6f 	.word	0x08003d6f
 8003bc8:	08003d6f 	.word	0x08003d6f
 8003bcc:	08003d6f 	.word	0x08003d6f
 8003bd0:	08003bd5 	.word	0x08003bd5
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
      break;
 8003bdc:	e0ce      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003bde:	7abb      	ldrb	r3, [r7, #10]
 8003be0:	2b1b      	cmp	r3, #27
 8003be2:	bf8c      	ite	hi
 8003be4:	2201      	movhi	r2, #1
 8003be6:	2200      	movls	r2, #0
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	d11c      	bne.n	8003c28 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003bee:	2201      	movs	r2, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2201      	movne	r2, #1
 8003bfe:	2200      	moveq	r2, #0
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d10c      	bne.n	8003c20 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003c06:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d88 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003c1c:	601a      	str	r2, [r3, #0]
          break;
 8003c1e:	e00a      	b.n	8003c36 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4a5a      	ldr	r2, [pc, #360]	@ (8003d8c <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003c24:	601a      	str	r2, [r3, #0]
          break;
 8003c26:	e006      	b.n	8003c36 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4a59      	ldr	r2, [pc, #356]	@ (8003d90 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003c2c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	60fb      	str	r3, [r7, #12]
          break;
 8003c34:	bf00      	nop
      }
      break;
 8003c36:	e0a1      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4a53      	ldr	r2, [pc, #332]	@ (8003d88 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003c3c:	601a      	str	r2, [r3, #0]
      break;
 8003c3e:	e09d      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4a54      	ldr	r2, [pc, #336]	@ (8003d94 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003c44:	601a      	str	r2, [r3, #0]
      break;
 8003c46:	e099      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4a53      	ldr	r2, [pc, #332]	@ (8003d98 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003c4c:	601a      	str	r2, [r3, #0]
      break;
 8003c4e:	e095      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	4a52      	ldr	r2, [pc, #328]	@ (8003d9c <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003c54:	601a      	str	r2, [r3, #0]
      break;
 8003c56:	e091      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4a51      	ldr	r2, [pc, #324]	@ (8003da0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003c5c:	601a      	str	r2, [r3, #0]
      break;
 8003c5e:	e08d      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003c60:	7abb      	ldrb	r3, [r7, #10]
 8003c62:	2b1b      	cmp	r3, #27
 8003c64:	bf8c      	ite	hi
 8003c66:	2201      	movhi	r2, #1
 8003c68:	2200      	movls	r2, #0
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d11c      	bne.n	8003caa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003c70:	2201      	movs	r2, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	bf14      	ite	ne
 8003c7e:	2201      	movne	r2, #1
 8003c80:	2200      	moveq	r2, #0
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	d10c      	bne.n	8003ca2 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003c88:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	4a41      	ldr	r2, [pc, #260]	@ (8003da4 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003c9e:	601a      	str	r2, [r3, #0]
          break;
 8003ca0:	e00a      	b.n	8003cb8 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8003da0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003ca6:	601a      	str	r2, [r3, #0]
          break;
 8003ca8:	e006      	b.n	8003cb8 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4a38      	ldr	r2, [pc, #224]	@ (8003d90 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003cae:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	60fb      	str	r3, [r7, #12]
          break;
 8003cb6:	bf00      	nop
      }
      break;
 8003cb8:	e060      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003cba:	7abb      	ldrb	r3, [r7, #10]
 8003cbc:	2b1b      	cmp	r3, #27
 8003cbe:	bf8c      	ite	hi
 8003cc0:	2201      	movhi	r2, #1
 8003cc2:	2200      	movls	r2, #0
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	2a00      	cmp	r2, #0
 8003cc8:	d11c      	bne.n	8003d04 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003cca:	2201      	movs	r2, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2201      	movne	r2, #1
 8003cda:	2200      	moveq	r2, #0
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	2a00      	cmp	r2, #0
 8003ce0:	d10c      	bne.n	8003cfc <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003ce2:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003da8 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003cf8:	601a      	str	r2, [r3, #0]
          break;
 8003cfa:	e00a      	b.n	8003d12 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d00:	601a      	str	r2, [r3, #0]
          break;
 8003d02:	e006      	b.n	8003d12 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4a22      	ldr	r2, [pc, #136]	@ (8003d90 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d08:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	60fb      	str	r3, [r7, #12]
          break;
 8003d10:	bf00      	nop
      }
      break;
 8003d12:	e033      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003d14:	7abb      	ldrb	r3, [r7, #10]
 8003d16:	2b1b      	cmp	r3, #27
 8003d18:	bf8c      	ite	hi
 8003d1a:	2201      	movhi	r2, #1
 8003d1c:	2200      	movls	r2, #0
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d11c      	bne.n	8003d5e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003d24:	2201      	movs	r2, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003d2e:	2a00      	cmp	r2, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2201      	movne	r2, #1
 8003d34:	2200      	moveq	r2, #0
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	2a00      	cmp	r2, #0
 8003d3a:	d10c      	bne.n	8003d56 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003d3c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bf14      	ite	ne
 8003d44:	2301      	movne	r3, #1
 8003d46:	2300      	moveq	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8003d52:	601a      	str	r2, [r3, #0]
          break;
 8003d54:	e00a      	b.n	8003d6c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	4a11      	ldr	r2, [pc, #68]	@ (8003da0 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d5a:	601a      	str	r2, [r3, #0]
          break;
 8003d5c:	e006      	b.n	8003d6c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4a0b      	ldr	r2, [pc, #44]	@ (8003d90 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d62:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	60fb      	str	r3, [r7, #12]
          break;
 8003d6a:	bf00      	nop
      }
      break;
 8003d6c:	e006      	b.n	8003d7c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d72:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	60fb      	str	r3, [r7, #12]
      break;
 8003d7a:	bf00      	nop
  }

  return ret;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	41480000 	.word	0x41480000
 8003d8c:	3fcccccd 	.word	0x3fcccccd
 8003d90:	bf800000 	.word	0xbf800000
 8003d94:	41c80000 	.word	0x41c80000
 8003d98:	42480000 	.word	0x42480000
 8003d9c:	42c80000 	.word	0x42c80000
 8003da0:	43480000 	.word	0x43480000
 8003da4:	43c80000 	.word	0x43c80000
 8003da8:	44480000 	.word	0x44480000
 8003dac:	44c80000 	.word	0x44c80000

08003db0 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f805 	bl	8003dd0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003dc6:	4603      	mov	r3, r0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	460b      	mov	r3, r1
 8003de0:	71fb      	strb	r3, [r7, #7]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d107      	bne.n	8003e00 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x30>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003df0:	79bb      	ldrb	r3, [r7, #6]
 8003df2:	79fa      	ldrb	r2, [r7, #7]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f970 	bl	80040dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	e006      	b.n	8003e0e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x3e>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003e00:	79bb      	ldrb	r3, [r7, #6]
 8003e02:	79fa      	ldrb	r2, [r7, #7]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fa6a 	bl	80042e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003e0c:	4603      	mov	r3, r0
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3320      	adds	r3, #32
 8003e2a:	f107 020b 	add.w	r2, r7, #11
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fd95 	bl	8004960 <lis2dw12_full_scale_get>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e027      	b.n	8003e92 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d81b      	bhi.n	8003e80 <LIS2DW12_ACC_GetFullScale+0x68>
 8003e48:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e79 	.word	0x08003e79
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2202      	movs	r2, #2
 8003e64:	601a      	str	r2, [r3, #0]
      break;
 8003e66:	e013      	b.n	8003e90 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	601a      	str	r2, [r3, #0]
      break;
 8003e6e:	e00f      	b.n	8003e90 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2208      	movs	r2, #8
 8003e74:	601a      	str	r2, [r3, #0]
      break;
 8003e76:	e00b      	b.n	8003e90 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2210      	movs	r2, #16
 8003e7c:	601a      	str	r2, [r3, #0]
      break;
 8003e7e:	e007      	b.n	8003e90 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	60fb      	str	r3, [r7, #12]
      break;
 8003e8e:	bf00      	nop
  }

  return ret;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop

08003e9c <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	dd0b      	ble.n	8003ec4 <LIS2DW12_ACC_SetFullScale+0x28>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	dd06      	ble.n	8003ec0 <LIS2DW12_ACC_SetFullScale+0x24>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	dc01      	bgt.n	8003ebc <LIS2DW12_ACC_SetFullScale+0x20>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e004      	b.n	8003ec6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e002      	b.n	8003ec6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003ec4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003ec6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3320      	adds	r3, #32
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fd1f 	bl	8004914 <lis2dw12_full_scale_set>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	e000      	b.n	8003ee4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3320      	adds	r3, #32
 8003efe:	f107 020b 	add.w	r2, r7, #11
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fb15 	bl	8004534 <lis2dw12_power_mode_get>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	e068      	b.n	8003fe8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3320      	adds	r3, #32
 8003f1a:	f107 020c 	add.w	r2, r7, #12
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fd55 	bl	80049d0 <lis2dw12_acceleration_raw_get>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	e05a      	b.n	8003fe8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	2b1b      	cmp	r3, #27
 8003f36:	bf8c      	ite	hi
 8003f38:	2201      	movhi	r2, #1
 8003f3a:	2200      	movls	r2, #0
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	d14d      	bne.n	8003fde <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003f42:	2201      	movs	r2, #1
 8003f44:	409a      	lsls	r2, r3
 8003f46:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003f4a:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d124      	bne.n	8003fa6 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8003f5c:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d037      	beq.n	8003fde <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003f6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da00      	bge.n	8003f78 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8003f76:	330f      	adds	r3, #15
 8003f78:	111b      	asrs	r3, r3, #4
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da00      	bge.n	8003f8a <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8003f88:	330f      	adds	r3, #15
 8003f8a:	111b      	asrs	r3, r3, #4
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003f92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	da00      	bge.n	8003f9c <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8003f9a:	330f      	adds	r3, #15
 8003f9c:	111b      	asrs	r3, r3, #4
 8003f9e:	b21a      	sxth	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	809a      	strh	r2, [r3, #4]
      break;
 8003fa4:	e01f      	b.n	8003fe6 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003fa6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da00      	bge.n	8003fb0 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8003fae:	3303      	adds	r3, #3
 8003fb0:	109b      	asrs	r3, r3, #2
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003fb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da00      	bge.n	8003fc2 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	109b      	asrs	r3, r3, #2
 8003fc4:	b21a      	sxth	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003fca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da00      	bge.n	8003fd4 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 8003fd2:	3303      	adds	r3, #3
 8003fd4:	109b      	asrs	r3, r3, #2
 8003fd6:	b21a      	sxth	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	809a      	strh	r2, [r3, #4]
      break;
 8003fdc:	e003      	b.n	8003fe6 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe2:	617b      	str	r3, [r7, #20]
      break;
 8003fe4:	bf00      	nop
  }

  return ret;
 8003fe6:	697b      	ldr	r3, [r7, #20]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004000:	f107 0310 	add.w	r3, r7, #16
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff70 	bl	8003eec <LIS2DW12_ACC_GetAxesRaw>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	e042      	b.n	800409e <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fca0 	bl	8003964 <LIS2DW12_ACC_GetSensitivity>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295
 800402e:	e036      	b.n	800409e <LIS2DW12_ACC_GetAxes+0xae>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004030:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fe49 	bl	8000ccc <__aeabi_i2f>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fc fe97 	bl	8000d74 <__aeabi_fmul>
 8004046:	4603      	mov	r3, r0
 8004048:	4618      	mov	r0, r3
 800404a:	f7fd f859 	bl	8001100 <__aeabi_f2iz>
 800404e:	4602      	mov	r2, r0
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc fe37 	bl	8000ccc <__aeabi_i2f>
 800405e:	4602      	mov	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4619      	mov	r1, r3
 8004064:	4610      	mov	r0, r2
 8004066:	f7fc fe85 	bl	8000d74 <__aeabi_fmul>
 800406a:	4603      	mov	r3, r0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd f847 	bl	8001100 <__aeabi_f2iz>
 8004072:	4602      	mov	r2, r0
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004078:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fe25 	bl	8000ccc <__aeabi_i2f>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fc fe73 	bl	8000d74 <__aeabi_fmul>
 800408e:	4603      	mov	r3, r0
 8004090:	4618      	mov	r0, r3
 8004092:	f7fd f835 	bl	8001100 <__aeabi_f2iz>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 0020 	add.w	r0, r3, #32
 80040bc:	1cba      	adds	r2, r7, #2
 80040be:	78f9      	ldrb	r1, [r7, #3]
 80040c0:	2301      	movs	r3, #1
 80040c2:	f000 f9d1 	bl	8004468 <lis2dw12_write_reg>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	e000      	b.n	80040d4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	460b      	mov	r3, r1
 80040ec:	71fb      	strb	r3, [r7, #7]
 80040ee:	4613      	mov	r3, r2
 80040f0:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d80a      	bhi.n	8004110 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004139 	.word	0x08004139
 8004104:	08004161 	.word	0x08004161
 8004108:	08004189 	.word	0x08004189
 800410c:	080041b1 	.word	0x080041b1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004110:	79bb      	ldrb	r3, [r7, #6]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8004116:	2304      	movs	r3, #4
 8004118:	75fb      	strb	r3, [r7, #23]
          break;
 800411a:	e002      	b.n	8004122 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800411c:	2314      	movs	r3, #20
 800411e:	75fb      	strb	r3, [r7, #23]
          break;
 8004120:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8004122:	4967      	ldr	r1, [pc, #412]	@ (80042c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004124:	68b8      	ldr	r0, [r7, #8]
 8004126:	f7fc ffc3 	bl	80010b0 <__aeabi_fcmplt>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x56>
      {
        Odr = 12.5f;
      }
      break;
 8004130:	e052      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 12.5f;
 8004132:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 8004134:	60bb      	str	r3, [r7, #8]
      break;
 8004136:	e04f      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004138:	79bb      	ldrb	r3, [r7, #6]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x68>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800413e:	2303      	movs	r3, #3
 8004140:	75fb      	strb	r3, [r7, #23]
          break;
 8004142:	e002      	b.n	800414a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004144:	2313      	movs	r3, #19
 8004146:	75fb      	strb	r3, [r7, #23]
          break;
 8004148:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800414a:	495e      	ldr	r1, [pc, #376]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800414c:	68b8      	ldr	r0, [r7, #8]
 800414e:	f7fc ffcd 	bl	80010ec <__aeabi_fcmpgt>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d100      	bne.n	800415a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7e>
      {
        Odr = 200.0f;
      }
      break;
 8004158:	e03e      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 800415a:	4b5a      	ldr	r3, [pc, #360]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800415c:	60bb      	str	r3, [r7, #8]
      break;
 800415e:	e03b      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004160:	79bb      	ldrb	r3, [r7, #6]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8004166:	2302      	movs	r3, #2
 8004168:	75fb      	strb	r3, [r7, #23]
          break;
 800416a:	e002      	b.n	8004172 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x96>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800416c:	2312      	movs	r3, #18
 800416e:	75fb      	strb	r3, [r7, #23]
          break;
 8004170:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004172:	4954      	ldr	r1, [pc, #336]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004174:	68b8      	ldr	r0, [r7, #8]
 8004176:	f7fc ffb9 	bl	80010ec <__aeabi_fcmpgt>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d100      	bne.n	8004182 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa6>
      {
        Odr = 200.0f;
      }
      break;
 8004180:	e02a      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 8004182:	4b50      	ldr	r3, [pc, #320]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004184:	60bb      	str	r3, [r7, #8]
      break;
 8004186:	e027      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004188:	79bb      	ldrb	r3, [r7, #6]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d002      	beq.n	8004194 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb8>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800418e:	2301      	movs	r3, #1
 8004190:	75fb      	strb	r3, [r7, #23]
          break;
 8004192:	e002      	b.n	800419a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xbe>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004194:	2311      	movs	r3, #17
 8004196:	75fb      	strb	r3, [r7, #23]
          break;
 8004198:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800419a:	494a      	ldr	r1, [pc, #296]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 800419c:	68b8      	ldr	r0, [r7, #8]
 800419e:	f7fc ffa5 	bl	80010ec <__aeabi_fcmpgt>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d100      	bne.n	80041aa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xce>
      {
        Odr = 200.0f;
      }
      break;
 80041a8:	e016      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
        Odr = 200.0f;
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80041ac:	60bb      	str	r3, [r7, #8]
      break;
 80041ae:	e013      	b.n	80041d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfc>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d002      	beq.n	80041bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
          break;
 80041ba:	e002      	b.n	80041c2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xe6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80041bc:	2310      	movs	r3, #16
 80041be:	75fb      	strb	r3, [r7, #23]
          break;
 80041c0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041c2:	4940      	ldr	r1, [pc, #256]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80041c4:	68b8      	ldr	r0, [r7, #8]
 80041c6:	f7fc ff91 	bl	80010ec <__aeabi_fcmpgt>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d100      	bne.n	80041d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
      {
        Odr = 200.0f;
      }
      break;
 80041d0:	e001      	b.n	80041d6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xfa>
        Odr = 200.0f;
 80041d2:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 80041d4:	60bb      	str	r3, [r7, #8]
      break;
 80041d6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80041d8:	493b      	ldr	r1, [pc, #236]	@ (80042c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1ec>)
 80041da:	68b8      	ldr	r0, [r7, #8]
 80041dc:	f7fc ff72 	bl	80010c4 <__aeabi_fcmple>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80041ea:	4935      	ldr	r1, [pc, #212]	@ (80042c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e4>)
 80041ec:	68b8      	ldr	r0, [r7, #8]
 80041ee:	f7fc ff69 	bl	80010c4 <__aeabi_fcmple>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e036      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 80041fc:	4933      	ldr	r1, [pc, #204]	@ (80042cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f0>)
 80041fe:	68b8      	ldr	r0, [r7, #8]
 8004200:	f7fc ff60 	bl	80010c4 <__aeabi_fcmple>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x132>
 800420a:	2303      	movs	r3, #3
 800420c:	e02d      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 800420e:	4930      	ldr	r1, [pc, #192]	@ (80042d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f4>)
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f7fc ff57 	bl	80010c4 <__aeabi_fcmple>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x144>
 800421c:	2304      	movs	r3, #4
 800421e:	e024      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004220:	492c      	ldr	r1, [pc, #176]	@ (80042d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>)
 8004222:	68b8      	ldr	r0, [r7, #8]
 8004224:	f7fc ff4e 	bl	80010c4 <__aeabi_fcmple>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x156>
 800422e:	2305      	movs	r3, #5
 8004230:	e01b      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004232:	4924      	ldr	r1, [pc, #144]	@ (80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e8>)
 8004234:	68b8      	ldr	r0, [r7, #8]
 8004236:	f7fc ff45 	bl	80010c4 <__aeabi_fcmple>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004240:	2306      	movs	r3, #6
 8004242:	e012      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004244:	4924      	ldr	r1, [pc, #144]	@ (80042d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fc>)
 8004246:	68b8      	ldr	r0, [r7, #8]
 8004248:	f7fc ff3c 	bl	80010c4 <__aeabi_fcmple>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17a>
 8004252:	2307      	movs	r3, #7
 8004254:	e009      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004256:	4921      	ldr	r1, [pc, #132]	@ (80042dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x200>)
 8004258:	68b8      	ldr	r0, [r7, #8]
 800425a:	f7fc ff33 	bl	80010c4 <__aeabi_fcmple>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18c>
 8004264:	2308      	movs	r3, #8
 8004266:	e000      	b.n	800426a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x18e>
 8004268:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800426a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3320      	adds	r3, #32
 8004270:	7dba      	ldrb	r2, [r7, #22]
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fa17 	bl	80046a8 <lis2dw12_data_rate_set>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
  {
    return LIS2DW12_ERROR;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	e018      	b.n	80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3320      	adds	r3, #32
 800428a:	7dfa      	ldrb	r2, [r7, #23]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f902 	bl	8004498 <lis2dw12_power_mode_set>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	e00b      	b.n	80042b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1dc>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	79fa      	ldrb	r2, [r7, #7]
 80042aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	79ba      	ldrb	r2, [r7, #6]
 80042b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	41480000 	.word	0x41480000
 80042c4:	43480000 	.word	0x43480000
 80042c8:	3fcccccd 	.word	0x3fcccccd
 80042cc:	41c80000 	.word	0x41c80000
 80042d0:	42480000 	.word	0x42480000
 80042d4:	42c80000 	.word	0x42c80000
 80042d8:	43c80000 	.word	0x43c80000
 80042dc:	44480000 	.word	0x44480000

080042e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4611      	mov	r1, r2
 80042ec:	461a      	mov	r2, r3
 80042ee:	460b      	mov	r3, r1
 80042f0:	71fb      	strb	r3, [r7, #7]
 80042f2:	4613      	mov	r3, r2
 80042f4:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	79fa      	ldrb	r2, [r7, #7]
 80042fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	79ba      	ldrb	r2, [r7, #6]
 8004302:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004306:	4928      	ldr	r1, [pc, #160]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8004308:	68b8      	ldr	r0, [r7, #8]
 800430a:	f7fc fedb 	bl	80010c4 <__aeabi_fcmple>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004314:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8004316:	e03f      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   25.0f) ?   25.0f
 8004318:	4924      	ldr	r1, [pc, #144]	@ (80043ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 800431a:	68b8      	ldr	r0, [r7, #8]
 800431c:	f7fc fed2 	bl	80010c4 <__aeabi_fcmple>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 8004326:	4b21      	ldr	r3, [pc, #132]	@ (80043ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8004328:	e036      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=   50.0f) ?   50.0f
 800432a:	4921      	ldr	r1, [pc, #132]	@ (80043b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 800432c:	68b8      	ldr	r0, [r7, #8]
 800432e:	f7fc fec9 	bl	80010c4 <__aeabi_fcmple>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5c>
 8004338:	4b1d      	ldr	r3, [pc, #116]	@ (80043b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 800433a:	e02d      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  100.0f) ?  100.0f
 800433c:	491d      	ldr	r1, [pc, #116]	@ (80043b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 800433e:	68b8      	ldr	r0, [r7, #8]
 8004340:	f7fc fec0 	bl	80010c4 <__aeabi_fcmple>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 800434a:	4b1a      	ldr	r3, [pc, #104]	@ (80043b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 800434c:	e024      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  200.0f) ?  200.0f
 800434e:	491a      	ldr	r1, [pc, #104]	@ (80043b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	f7fc feb7 	bl	80010c4 <__aeabi_fcmple>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x80>
 800435c:	4b16      	ldr	r3, [pc, #88]	@ (80043b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 800435e:	e01b      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  400.0f) ?  400.0f
 8004360:	4916      	ldr	r1, [pc, #88]	@ (80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f7fc feae 	bl	80010c4 <__aeabi_fcmple>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800436e:	4b13      	ldr	r3, [pc, #76]	@ (80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8004370:	e012      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  : (Odr <=  800.0f) ?  800.0f
 8004372:	4913      	ldr	r1, [pc, #76]	@ (80043c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8004374:	68b8      	ldr	r0, [r7, #8]
 8004376:	f7fc fea5 	bl	80010c4 <__aeabi_fcmple>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa4>
 8004380:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8004382:	e009      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
                  :                    1600.0f;
 8004384:	490f      	ldr	r1, [pc, #60]	@ (80043c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8004386:	68b8      	ldr	r0, [r7, #8]
 8004388:	f7fc fe9c 	bl	80010c4 <__aeabi_fcmple>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb6>
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 8004394:	e000      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xb8>
 8004396:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	3fcccccd 	.word	0x3fcccccd
 80043ac:	41480000 	.word	0x41480000
 80043b0:	41c80000 	.word	0x41c80000
 80043b4:	42480000 	.word	0x42480000
 80043b8:	42c80000 	.word	0x42c80000
 80043bc:	43480000 	.word	0x43480000
 80043c0:	43c80000 	.word	0x43c80000
 80043c4:	44480000 	.word	0x44480000
 80043c8:	44c80000 	.word	0x44c80000

080043cc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	72fb      	strb	r3, [r7, #11]
 80043dc:	4613      	mov	r3, r2
 80043de:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	695c      	ldr	r4, [r3, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	7b1b      	ldrb	r3, [r3, #12]
 80043ec:	4618      	mov	r0, r3
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	b299      	uxth	r1, r3
 80043f2:	893b      	ldrh	r3, [r7, #8]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	47a0      	blx	r4
 80043f8:	4603      	mov	r3, r0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004402:	b590      	push	{r4, r7, lr}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	461a      	mov	r2, r3
 800440e:	460b      	mov	r3, r1
 8004410:	72fb      	strb	r3, [r7, #11]
 8004412:	4613      	mov	r3, r2
 8004414:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	691c      	ldr	r4, [r3, #16]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	4618      	mov	r0, r3
 8004424:	7afb      	ldrb	r3, [r7, #11]
 8004426:	b299      	uxth	r1, r3
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	47a0      	blx	r4
 800442e:	4603      	mov	r3, r0
}
 8004430:	4618      	mov	r0, r3
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bd90      	pop	{r4, r7, pc}

08004438 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	460b      	mov	r3, r1
 8004446:	72fb      	strb	r3, [r7, #11]
 8004448:	4613      	mov	r3, r2
 800444a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685c      	ldr	r4, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68d8      	ldr	r0, [r3, #12]
 8004454:	893b      	ldrh	r3, [r7, #8]
 8004456:	7af9      	ldrb	r1, [r7, #11]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	47a0      	blx	r4
 800445c:	6178      	str	r0, [r7, #20]

  return ret;
 800445e:	697b      	ldr	r3, [r7, #20]
}
 8004460:	4618      	mov	r0, r3
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd90      	pop	{r4, r7, pc}

08004468 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	72fb      	strb	r3, [r7, #11]
 8004478:	4613      	mov	r3, r2
 800447a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681c      	ldr	r4, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68d8      	ldr	r0, [r3, #12]
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	7af9      	ldrb	r1, [r7, #11]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	47a0      	blx	r4
 800448c:	6178      	str	r0, [r7, #20]

  return ret;
 800448e:	697b      	ldr	r3, [r7, #20]
}
 8004490:	4618      	mov	r0, r3
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}

08004498 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80044a4:	f107 0210 	add.w	r2, r7, #16
 80044a8:	2301      	movs	r3, #1
 80044aa:	2120      	movs	r1, #32
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ffc3 	bl	8004438 <lis2dw12_read_reg>
 80044b2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d118      	bne.n	80044ec <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	7c3b      	ldrb	r3, [r7, #16]
 80044c6:	f362 0383 	bfi	r3, r2, #2, #2
 80044ca:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	7c3b      	ldrb	r3, [r7, #16]
 80044d6:	f362 0301 	bfi	r3, r2, #0, #2
 80044da:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80044dc:	f107 0210 	add.w	r2, r7, #16
 80044e0:	2301      	movs	r3, #1
 80044e2:	2120      	movs	r1, #32
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffbf 	bl	8004468 <lis2dw12_write_reg>
 80044ea:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80044f2:	f107 020c 	add.w	r2, r7, #12
 80044f6:	2301      	movs	r3, #1
 80044f8:	2125      	movs	r1, #37	@ 0x25
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ff9c 	bl	8004438 <lis2dw12_read_reg>
 8004500:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d110      	bne.n	800452a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	b2da      	uxtb	r2, r3
 8004512:	7b3b      	ldrb	r3, [r7, #12]
 8004514:	f362 0382 	bfi	r3, r2, #2, #1
 8004518:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800451a:	f107 020c 	add.w	r2, r7, #12
 800451e:	2301      	movs	r3, #1
 8004520:	2125      	movs	r1, #37	@ 0x25
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ffa0 	bl	8004468 <lis2dw12_write_reg>
 8004528:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800452a:	697b      	ldr	r3, [r7, #20]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800453e:	f107 0210 	add.w	r2, r7, #16
 8004542:	2301      	movs	r3, #1
 8004544:	2120      	movs	r1, #32
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff76 	bl	8004438 <lis2dw12_read_reg>
 800454c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 80a3 	bne.w	800469c <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004556:	f107 020c 	add.w	r2, r7, #12
 800455a:	2301      	movs	r3, #1
 800455c:	2125      	movs	r1, #37	@ 0x25
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ff6a 	bl	8004438 <lis2dw12_read_reg>
 8004564:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004566:	7b3b      	ldrb	r3, [r7, #12]
 8004568:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800456c:	b2db      	uxtb	r3, r3
 800456e:	011a      	lsls	r2, r3, #4
 8004570:	7c3b      	ldrb	r3, [r7, #16]
 8004572:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004576:	b2db      	uxtb	r3, r3
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
             ctrl1.lp_mode))
 800457c:	7c3a      	ldrb	r2, [r7, #16]
 800457e:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004582:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004584:	4413      	add	r3, r2
 8004586:	2b1b      	cmp	r3, #27
 8004588:	f200 8084 	bhi.w	8004694 <lis2dw12_power_mode_get+0x160>
 800458c:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <lis2dw12_power_mode_get+0x60>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	08004625 	.word	0x08004625
 8004598:	0800461d 	.word	0x0800461d
 800459c:	08004615 	.word	0x08004615
 80045a0:	0800460d 	.word	0x0800460d
 80045a4:	08004605 	.word	0x08004605
 80045a8:	08004695 	.word	0x08004695
 80045ac:	08004695 	.word	0x08004695
 80045b0:	08004695 	.word	0x08004695
 80045b4:	08004645 	.word	0x08004645
 80045b8:	0800463d 	.word	0x0800463d
 80045bc:	08004635 	.word	0x08004635
 80045c0:	0800462d 	.word	0x0800462d
 80045c4:	08004695 	.word	0x08004695
 80045c8:	08004695 	.word	0x08004695
 80045cc:	08004695 	.word	0x08004695
 80045d0:	08004695 	.word	0x08004695
 80045d4:	0800466d 	.word	0x0800466d
 80045d8:	08004665 	.word	0x08004665
 80045dc:	0800465d 	.word	0x0800465d
 80045e0:	08004655 	.word	0x08004655
 80045e4:	0800464d 	.word	0x0800464d
 80045e8:	08004695 	.word	0x08004695
 80045ec:	08004695 	.word	0x08004695
 80045f0:	08004695 	.word	0x08004695
 80045f4:	0800468d 	.word	0x0800468d
 80045f8:	08004685 	.word	0x08004685
 80045fc:	0800467d 	.word	0x0800467d
 8004600:	08004675 	.word	0x08004675
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2204      	movs	r2, #4
 8004608:	701a      	strb	r2, [r3, #0]
        break;
 800460a:	e047      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2203      	movs	r2, #3
 8004610:	701a      	strb	r2, [r3, #0]
        break;
 8004612:	e043      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2202      	movs	r2, #2
 8004618:	701a      	strb	r2, [r3, #0]
        break;
 800461a:	e03f      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
        break;
 8004622:	e03b      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
        break;
 800462a:	e037      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	220b      	movs	r2, #11
 8004630:	701a      	strb	r2, [r3, #0]
        break;
 8004632:	e033      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	220a      	movs	r2, #10
 8004638:	701a      	strb	r2, [r3, #0]
        break;
 800463a:	e02f      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2209      	movs	r2, #9
 8004640:	701a      	strb	r2, [r3, #0]
        break;
 8004642:	e02b      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2208      	movs	r2, #8
 8004648:	701a      	strb	r2, [r3, #0]
        break;
 800464a:	e027      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2214      	movs	r2, #20
 8004650:	701a      	strb	r2, [r3, #0]
        break;
 8004652:	e023      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2213      	movs	r2, #19
 8004658:	701a      	strb	r2, [r3, #0]
        break;
 800465a:	e01f      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2212      	movs	r2, #18
 8004660:	701a      	strb	r2, [r3, #0]
        break;
 8004662:	e01b      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2211      	movs	r2, #17
 8004668:	701a      	strb	r2, [r3, #0]
        break;
 800466a:	e017      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2210      	movs	r2, #16
 8004670:	701a      	strb	r2, [r3, #0]
        break;
 8004672:	e013      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	221b      	movs	r2, #27
 8004678:	701a      	strb	r2, [r3, #0]
        break;
 800467a:	e00f      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	221a      	movs	r2, #26
 8004680:	701a      	strb	r2, [r3, #0]
        break;
 8004682:	e00b      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2219      	movs	r2, #25
 8004688:	701a      	strb	r2, [r3, #0]
        break;
 800468a:	e007      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2218      	movs	r2, #24
 8004690:	701a      	strb	r2, [r3, #0]
        break;
 8004692:	e003      	b.n	800469c <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]
        break;
 800469a:	bf00      	nop
    }
  }

  return ret;
 800469c:	697b      	ldr	r3, [r7, #20]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop

080046a8 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80046b4:	f107 0210 	add.w	r2, r7, #16
 80046b8:	2301      	movs	r3, #1
 80046ba:	2120      	movs	r1, #32
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff febb 	bl	8004438 <lis2dw12_read_reg>
 80046c2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	7c3b      	ldrb	r3, [r7, #16]
 80046d4:	f362 1307 	bfi	r3, r2, #4, #4
 80046d8:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80046da:	f107 0210 	add.w	r2, r7, #16
 80046de:	2301      	movs	r3, #1
 80046e0:	2120      	movs	r1, #32
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fec0 	bl	8004468 <lis2dw12_write_reg>
 80046e8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 80046f0:	f107 020c 	add.w	r2, r7, #12
 80046f4:	2301      	movs	r3, #1
 80046f6:	2122      	movs	r1, #34	@ 0x22
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fe9d 	bl	8004438 <lis2dw12_read_reg>
 80046fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d110      	bne.n	8004728 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	7b3b      	ldrb	r3, [r7, #12]
 8004712:	f362 0301 	bfi	r3, r2, #0, #2
 8004716:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004718:	f107 020c 	add.w	r2, r7, #12
 800471c:	2301      	movs	r3, #1
 800471e:	2122      	movs	r1, #34	@ 0x22
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fea1 	bl	8004468 <lis2dw12_write_reg>
 8004726:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004728:	697b      	ldr	r3, [r7, #20]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
	...

08004734 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800473e:	f107 0210 	add.w	r2, r7, #16
 8004742:	2301      	movs	r3, #1
 8004744:	2120      	movs	r1, #32
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fe76 	bl	8004438 <lis2dw12_read_reg>
 800474c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 80b3 	bne.w	80048bc <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004756:	f107 020c 	add.w	r2, r7, #12
 800475a:	2301      	movs	r3, #1
 800475c:	2122      	movs	r1, #34	@ 0x22
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe6a 	bl	8004438 <lis2dw12_read_reg>
 8004764:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004766:	7b3b      	ldrb	r3, [r7, #12]
 8004768:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800476c:	b2db      	uxtb	r3, r3
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	7c3a      	ldrb	r2, [r7, #16]
 8004772:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	4413      	add	r3, r2
 800477a:	2b32      	cmp	r3, #50	@ 0x32
 800477c:	f200 809a 	bhi.w	80048b4 <lis2dw12_data_rate_get+0x180>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <lis2dw12_data_rate_get+0x54>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004855 	.word	0x08004855
 800478c:	0800485d 	.word	0x0800485d
 8004790:	08004865 	.word	0x08004865
 8004794:	0800486d 	.word	0x0800486d
 8004798:	08004875 	.word	0x08004875
 800479c:	0800487d 	.word	0x0800487d
 80047a0:	08004885 	.word	0x08004885
 80047a4:	0800488d 	.word	0x0800488d
 80047a8:	08004895 	.word	0x08004895
 80047ac:	0800489d 	.word	0x0800489d
 80047b0:	080048b5 	.word	0x080048b5
 80047b4:	080048b5 	.word	0x080048b5
 80047b8:	080048b5 	.word	0x080048b5
 80047bc:	080048b5 	.word	0x080048b5
 80047c0:	080048b5 	.word	0x080048b5
 80047c4:	080048b5 	.word	0x080048b5
 80047c8:	080048b5 	.word	0x080048b5
 80047cc:	080048b5 	.word	0x080048b5
 80047d0:	080048ad 	.word	0x080048ad
 80047d4:	080048b5 	.word	0x080048b5
 80047d8:	080048b5 	.word	0x080048b5
 80047dc:	080048b5 	.word	0x080048b5
 80047e0:	080048b5 	.word	0x080048b5
 80047e4:	080048b5 	.word	0x080048b5
 80047e8:	080048b5 	.word	0x080048b5
 80047ec:	080048b5 	.word	0x080048b5
 80047f0:	080048b5 	.word	0x080048b5
 80047f4:	080048b5 	.word	0x080048b5
 80047f8:	080048b5 	.word	0x080048b5
 80047fc:	080048b5 	.word	0x080048b5
 8004800:	080048b5 	.word	0x080048b5
 8004804:	080048b5 	.word	0x080048b5
 8004808:	080048b5 	.word	0x080048b5
 800480c:	080048b5 	.word	0x080048b5
 8004810:	080048b5 	.word	0x080048b5
 8004814:	080048b5 	.word	0x080048b5
 8004818:	080048b5 	.word	0x080048b5
 800481c:	080048b5 	.word	0x080048b5
 8004820:	080048b5 	.word	0x080048b5
 8004824:	080048b5 	.word	0x080048b5
 8004828:	080048b5 	.word	0x080048b5
 800482c:	080048b5 	.word	0x080048b5
 8004830:	080048b5 	.word	0x080048b5
 8004834:	080048b5 	.word	0x080048b5
 8004838:	080048b5 	.word	0x080048b5
 800483c:	080048b5 	.word	0x080048b5
 8004840:	080048b5 	.word	0x080048b5
 8004844:	080048b5 	.word	0x080048b5
 8004848:	080048b5 	.word	0x080048b5
 800484c:	080048b5 	.word	0x080048b5
 8004850:	080048a5 	.word	0x080048a5
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
        break;
 800485a:	e02f      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2201      	movs	r2, #1
 8004860:	701a      	strb	r2, [r3, #0]
        break;
 8004862:	e02b      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2202      	movs	r2, #2
 8004868:	701a      	strb	r2, [r3, #0]
        break;
 800486a:	e027      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2203      	movs	r2, #3
 8004870:	701a      	strb	r2, [r3, #0]
        break;
 8004872:	e023      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2204      	movs	r2, #4
 8004878:	701a      	strb	r2, [r3, #0]
        break;
 800487a:	e01f      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2205      	movs	r2, #5
 8004880:	701a      	strb	r2, [r3, #0]
        break;
 8004882:	e01b      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2206      	movs	r2, #6
 8004888:	701a      	strb	r2, [r3, #0]
        break;
 800488a:	e017      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2207      	movs	r2, #7
 8004890:	701a      	strb	r2, [r3, #0]
        break;
 8004892:	e013      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2208      	movs	r2, #8
 8004898:	701a      	strb	r2, [r3, #0]
        break;
 800489a:	e00f      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2209      	movs	r2, #9
 80048a0:	701a      	strb	r2, [r3, #0]
        break;
 80048a2:	e00b      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2232      	movs	r2, #50	@ 0x32
 80048a8:	701a      	strb	r2, [r3, #0]
        break;
 80048aa:	e007      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2212      	movs	r2, #18
 80048b0:	701a      	strb	r2, [r3, #0]
        break;
 80048b2:	e003      	b.n	80048bc <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
        break;
 80048ba:	bf00      	nop
    }
  }

  return ret;
 80048bc:	697b      	ldr	r3, [r7, #20]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop

080048c8 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80048d4:	f107 0208 	add.w	r2, r7, #8
 80048d8:	2301      	movs	r3, #1
 80048da:	2121      	movs	r1, #33	@ 0x21
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fdab 	bl	8004438 <lis2dw12_read_reg>
 80048e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	7a3b      	ldrb	r3, [r7, #8]
 80048f4:	f362 03c3 	bfi	r3, r2, #3, #1
 80048f8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80048fa:	f107 0208 	add.w	r2, r7, #8
 80048fe:	2301      	movs	r3, #1
 8004900:	2121      	movs	r1, #33	@ 0x21
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fdb0 	bl	8004468 <lis2dw12_write_reg>
 8004908:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004920:	f107 0208 	add.w	r2, r7, #8
 8004924:	2301      	movs	r3, #1
 8004926:	2125      	movs	r1, #37	@ 0x25
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fd85 	bl	8004438 <lis2dw12_read_reg>
 800492e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004936:	78fb      	ldrb	r3, [r7, #3]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	b2da      	uxtb	r2, r3
 800493e:	7a3b      	ldrb	r3, [r7, #8]
 8004940:	f362 1305 	bfi	r3, r2, #4, #2
 8004944:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004946:	f107 0208 	add.w	r2, r7, #8
 800494a:	2301      	movs	r3, #1
 800494c:	2125      	movs	r1, #37	@ 0x25
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fd8a 	bl	8004468 <lis2dw12_write_reg>
 8004954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800496a:	f107 0208 	add.w	r2, r7, #8
 800496e:	2301      	movs	r3, #1
 8004970:	2125      	movs	r1, #37	@ 0x25
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fd60 	bl	8004438 <lis2dw12_read_reg>
 8004978:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800497a:	7a3b      	ldrb	r3, [r7, #8]
 800497c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b03      	cmp	r3, #3
 8004984:	d81a      	bhi.n	80049bc <lis2dw12_full_scale_get+0x5c>
 8004986:	a201      	add	r2, pc, #4	@ (adr r2, 800498c <lis2dw12_full_scale_get+0x2c>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049a5 	.word	0x080049a5
 8004994:	080049ad 	.word	0x080049ad
 8004998:	080049b5 	.word	0x080049b5
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
      break;
 80049a2:	e00f      	b.n	80049c4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
      break;
 80049aa:	e00b      	b.n	80049c4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2202      	movs	r2, #2
 80049b0:	701a      	strb	r2, [r3, #0]
      break;
 80049b2:	e007      	b.n	80049c4 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2203      	movs	r2, #3
 80049b8:	701a      	strb	r2, [r3, #0]
      break;
 80049ba:	e003      	b.n	80049c4 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
      break;
 80049c2:	bf00      	nop
  }

  return ret;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80049da:	f107 020c 	add.w	r2, r7, #12
 80049de:	2306      	movs	r3, #6
 80049e0:	2128      	movs	r1, #40	@ 0x28
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fd28 	bl	8004438 <lis2dw12_read_reg>
 80049e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80049ea:	7b7b      	ldrb	r3, [r7, #13]
 80049ec:	b21a      	sxth	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	7b3a      	ldrb	r2, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3302      	adds	r3, #2
 8004a10:	b212      	sxth	r2, r2
 8004a12:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	3302      	adds	r3, #2
 8004a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	7bba      	ldrb	r2, [r7, #14]
 8004a24:	4413      	add	r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	b212      	sxth	r2, r2
 8004a2e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a30:	7c7a      	ldrb	r2, [r7, #17]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3304      	adds	r3, #4
 8004a36:	b212      	sxth	r2, r2
 8004a38:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	7c3a      	ldrb	r2, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	b212      	sxth	r2, r2
 8004a54:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a56:	697b      	ldr	r3, [r7, #20]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	210f      	movs	r1, #15
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fce1 	bl	8004438 <lis2dw12_read_reg>
 8004a76:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a8e:	f107 0208 	add.w	r2, r7, #8
 8004a92:	2301      	movs	r3, #1
 8004a94:	2121      	movs	r1, #33	@ 0x21
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fcce 	bl	8004438 <lis2dw12_read_reg>
 8004a9c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	7a3b      	ldrb	r3, [r7, #8]
 8004aae:	f362 0382 	bfi	r3, r2, #2, #1
 8004ab2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ab4:	f107 0208 	add.w	r2, r7, #8
 8004ab8:	2301      	movs	r3, #1
 8004aba:	2121      	movs	r1, #33	@ 0x21
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fcd3 	bl	8004468 <lis2dw12_write_reg>
 8004ac2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004ada:	f107 0208 	add.w	r2, r7, #8
 8004ade:	2301      	movs	r3, #1
 8004ae0:	212e      	movs	r1, #46	@ 0x2e
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fca8 	bl	8004438 <lis2dw12_read_reg>
 8004ae8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10f      	bne.n	8004b10 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	7a3b      	ldrb	r3, [r7, #8]
 8004afa:	f362 1347 	bfi	r3, r2, #5, #3
 8004afe:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004b00:	f107 0208 	add.w	r2, r7, #8
 8004b04:	2301      	movs	r3, #1
 8004b06:	212e      	movs	r1, #46	@ 0x2e
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fcad 	bl	8004468 <lis2dw12_write_reg>
 8004b0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d103      	bne.n	8004b38 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e067      	b.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	7b1a      	ldrb	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a28      	ldr	r2, [pc, #160]	@ (8004c14 <LIS2MDL_RegisterBusIO+0xf8>)
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a27      	ldr	r2, [pc, #156]	@ (8004c18 <LIS2MDL_RegisterBusIO+0xfc>)
 8004b7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e036      	b.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4798      	blx	r3
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e02c      	b.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d123      	bne.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d10d      	bne.n	8004be4 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004bc8:	2334      	movs	r3, #52	@ 0x34
 8004bca:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2162      	movs	r1, #98	@ 0x62
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb16 	bl	8005204 <LIS2MDL_Write_Reg>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d014      	beq.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	e012      	b.n	8004c0a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d101      	bne.n	8004bf0 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	e00c      	b.n	8004c0a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3320      	adds	r3, #32
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 ff67 	bl	8005aca <lis2mdl_i2c_interface_set>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	e000      	b.n	8004c0a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	0800525b 	.word	0x0800525b
 8004c18:	080052dd 	.word	0x080052dd

08004c1c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d144      	bne.n	8004cb6 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004c2c:	f107 0208 	add.w	r2, r7, #8
 8004c30:	2301      	movs	r3, #1
 8004c32:	2162      	movs	r1, #98	@ 0x62
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fb92 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295
 8004c44:	e06c      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c46:	f107 020c 	add.w	r2, r7, #12
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2160      	movs	r1, #96	@ 0x60
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb85 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5e:	e05f      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004c60:	7a3b      	ldrb	r3, [r7, #8]
 8004c62:	f043 0310 	orr.w	r3, r3, #16
 8004c66:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004c68:	7a3b      	ldrb	r3, [r7, #8]
 8004c6a:	f36f 0341 	bfc	r3, #1, #1
 8004c6e:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004c70:	7b3b      	ldrb	r3, [r7, #12]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f362 0301 	bfi	r3, r2, #0, #2
 8004c78:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004c7a:	7b3b      	ldrb	r3, [r7, #12]
 8004c7c:	f043 030c 	orr.w	r3, r3, #12
 8004c80:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004c82:	f107 0208 	add.w	r2, r7, #8
 8004c86:	2301      	movs	r3, #1
 8004c88:	2162      	movs	r1, #98	@ 0x62
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fca6 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9a:	e041      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c9c:	f107 020c 	add.w	r2, r7, #12
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	2160      	movs	r1, #96	@ 0x60
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fc99 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d032      	beq.n	8004d16 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	e034      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3320      	adds	r3, #32
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fe5f 	bl	8005980 <lis2mdl_block_data_update_set>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ccc:	e028      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3320      	adds	r3, #32
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fdcf 	bl	8005878 <lis2mdl_operating_mode_set>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce4:	e01c      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3320      	adds	r3, #32
 8004cea:	2103      	movs	r1, #3
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fde9 	bl	80058c4 <lis2mdl_data_rate_set>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	e010      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3320      	adds	r3, #32
 8004d02:	2100      	movs	r1, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 feba 	bl	8005a7e <lis2mdl_self_test_set>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	e004      	b.n	8004d20 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f8a5 	bl	8004e80 <LIS2MDL_MAG_Disable>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d40:	e004      	b.n	8004d4c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d10b      	bne.n	8004d7e <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004d66:	2301      	movs	r3, #1
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	214f      	movs	r1, #79	@ 0x4f
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 faf6 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	e00c      	b.n	8004d98 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3320      	adds	r3, #32
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fe69 	bl	8005a5c <lis2mdl_device_id_get>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
 8004d94:	e000      	b.n	8004d98 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2232      	movs	r2, #50	@ 0x32
 8004dd2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <LIS2MDL_GetCapabilities+0x58>)
 8004de8:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	42c80000 	.word	0x42c80000

08004dfc <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e032      	b.n	8004e78 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d11d      	bne.n	8004e56 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e1a:	f107 020c 	add.w	r2, r7, #12
 8004e1e:	2301      	movs	r3, #1
 8004e20:	2160      	movs	r1, #96	@ 0x60
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa9b 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	e021      	b.n	8004e78 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004e34:	7b3b      	ldrb	r3, [r7, #12]
 8004e36:	f36f 0301 	bfc	r3, #0, #2
 8004e3a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e3c:	f107 020c 	add.w	r2, r7, #12
 8004e40:	2301      	movs	r3, #1
 8004e42:	2160      	movs	r1, #96	@ 0x60
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbc9 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	e010      	b.n	8004e78 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3320      	adds	r3, #32
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fd0b 	bl	8005878 <lis2mdl_operating_mode_set>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004e68:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6c:	e004      	b.n	8004e78 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e033      	b.n	8004efe <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d11e      	bne.n	8004edc <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e9e:	f107 020c 	add.w	r2, r7, #12
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2160      	movs	r1, #96	@ 0x60
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa59 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e022      	b.n	8004efe <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004eb8:	7b3b      	ldrb	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f362 0301 	bfi	r3, r2, #0, #2
 8004ec0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004ec2:	f107 020c 	add.w	r2, r7, #12
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	2160      	movs	r1, #96	@ 0x60
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fb86 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e010      	b.n	8004efe <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3320      	adds	r3, #32
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fcc8 	bl	8005878 <lis2mdl_operating_mode_set>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	e004      	b.n	8004efe <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004f16:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3320      	adds	r3, #32
 8004f36:	f107 020b 	add.w	r2, r7, #11
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fce7 	bl	8005910 <lis2mdl_data_rate_get>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	e023      	b.n	8004f96 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d81b      	bhi.n	8004f8c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08004f6d 	.word	0x08004f6d
 8004f60:	08004f75 	.word	0x08004f75
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f85 	.word	0x08004f85
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004f70:	601a      	str	r2, [r3, #0]
      break;
 8004f72:	e00f      	b.n	8004f94 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004f78:	601a      	str	r2, [r3, #0]
      break;
 8004f7a:	e00b      	b.n	8004f94 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004f80:	601a      	str	r2, [r3, #0]
      break;
 8004f82:	e007      	b.n	8004f94 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004f88:	601a      	str	r2, [r3, #0]
      break;
 8004f8a:	e003      	b.n	8004f94 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	60fb      	str	r3, [r7, #12]
      break;
 8004f92:	bf00      	nop
  }

  return ret;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	41200000 	.word	0x41200000
 8004fa4:	41a00000 	.word	0x41a00000
 8004fa8:	42480000 	.word	0x42480000
 8004fac:	42c80000 	.word	0x42c80000

08004fb0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004fba:	492a      	ldr	r1, [pc, #168]	@ (8005064 <LIS2MDL_MAG_SetOutputDataRate+0xb4>)
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f7fc f881 	bl	80010c4 <__aeabi_fcmple>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <LIS2MDL_MAG_SetOutputDataRate+0x1c>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e012      	b.n	8004ff2 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8004fcc:	4926      	ldr	r1, [pc, #152]	@ (8005068 <LIS2MDL_MAG_SetOutputDataRate+0xb8>)
 8004fce:	6838      	ldr	r0, [r7, #0]
 8004fd0:	f7fc f878 	bl	80010c4 <__aeabi_fcmple>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <LIS2MDL_MAG_SetOutputDataRate+0x2e>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e009      	b.n	8004ff2 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8004fde:	4923      	ldr	r1, [pc, #140]	@ (800506c <LIS2MDL_MAG_SetOutputDataRate+0xbc>)
 8004fe0:	6838      	ldr	r0, [r7, #0]
 8004fe2:	f7fc f86f 	bl	80010c4 <__aeabi_fcmple>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <LIS2MDL_MAG_SetOutputDataRate+0x40>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e000      	b.n	8004ff2 <LIS2MDL_MAG_SetOutputDataRate+0x42>
 8004ff0:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004ff2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d121      	bne.n	8005040 <LIS2MDL_MAG_SetOutputDataRate+0x90>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004ffc:	f107 020c 	add.w	r2, r7, #12
 8005000:	2301      	movs	r3, #1
 8005002:	2160      	movs	r1, #96	@ 0x60
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f9aa 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <LIS2MDL_MAG_SetOutputDataRate+0x66>
    {
      return LIS2MDL_ERROR;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	e022      	b.n	800505c <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	b2da      	uxtb	r2, r3
 800501e:	7b3b      	ldrb	r3, [r7, #12]
 8005020:	f362 0383 	bfi	r3, r2, #2, #2
 8005024:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005026:	f107 020c 	add.w	r2, r7, #12
 800502a:	2301      	movs	r3, #1
 800502c:	2160      	movs	r1, #96	@ 0x60
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fad4 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00f      	beq.n	800505a <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	e00d      	b.n	800505c <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3320      	adds	r3, #32
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fc3b 	bl	80058c4 <lis2mdl_data_rate_set>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <LIS2MDL_MAG_SetOutputDataRate+0xaa>
    {
      return LIS2MDL_ERROR;
 8005054:	f04f 33ff 	mov.w	r3, #4294967295
 8005058:	e000      	b.n	800505c <LIS2MDL_MAG_SetOutputDataRate+0xac>
    }
  }

  return LIS2MDL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	41200000 	.word	0x41200000
 8005068:	41a00000 	.word	0x41a00000
 800506c:	42480000 	.word	0x42480000

08005070 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2232      	movs	r2, #50	@ 0x32
 800507e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3320      	adds	r3, #32
 80050b0:	f107 0208 	add.w	r2, r7, #8
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fc88 	bl	80059cc <lis2mdl_magnetic_raw_get>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295
 80050c6:	e00c      	b.n	80050e2 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80050c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80050d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80050d8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d134      	bne.n	8005166 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80050fc:	f107 0218 	add.w	r2, r7, #24
 8005100:	2306      	movs	r3, #6
 8005102:	2168      	movs	r1, #104	@ 0x68
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f92a 	bl	800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	e072      	b.n	80051fc <LIS2MDL_MAG_GetAxes+0x112>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005116:	7e7b      	ldrb	r3, [r7, #25]
 8005118:	b21b      	sxth	r3, r3
 800511a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800511c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005120:	b29b      	uxth	r3, r3
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	b29b      	uxth	r3, r3
 8005126:	7e3a      	ldrb	r2, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	b21b      	sxth	r3, r3
 800512e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8005130:	7efb      	ldrb	r3, [r7, #27]
 8005132:	b21b      	sxth	r3, r3
 8005134:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800513a:	b29b      	uxth	r3, r3
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b29b      	uxth	r3, r3
 8005140:	7eba      	ldrb	r2, [r7, #26]
 8005142:	4413      	add	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	b21b      	sxth	r3, r3
 8005148:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800514a:	7f7b      	ldrb	r3, [r7, #29]
 800514c:	b21b      	sxth	r3, r3
 800514e:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005150:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005154:	b29b      	uxth	r3, r3
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	b29b      	uxth	r3, r3
 800515a:	7f3a      	ldrb	r2, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	b21b      	sxth	r3, r3
 8005162:	82bb      	strh	r3, [r7, #20]
 8005164:	e00d      	b.n	8005182 <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3320      	adds	r3, #32
 800516a:	f107 0210 	add.w	r2, r7, #16
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fc2b 	bl	80059cc <lis2mdl_magnetic_raw_get>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	e03c      	b.n	80051fc <LIS2MDL_MAG_GetAxes+0x112>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8005182:	f107 030c 	add.w	r3, r7, #12
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff febc 	bl	8004f06 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800518e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb fd9a 	bl	8000ccc <__aeabi_i2f>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7fb fde8 	bl	8000d74 <__aeabi_fmul>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb ffaa 	bl	8001100 <__aeabi_f2iz>
 80051ac:	4602      	mov	r2, r0
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80051b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb fd88 	bl	8000ccc <__aeabi_i2f>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fb fdd6 	bl	8000d74 <__aeabi_fmul>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fb ff98 	bl	8001100 <__aeabi_f2iz>
 80051d0:	4602      	mov	r2, r0
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80051d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fb fd76 	bl	8000ccc <__aeabi_i2f>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fb fdc4 	bl	8000d74 <__aeabi_fmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fb ff86 	bl	8001100 <__aeabi_f2iz>
 80051f4:	4602      	mov	r2, r0
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
 8005210:	4613      	mov	r3, r2
 8005212:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d10b      	bne.n	8005234 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800521c:	1cba      	adds	r2, r7, #2
 800521e:	78f9      	ldrb	r1, [r7, #3]
 8005220:	2301      	movs	r3, #1
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9da 	bl	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	e00e      	b.n	8005252 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f103 0020 	add.w	r0, r3, #32
 800523a:	1cba      	adds	r2, r7, #2
 800523c:	78f9      	ldrb	r1, [r7, #3]
 800523e:	2301      	movs	r3, #1
 8005240:	f000 fb02 	bl	8005848 <lis2mdl_write_reg>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	e000      	b.n	8005252 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800525a:	b590      	push	{r4, r7, lr}
 800525c:	b087      	sub	sp, #28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	461a      	mov	r2, r3
 8005266:	460b      	mov	r3, r1
 8005268:	72fb      	strb	r3, [r7, #11]
 800526a:	4613      	mov	r3, r2
 800526c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	695c      	ldr	r4, [r3, #20]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	7b1b      	ldrb	r3, [r3, #12]
 8005282:	4618      	mov	r0, r3
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800528a:	b2db      	uxtb	r3, r3
 800528c:	4619      	mov	r1, r3
 800528e:	893b      	ldrh	r3, [r7, #8]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	47a0      	blx	r4
 8005294:	4603      	mov	r3, r0
 8005296:	e01d      	b.n	80052d4 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d10b      	bne.n	80052b8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	695c      	ldr	r4, [r3, #20]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	7b1b      	ldrb	r3, [r3, #12]
 80052a8:	4618      	mov	r0, r3
 80052aa:	7afb      	ldrb	r3, [r7, #11]
 80052ac:	b299      	uxth	r1, r3
 80052ae:	893b      	ldrh	r3, [r7, #8]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	47a0      	blx	r4
 80052b4:	4603      	mov	r3, r0
 80052b6:	e00d      	b.n	80052d4 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	695c      	ldr	r4, [r3, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	7b1b      	ldrb	r3, [r3, #12]
 80052c0:	4618      	mov	r0, r3
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	4619      	mov	r1, r3
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	47a0      	blx	r4
 80052d2:	4603      	mov	r3, r0
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}

080052dc <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	461a      	mov	r2, r3
 80052e8:	460b      	mov	r3, r1
 80052ea:	72fb      	strb	r3, [r7, #11]
 80052ec:	4613      	mov	r3, r2
 80052ee:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10e      	bne.n	800531a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	691c      	ldr	r4, [r3, #16]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	7b1b      	ldrb	r3, [r3, #12]
 8005304:	4618      	mov	r0, r3
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	47a0      	blx	r4
 8005316:	4603      	mov	r3, r0
 8005318:	e01d      	b.n	8005356 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d10b      	bne.n	800533a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	691c      	ldr	r4, [r3, #16]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	7b1b      	ldrb	r3, [r3, #12]
 800532a:	4618      	mov	r0, r3
 800532c:	7afb      	ldrb	r3, [r7, #11]
 800532e:	b299      	uxth	r1, r3
 8005330:	893b      	ldrh	r3, [r7, #8]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	47a0      	blx	r4
 8005336:	4603      	mov	r3, r0
 8005338:	e00d      	b.n	8005356 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	691c      	ldr	r4, [r3, #16]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	7b1b      	ldrb	r3, [r3, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4619      	mov	r1, r3
 800534e:	893b      	ldrh	r3, [r7, #8]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	47a0      	blx	r4
 8005354:	4603      	mov	r3, r0
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}

0800535e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b08c      	sub	sp, #48	@ 0x30
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	461a      	mov	r2, r3
 800536a:	460b      	mov	r3, r1
 800536c:	72fb      	strb	r3, [r7, #11]
 800536e:	4613      	mov	r3, r2
 8005370:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005378:	2340      	movs	r3, #64	@ 0x40
 800537a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8005384:	233d      	movs	r3, #61	@ 0x3d
 8005386:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005388:	2315      	movs	r3, #21
 800538a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800538e:	2316      	movs	r3, #22
 8005390:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005394:	2317      	movs	r3, #23
 8005396:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 800539a:	2314      	movs	r3, #20
 800539c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80053a0:	2344      	movs	r3, #68	@ 0x44
 80053a2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80053aa:	2339      	movs	r3, #57	@ 0x39
 80053ac:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80053b6:	2329      	movs	r3, #41	@ 0x29
 80053b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80053bc:	231e      	movs	r3, #30
 80053be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80053ce:	2310      	movs	r3, #16
 80053d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80053da:	2340      	movs	r3, #64	@ 0x40
 80053dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f103 0020 	add.w	r0, r3, #32
 80053e6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80053ea:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80053ee:	2301      	movs	r3, #1
 80053f0:	f000 fa2a 	bl	8005848 <lis2mdl_write_reg>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
 80053fe:	e0e9      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f103 0020 	add.w	r0, r3, #32
 8005406:	f107 021f 	add.w	r2, r7, #31
 800540a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800540e:	2301      	movs	r3, #1
 8005410:	f000 fa1a 	bl	8005848 <lis2mdl_write_reg>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	e0d9      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f103 0020 	add.w	r0, r3, #32
 8005426:	f107 020b 	add.w	r2, r7, #11
 800542a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800542e:	2301      	movs	r3, #1
 8005430:	f000 fa0a 	bl	8005848 <lis2mdl_write_reg>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e0c9      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f103 0020 	add.w	r0, r3, #32
 8005446:	f107 021d 	add.w	r2, r7, #29
 800544a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800544e:	2301      	movs	r3, #1
 8005450:	f000 f9fa 	bl	8005848 <lis2mdl_write_reg>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e0b9      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f103 0020 	add.w	r0, r3, #32
 8005466:	f107 021e 	add.w	r2, r7, #30
 800546a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800546e:	2301      	movs	r3, #1
 8005470:	f000 f9ea 	bl	8005848 <lis2mdl_write_reg>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	e0a9      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f103 0020 	add.w	r0, r3, #32
 8005486:	f107 0220 	add.w	r2, r7, #32
 800548a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800548e:	2301      	movs	r3, #1
 8005490:	f000 f9da 	bl	8005848 <lis2mdl_write_reg>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e099      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f103 0020 	add.w	r0, r3, #32
 80054a6:	f107 021c 	add.w	r2, r7, #28
 80054aa:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80054ae:	2301      	movs	r3, #1
 80054b0:	f000 f9b2 	bl	8005818 <lis2mdl_read_reg>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295
 80054be:	e089      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80054c0:	7f3b      	ldrb	r3, [r7, #28]
 80054c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d102      	bne.n	80054d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80054ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80054ce:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f103 0020 	add.w	r0, r3, #32
 80054d6:	f107 021c 	add.w	r2, r7, #28
 80054da:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80054de:	2301      	movs	r3, #1
 80054e0:	f000 f9b2 	bl	8005848 <lis2mdl_write_reg>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80054ea:	f04f 33ff 	mov.w	r3, #4294967295
 80054ee:	e071      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f103 0020 	add.w	r0, r3, #32
 80054f6:	f107 0214 	add.w	r2, r7, #20
 80054fa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80054fe:	2306      	movs	r3, #6
 8005500:	f000 f98a 	bl	8005818 <lis2mdl_read_reg>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	e061      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f103 0020 	add.w	r0, r3, #32
 8005516:	f107 021b 	add.w	r2, r7, #27
 800551a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800551e:	2301      	movs	r3, #1
 8005520:	f000 f97a 	bl	8005818 <lis2mdl_read_reg>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	e051      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005530:	7efa      	ldrb	r2, [r7, #27]
 8005532:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005536:	4013      	ands	r3, r2
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800553e:	429a      	cmp	r2, r3
 8005540:	d1e6      	bne.n	8005510 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f103 0020 	add.w	r0, r3, #32
 8005548:	f107 021b 	add.w	r2, r7, #27
 800554c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005550:	2301      	movs	r3, #1
 8005552:	f000 f961 	bl	8005818 <lis2mdl_read_reg>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	e038      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005562:	7efa      	ldrb	r2, [r7, #27]
 8005564:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005568:	4013      	ands	r3, r2
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005570:	429a      	cmp	r2, r3
 8005572:	d1e6      	bne.n	8005542 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f103 0020 	add.w	r0, r3, #32
 800557a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800557e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005582:	2301      	movs	r3, #1
 8005584:	f000 f960 	bl	8005848 <lis2mdl_write_reg>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	e01f      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f103 0020 	add.w	r0, r3, #32
 800559a:	893b      	ldrh	r3, [r7, #8]
 800559c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	f000 f939 	bl	8005818 <lis2mdl_read_reg>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295
 80055b0:	e010      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f103 0020 	add.w	r0, r3, #32
 80055b8:	f107 0220 	add.w	r2, r7, #32
 80055bc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80055c0:	2301      	movs	r3, #1
 80055c2:	f000 f941 	bl	8005848 <lis2mdl_write_reg>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	e000      	b.n	80055d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	@ 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	461a      	mov	r2, r3
 80055e8:	460b      	mov	r3, r1
 80055ea:	72fb      	strb	r3, [r7, #11]
 80055ec:	4613      	mov	r3, r2
 80055ee:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80055f6:	2340      	movs	r3, #64	@ 0x40
 80055f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005602:	233c      	movs	r3, #60	@ 0x3c
 8005604:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005606:	2315      	movs	r3, #21
 8005608:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800560c:	2316      	movs	r3, #22
 800560e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005612:	2317      	movs	r3, #23
 8005614:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005618:	2300      	movs	r3, #0
 800561a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800561c:	2314      	movs	r3, #20
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005622:	2344      	movs	r3, #68	@ 0x44
 8005624:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005626:	2339      	movs	r3, #57	@ 0x39
 8005628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005632:	2329      	movs	r3, #41	@ 0x29
 8005634:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005638:	231e      	movs	r3, #30
 800563a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005644:	2310      	movs	r3, #16
 8005646:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005650:	2340      	movs	r3, #64	@ 0x40
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005656:	230e      	movs	r3, #14
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f103 0020 	add.w	r0, r3, #32
 8005662:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005666:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800566a:	2301      	movs	r3, #1
 800566c:	f000 f8ec 	bl	8005848 <lis2mdl_write_reg>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e0c9      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f103 0020 	add.w	r0, r3, #32
 8005682:	f107 021f 	add.w	r2, r7, #31
 8005686:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800568a:	2301      	movs	r3, #1
 800568c:	f000 f8dc 	bl	8005848 <lis2mdl_write_reg>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005696:	f04f 33ff 	mov.w	r3, #4294967295
 800569a:	e0b9      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f103 0020 	add.w	r0, r3, #32
 80056a2:	f107 020b 	add.w	r2, r7, #11
 80056a6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80056aa:	2301      	movs	r3, #1
 80056ac:	f000 f8cc 	bl	8005848 <lis2mdl_write_reg>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e0a9      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f103 0020 	add.w	r0, r3, #32
 80056c2:	f107 021e 	add.w	r2, r7, #30
 80056c6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80056ca:	2301      	movs	r3, #1
 80056cc:	f000 f8bc 	bl	8005848 <lis2mdl_write_reg>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	e099      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f103 0020 	add.w	r0, r3, #32
 80056e2:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80056e6:	2301      	movs	r3, #1
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	f000 f8ad 	bl	8005848 <lis2mdl_write_reg>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295
 80056f8:	e08a      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f103 0020 	add.w	r0, r3, #32
 8005700:	f107 021d 	add.w	r2, r7, #29
 8005704:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005708:	2301      	movs	r3, #1
 800570a:	f000 f89d 	bl	8005848 <lis2mdl_write_reg>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005714:	f04f 33ff 	mov.w	r3, #4294967295
 8005718:	e07a      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f103 0020 	add.w	r0, r3, #32
 8005720:	f107 0220 	add.w	r2, r7, #32
 8005724:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005728:	2301      	movs	r3, #1
 800572a:	f000 f88d 	bl	8005848 <lis2mdl_write_reg>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	e06a      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f103 0020 	add.w	r0, r3, #32
 8005740:	f107 021c 	add.w	r2, r7, #28
 8005744:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005748:	2301      	movs	r3, #1
 800574a:	f000 f865 	bl	8005818 <lis2mdl_read_reg>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	e05a      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800575a:	7f3b      	ldrb	r3, [r7, #28]
 800575c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005760:	429a      	cmp	r2, r3
 8005762:	d102      	bne.n	800576a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005768:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f103 0020 	add.w	r0, r3, #32
 8005770:	f107 021c 	add.w	r2, r7, #28
 8005774:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005778:	2301      	movs	r3, #1
 800577a:	f000 f865 	bl	8005848 <lis2mdl_write_reg>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
 8005788:	e042      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f103 0020 	add.w	r0, r3, #32
 8005790:	f107 0214 	add.w	r2, r7, #20
 8005794:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005798:	2306      	movs	r3, #6
 800579a:	f000 f83d 	bl	8005818 <lis2mdl_read_reg>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80057a4:	f04f 33ff 	mov.w	r3, #4294967295
 80057a8:	e032      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f103 0020 	add.w	r0, r3, #32
 80057b0:	f107 021b 	add.w	r2, r7, #27
 80057b4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80057b8:	2301      	movs	r3, #1
 80057ba:	f000 f82d 	bl	8005818 <lis2mdl_read_reg>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295
 80057c8:	e022      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80057ca:	7efa      	ldrb	r2, [r7, #27]
 80057cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057d0:	4013      	ands	r3, r2
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80057d8:	429a      	cmp	r2, r3
 80057da:	d1e6      	bne.n	80057aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f103 0020 	add.w	r0, r3, #32
 80057e2:	f107 021b 	add.w	r2, r7, #27
 80057e6:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80057ea:	2301      	movs	r3, #1
 80057ec:	f000 f814 	bl	8005818 <lis2mdl_read_reg>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	e009      	b.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80057fc:	7efa      	ldrb	r2, [r7, #27]
 80057fe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005802:	4013      	ands	r3, r2
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800580a:	429a      	cmp	r2, r3
 800580c:	d1e6      	bne.n	80057dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	@ 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	461a      	mov	r2, r3
 8005824:	460b      	mov	r3, r1
 8005826:	72fb      	strb	r3, [r7, #11]
 8005828:	4613      	mov	r3, r2
 800582a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685c      	ldr	r4, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68d8      	ldr	r0, [r3, #12]
 8005834:	893b      	ldrh	r3, [r7, #8]
 8005836:	7af9      	ldrb	r1, [r7, #11]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	47a0      	blx	r4
 800583c:	6178      	str	r0, [r7, #20]

  return ret;
 800583e:	697b      	ldr	r3, [r7, #20]
}
 8005840:	4618      	mov	r0, r3
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd90      	pop	{r4, r7, pc}

08005848 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	461a      	mov	r2, r3
 8005854:	460b      	mov	r3, r1
 8005856:	72fb      	strb	r3, [r7, #11]
 8005858:	4613      	mov	r3, r2
 800585a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681c      	ldr	r4, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68d8      	ldr	r0, [r3, #12]
 8005864:	893b      	ldrh	r3, [r7, #8]
 8005866:	7af9      	ldrb	r1, [r7, #11]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	47a0      	blx	r4
 800586c:	6178      	str	r0, [r7, #20]

  return ret;
 800586e:	697b      	ldr	r3, [r7, #20]
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005884:	f107 0208 	add.w	r2, r7, #8
 8005888:	2301      	movs	r3, #1
 800588a:	2160      	movs	r1, #96	@ 0x60
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ffc3 	bl	8005818 <lis2mdl_read_reg>
 8005892:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	7a3b      	ldrb	r3, [r7, #8]
 80058a4:	f362 0301 	bfi	r3, r2, #0, #2
 80058a8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058aa:	f107 0208 	add.w	r2, r7, #8
 80058ae:	2301      	movs	r3, #1
 80058b0:	2160      	movs	r1, #96	@ 0x60
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ffc8 	bl	8005848 <lis2mdl_write_reg>
 80058b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058d0:	f107 0208 	add.w	r2, r7, #8
 80058d4:	2301      	movs	r3, #1
 80058d6:	2160      	movs	r1, #96	@ 0x60
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff9d 	bl	8005818 <lis2mdl_read_reg>
 80058de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	7a3b      	ldrb	r3, [r7, #8]
 80058f0:	f362 0383 	bfi	r3, r2, #2, #2
 80058f4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80058f6:	f107 0208 	add.w	r2, r7, #8
 80058fa:	2301      	movs	r3, #1
 80058fc:	2160      	movs	r1, #96	@ 0x60
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ffa2 	bl	8005848 <lis2mdl_write_reg>
 8005904:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800591a:	f107 0208 	add.w	r2, r7, #8
 800591e:	2301      	movs	r3, #1
 8005920:	2160      	movs	r1, #96	@ 0x60
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff ff78 	bl	8005818 <lis2mdl_read_reg>
 8005928:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800592a:	7a3b      	ldrb	r3, [r7, #8]
 800592c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d81a      	bhi.n	800596c <lis2mdl_data_rate_get+0x5c>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <lis2mdl_data_rate_get+0x2c>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	08005955 	.word	0x08005955
 8005944:	0800595d 	.word	0x0800595d
 8005948:	08005965 	.word	0x08005965
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e00f      	b.n	8005974 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
      break;
 800595a:	e00b      	b.n	8005974 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e007      	b.n	8005974 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2203      	movs	r2, #3
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	e003      	b.n	8005974 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	701a      	strb	r2, [r3, #0]
      break;
 8005972:	bf00      	nop
  }

  return ret;
 8005974:	68fb      	ldr	r3, [r7, #12]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop

08005980 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800598c:	f107 0208 	add.w	r2, r7, #8
 8005990:	2301      	movs	r3, #1
 8005992:	2162      	movs	r1, #98	@ 0x62
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff3f 	bl	8005818 <lis2mdl_read_reg>
 800599a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	7a3b      	ldrb	r3, [r7, #8]
 80059ac:	f362 1304 	bfi	r3, r2, #4, #1
 80059b0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80059b2:	f107 0208 	add.w	r2, r7, #8
 80059b6:	2301      	movs	r3, #1
 80059b8:	2162      	movs	r1, #98	@ 0x62
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ff44 	bl	8005848 <lis2mdl_write_reg>
 80059c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059c2:	68fb      	ldr	r3, [r7, #12]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80059d6:	f107 020c 	add.w	r2, r7, #12
 80059da:	2306      	movs	r3, #6
 80059dc:	2168      	movs	r1, #104	@ 0x68
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ff1a 	bl	8005818 <lis2mdl_read_reg>
 80059e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	7b3a      	ldrb	r2, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	b21a      	sxth	r2, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	b212      	sxth	r2, r2
 8005a0e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	3302      	adds	r3, #2
 8005a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	7bba      	ldrb	r2, [r7, #14]
 8005a20:	4413      	add	r3, r2
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	3302      	adds	r3, #2
 8005a28:	b212      	sxth	r2, r2
 8005a2a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a2c:	7c7a      	ldrb	r2, [r7, #17]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	3304      	adds	r3, #4
 8005a32:	b212      	sxth	r2, r2
 8005a34:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	7c3a      	ldrb	r2, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	b212      	sxth	r2, r2
 8005a50:	801a      	strh	r2, [r3, #0]

  return ret;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005a66:	2301      	movs	r3, #1
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	214f      	movs	r1, #79	@ 0x4f
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff fed3 	bl	8005818 <lis2mdl_read_reg>
 8005a72:	60f8      	str	r0, [r7, #12]

  return ret;
 8005a74:	68fb      	ldr	r3, [r7, #12]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005a8a:	f107 0208 	add.w	r2, r7, #8
 8005a8e:	2301      	movs	r3, #1
 8005a90:	2162      	movs	r1, #98	@ 0x62
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fec0 	bl	8005818 <lis2mdl_read_reg>
 8005a98:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10f      	bne.n	8005ac0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	7a3b      	ldrb	r3, [r7, #8]
 8005aaa:	f362 0341 	bfi	r3, r2, #1, #1
 8005aae:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ab0:	f107 0208 	add.w	r2, r7, #8
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	2162      	movs	r1, #98	@ 0x62
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fec5 	bl	8005848 <lis2mdl_write_reg>
 8005abe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ad6:	f107 0208 	add.w	r2, r7, #8
 8005ada:	2301      	movs	r3, #1
 8005adc:	2162      	movs	r1, #98	@ 0x62
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe9a 	bl	8005818 <lis2mdl_read_reg>
 8005ae4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10f      	bne.n	8005b0c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	7a3b      	ldrb	r3, [r7, #8]
 8005af6:	f362 1345 	bfi	r3, r2, #5, #1
 8005afa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005afc:	f107 0208 	add.w	r2, r7, #8
 8005b00:	2301      	movs	r3, #1
 8005b02:	2162      	movs	r1, #98	@ 0x62
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fe9f 	bl	8005848 <lis2mdl_write_reg>
 8005b0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e051      	b.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	7b1a      	ldrb	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695a      	ldr	r2, [r3, #20]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005be4 <LPS22HH_RegisterBusIO+0xcc>)
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1c      	ldr	r2, [pc, #112]	@ (8005be8 <LPS22HH_RegisterBusIO+0xd0>)
 8005b76:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e020      	b.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e016      	b.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d112      	bne.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10d      	bne.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005bc0:	7afb      	ldrb	r3, [r7, #11]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2110      	movs	r1, #16
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9db 	bl	8005f82 <LPS22HH_Write_Reg>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	0800628f 	.word	0x0800628f
 8005be8:	080062c5 	.word	0x080062c5

08005bec <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 faf8 	bl	80061f4 <LPS22HH_Initialize>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e004      	b.n	8005c1a <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d111      	bne.n	8005c58 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f87d 	bl	8005d34 <LPS22HH_PRESS_Disable>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	e00d      	b.n	8005c62 <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f919 	bl	8005e7e <LPS22HH_TEMP_Disable>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 8005c52:	f04f 33ff 	mov.w	r3, #4294967295
 8005c56:	e004      	b.n	8005c62 <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22HH_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3320      	adds	r3, #32
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fcfd 	bl	800667a <lps22hh_device_id_get>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	e000      	b.n	8005c8e <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <LPS22HH_GetCapabilities+0x50>)
 8005ccc:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4a05      	ldr	r2, [pc, #20]	@ (8005ce8 <LPS22HH_GetCapabilities+0x50>)
 8005cd2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr
 8005ce8:	43480000 	.word	0x43480000

08005cec <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e014      	b.n	8005d2c <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f103 0220 	add.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fb71 	bl	80063f8 <lps22hh_data_rate_set>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	e004      	b.n	8005d2c <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e024      	b.n	8005d94 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11a      	bne.n	8005d8a <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f103 0220 	add.w	r2, r3, #32
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3333      	adds	r3, #51	@ 0x33
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 fb97 	bl	8006494 <lps22hh_data_rate_get>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	e010      	b.n	8005d94 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3320      	adds	r3, #32
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fb3d 	bl	80063f8 <lps22hh_data_rate_set>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005d84:	f04f 33ff 	mov.w	r3, #4294967295
 8005d88:	e004      	b.n	8005d94 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22HH_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f905 	bl	8005fb8 <LPS22HH_GetOutputDataRate>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d105      	bne.n	8005dd8 <LPS22HH_PRESS_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f956 	bl	8006080 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	e004      	b.n	8005de2 <LPS22HH_PRESS_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9ba 	bl	8006154 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005de0:	4603      	mov	r3, r0
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	2204      	movs	r2, #4
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f00b f9ed 	bl	80111dc <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3320      	adds	r3, #32
 8005e06:	f107 020c 	add.w	r2, r7, #12
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 fbe9 	bl	80065e4 <lps22hh_pressure_raw_get>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1c:	e007      	b.n	8005e2e <LPS22HH_PRESS_GetPressure+0x44>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fa9a 	bl	800635a <lps22hh_from_lsb_to_hpa>
 8005e26:	4602      	mov	r2, r0
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e014      	b.n	8005e76 <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f103 0220 	add.w	r2, r3, #32
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f000 facc 	bl	80063f8 <lps22hh_data_rate_set>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005e66:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6a:	e004      	b.n	8005e76 <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e024      	b.n	8005ede <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11a      	bne.n	8005ed4 <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f103 0220 	add.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3333      	adds	r3, #51	@ 0x33
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 faf2 	bl	8006494 <lps22hh_data_rate_get>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	e010      	b.n	8005ede <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3320      	adds	r3, #32
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fa98 	bl	80063f8 <lps22hh_data_rate_set>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	e004      	b.n	8005ede <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22HH_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f860 	bl	8005fb8 <LPS22HH_GetOutputDataRate>
 8005ef8:	4603      	mov	r3, r0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <LPS22HH_TEMP_SetOutputDataRate+0x20>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8b1 	bl	8006080 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	e004      	b.n	8005f2c <LPS22HH_TEMP_SetOutputDataRate+0x2a>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f915 	bl	8006154 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005f2a:	4603      	mov	r3, r0
  }
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	2202      	movs	r2, #2
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f00b f948 	bl	80111dc <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3320      	adds	r3, #32
 8005f50:	f107 020c 	add.w	r2, r7, #12
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fb6d 	bl	8006636 <lps22hh_temperature_raw_get>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	e008      	b.n	8005f7a <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005f68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fa07 	bl	8006380 <lps22hh_from_lsb_to_celsius>
 8005f72:	4602      	mov	r2, r0
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f103 0020 	add.w	r0, r3, #32
 8005f98:	1cba      	adds	r2, r7, #2
 8005f9a:	78f9      	ldrb	r1, [r7, #3]
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f000 f9c4 	bl	800632a <lps22hh_write_reg>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	e000      	b.n	8005fb0 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3320      	adds	r3, #32
 8005fca:	f107 020b 	add.w	r2, r7, #11
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fa5f 	bl	8006494 <lps22hh_data_rate_get>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe0:	e03d      	b.n	800605e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
 8005fe4:	2b07      	cmp	r3, #7
 8005fe6:	d835      	bhi.n	8006054 <LPS22HH_GetOutputDataRate+0x9c>
 8005fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <LPS22HH_GetOutputDataRate+0x38>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	0800601b 	.word	0x0800601b
 8005ff8:	08006025 	.word	0x08006025
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	08006035 	.word	0x08006035
 8006004:	0800603d 	.word	0x0800603d
 8006008:	08006045 	.word	0x08006045
 800600c:	0800604d 	.word	0x0800604d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
      break;
 8006018:	e020      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006020:	601a      	str	r2, [r3, #0]
      break;
 8006022:	e01b      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4a10      	ldr	r2, [pc, #64]	@ (8006068 <LPS22HH_GetOutputDataRate+0xb0>)
 8006028:	601a      	str	r2, [r3, #0]
      break;
 800602a:	e017      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	4a0f      	ldr	r2, [pc, #60]	@ (800606c <LPS22HH_GetOutputDataRate+0xb4>)
 8006030:	601a      	str	r2, [r3, #0]
      break;
 8006032:	e013      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	4a0e      	ldr	r2, [pc, #56]	@ (8006070 <LPS22HH_GetOutputDataRate+0xb8>)
 8006038:	601a      	str	r2, [r3, #0]
      break;
 800603a:	e00f      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4a0d      	ldr	r2, [pc, #52]	@ (8006074 <LPS22HH_GetOutputDataRate+0xbc>)
 8006040:	601a      	str	r2, [r3, #0]
      break;
 8006042:	e00b      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	4a0c      	ldr	r2, [pc, #48]	@ (8006078 <LPS22HH_GetOutputDataRate+0xc0>)
 8006048:	601a      	str	r2, [r3, #0]
      break;
 800604a:	e007      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	4a0b      	ldr	r2, [pc, #44]	@ (800607c <LPS22HH_GetOutputDataRate+0xc4>)
 8006050:	601a      	str	r2, [r3, #0]
      break;
 8006052:	e003      	b.n	800605c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	60fb      	str	r3, [r7, #12]
      break;
 800605a:	bf00      	nop
  }

  return ret;
 800605c:	68fb      	ldr	r3, [r7, #12]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	41200000 	.word	0x41200000
 800606c:	41c80000 	.word	0x41c80000
 8006070:	42480000 	.word	0x42480000
 8006074:	42960000 	.word	0x42960000
 8006078:	42c80000 	.word	0x42c80000
 800607c:	43480000 	.word	0x43480000

08006080 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800608a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800608e:	6838      	ldr	r0, [r7, #0]
 8006090:	f7fb f818 	bl	80010c4 <__aeabi_fcmple>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <LPS22HH_SetOutputDataRate_When_Enabled+0x1e>
 800609a:	2301      	movs	r3, #1
 800609c:	e02d      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 800609e:	4928      	ldr	r1, [pc, #160]	@ (8006140 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 80060a0:	6838      	ldr	r0, [r7, #0]
 80060a2:	f7fb f80f 	bl	80010c4 <__aeabi_fcmple>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <LPS22HH_SetOutputDataRate_When_Enabled+0x30>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e024      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80060b0:	4924      	ldr	r1, [pc, #144]	@ (8006144 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 80060b2:	6838      	ldr	r0, [r7, #0]
 80060b4:	f7fb f806 	bl	80010c4 <__aeabi_fcmple>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <LPS22HH_SetOutputDataRate_When_Enabled+0x42>
 80060be:	2303      	movs	r3, #3
 80060c0:	e01b      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80060c2:	4921      	ldr	r1, [pc, #132]	@ (8006148 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80060c4:	6838      	ldr	r0, [r7, #0]
 80060c6:	f7fa fffd 	bl	80010c4 <__aeabi_fcmple>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <LPS22HH_SetOutputDataRate_When_Enabled+0x54>
 80060d0:	2304      	movs	r3, #4
 80060d2:	e012      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80060d4:	491d      	ldr	r1, [pc, #116]	@ (800614c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>)
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f7fa fff4 	bl	80010c4 <__aeabi_fcmple>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <LPS22HH_SetOutputDataRate_When_Enabled+0x66>
 80060e2:	2305      	movs	r3, #5
 80060e4:	e009      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80060e6:	491a      	ldr	r1, [pc, #104]	@ (8006150 <LPS22HH_SetOutputDataRate_When_Enabled+0xd0>)
 80060e8:	6838      	ldr	r0, [r7, #0]
 80060ea:	f7fa ffeb 	bl	80010c4 <__aeabi_fcmple>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <LPS22HH_SetOutputDataRate_When_Enabled+0x78>
 80060f4:	2306      	movs	r3, #6
 80060f6:	e000      	b.n	80060fa <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 80060f8:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80060fa:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3320      	adds	r3, #32
 8006100:	7bfa      	ldrb	r2, [r7, #15]
 8006102:	4611      	mov	r1, r2
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f977 	bl	80063f8 <lps22hh_data_rate_set>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <LPS22HH_SetOutputDataRate_When_Enabled+0x96>
  {
    return LPS22HH_ERROR;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e00f      	b.n	8006136 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f103 0220 	add.w	r2, r3, #32
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3333      	adds	r3, #51	@ 0x33
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f000 f9b6 	bl	8006494 <lps22hh_data_rate_get>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <LPS22HH_SetOutputDataRate_When_Enabled+0xb4>
  {
    return LPS22HH_ERROR;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	e000      	b.n	8006136 <LPS22HH_SetOutputDataRate_When_Enabled+0xb6>
  }

  return LPS22HH_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	41200000 	.word	0x41200000
 8006144:	41c80000 	.word	0x41c80000
 8006148:	42480000 	.word	0x42480000
 800614c:	42960000 	.word	0x42960000
 8006150:	42c80000 	.word	0x42c80000

08006154 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800615e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006162:	6838      	ldr	r0, [r7, #0]
 8006164:	f7fa ffae 	bl	80010c4 <__aeabi_fcmple>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <LPS22HH_SetOutputDataRate_When_Disabled+0x1e>
 800616e:	2301      	movs	r3, #1
 8006170:	e02d      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006172:	491b      	ldr	r1, [pc, #108]	@ (80061e0 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 8006174:	6838      	ldr	r0, [r7, #0]
 8006176:	f7fa ffa5 	bl	80010c4 <__aeabi_fcmple>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <LPS22HH_SetOutputDataRate_When_Disabled+0x30>
 8006180:	2302      	movs	r3, #2
 8006182:	e024      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006184:	4917      	ldr	r1, [pc, #92]	@ (80061e4 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 8006186:	6838      	ldr	r0, [r7, #0]
 8006188:	f7fa ff9c 	bl	80010c4 <__aeabi_fcmple>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <LPS22HH_SetOutputDataRate_When_Disabled+0x42>
 8006192:	2303      	movs	r3, #3
 8006194:	e01b      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8006196:	4914      	ldr	r1, [pc, #80]	@ (80061e8 <LPS22HH_SetOutputDataRate_When_Disabled+0x94>)
 8006198:	6838      	ldr	r0, [r7, #0]
 800619a:	f7fa ff93 	bl	80010c4 <__aeabi_fcmple>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x54>
 80061a4:	2304      	movs	r3, #4
 80061a6:	e012      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80061a8:	4910      	ldr	r1, [pc, #64]	@ (80061ec <LPS22HH_SetOutputDataRate_When_Disabled+0x98>)
 80061aa:	6838      	ldr	r0, [r7, #0]
 80061ac:	f7fa ff8a 	bl	80010c4 <__aeabi_fcmple>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <LPS22HH_SetOutputDataRate_When_Disabled+0x66>
 80061b6:	2305      	movs	r3, #5
 80061b8:	e009      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80061ba:	490d      	ldr	r1, [pc, #52]	@ (80061f0 <LPS22HH_SetOutputDataRate_When_Disabled+0x9c>)
 80061bc:	6838      	ldr	r0, [r7, #0]
 80061be:	f7fa ff81 	bl	80010c4 <__aeabi_fcmple>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <LPS22HH_SetOutputDataRate_When_Disabled+0x78>
 80061c8:	2306      	movs	r3, #6
 80061ca:	e000      	b.n	80061ce <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 80061cc:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	41200000 	.word	0x41200000
 80061e4:	41c80000 	.word	0x41c80000
 80061e8:	42480000 	.word	0x42480000
 80061ec:	42960000 	.word	0x42960000
 80061f0:	42c80000 	.word	0x42c80000

080061f4 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d00b      	beq.n	800621c <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3320      	adds	r3, #32
 8006208:	2111      	movs	r1, #17
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fa92 	bl	8006734 <lps22hh_i3c_interface_set>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	e034      	b.n	8006286 <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3320      	adds	r3, #32
 8006220:	2110      	movs	r1, #16
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f8e8 	bl	80063f8 <lps22hh_data_rate_set>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
 8006232:	e028      	b.n	8006286 <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3320      	adds	r3, #32
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fa54 	bl	80066e8 <lps22hh_lp_bandwidth_set>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	e01c      	b.n	8006286 <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3320      	adds	r3, #32
 8006250:	2101      	movs	r1, #1
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f8aa 	bl	80063ac <lps22hh_block_data_update_set>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 800625e:	f04f 33ff 	mov.w	r3, #4294967295
 8006262:	e010      	b.n	8006286 <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3320      	adds	r3, #32
 8006268:	2101      	movs	r1, #1
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fa16 	bl	800669c <lps22hh_auto_increment_set>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 8006276:	f04f 33ff 	mov.w	r3, #4294967295
 800627a:	e004      	b.n	8006286 <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2203      	movs	r2, #3
 8006280:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22HH_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800628e:	b590      	push	{r4, r7, lr}
 8006290:	b087      	sub	sp, #28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	461a      	mov	r2, r3
 800629a:	460b      	mov	r3, r1
 800629c:	72fb      	strb	r3, [r7, #11]
 800629e:	4613      	mov	r3, r2
 80062a0:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	695c      	ldr	r4, [r3, #20]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	7b1b      	ldrb	r3, [r3, #12]
 80062ae:	4618      	mov	r0, r3
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	b299      	uxth	r1, r3
 80062b4:	893b      	ldrh	r3, [r7, #8]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	47a0      	blx	r4
 80062ba:	4603      	mov	r3, r0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd90      	pop	{r4, r7, pc}

080062c4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	607a      	str	r2, [r7, #4]
 80062ce:	461a      	mov	r2, r3
 80062d0:	460b      	mov	r3, r1
 80062d2:	72fb      	strb	r3, [r7, #11]
 80062d4:	4613      	mov	r3, r2
 80062d6:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	691c      	ldr	r4, [r3, #16]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	7b1b      	ldrb	r3, [r3, #12]
 80062e4:	4618      	mov	r0, r3
 80062e6:	7afb      	ldrb	r3, [r7, #11]
 80062e8:	b299      	uxth	r1, r3
 80062ea:	893b      	ldrh	r3, [r7, #8]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	47a0      	blx	r4
 80062f0:	4603      	mov	r3, r0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd90      	pop	{r4, r7, pc}

080062fa <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80062fa:	b590      	push	{r4, r7, lr}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	461a      	mov	r2, r3
 8006306:	460b      	mov	r3, r1
 8006308:	72fb      	strb	r3, [r7, #11]
 800630a:	4613      	mov	r3, r2
 800630c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685c      	ldr	r4, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68d8      	ldr	r0, [r3, #12]
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	7af9      	ldrb	r1, [r7, #11]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	47a0      	blx	r4
 800631e:	6178      	str	r0, [r7, #20]

  return ret;
 8006320:	697b      	ldr	r3, [r7, #20]
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}

0800632a <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800632a:	b590      	push	{r4, r7, lr}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	461a      	mov	r2, r3
 8006336:	460b      	mov	r3, r1
 8006338:	72fb      	strb	r3, [r7, #11]
 800633a:	4613      	mov	r3, r2
 800633c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681c      	ldr	r4, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68d8      	ldr	r0, [r3, #12]
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	7af9      	ldrb	r1, [r7, #11]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	47a0      	blx	r4
 800634e:	6178      	str	r0, [r7, #20]

  return ret;
 8006350:	697b      	ldr	r3, [r7, #20]
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}

0800635a <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fa fcae 	bl	8000cc4 <__aeabi_ui2f>
 8006368:	4603      	mov	r3, r0
 800636a:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa fdb4 	bl	8000edc <__aeabi_fdiv>
 8006374:	4603      	mov	r3, r0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800638a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fa fc9c 	bl	8000ccc <__aeabi_i2f>
 8006394:	4603      	mov	r3, r0
 8006396:	4904      	ldr	r1, [pc, #16]	@ (80063a8 <lps22hh_from_lsb_to_celsius+0x28>)
 8006398:	4618      	mov	r0, r3
 800639a:	f7fa fd9f 	bl	8000edc <__aeabi_fdiv>
 800639e:	4603      	mov	r3, r0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	42c80000 	.word	0x42c80000

080063ac <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80063b8:	f107 0208 	add.w	r2, r7, #8
 80063bc:	2301      	movs	r3, #1
 80063be:	2110      	movs	r1, #16
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff9a 	bl	80062fa <lps22hh_read_reg>
 80063c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10f      	bne.n	80063ee <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	7a3b      	ldrb	r3, [r7, #8]
 80063d8:	f362 0341 	bfi	r3, r2, #1, #1
 80063dc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80063de:	f107 0208 	add.w	r2, r7, #8
 80063e2:	2301      	movs	r3, #1
 80063e4:	2110      	movs	r1, #16
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ff9f 	bl	800632a <lps22hh_write_reg>
 80063ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063ee:	68fb      	ldr	r3, [r7, #12]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006404:	f107 0210 	add.w	r2, r7, #16
 8006408:	2301      	movs	r3, #1
 800640a:	2110      	movs	r1, #16
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff74 	bl	80062fa <lps22hh_read_reg>
 8006412:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d107      	bne.n	800642a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800641a:	f107 020c 	add.w	r2, r7, #12
 800641e:	2301      	movs	r3, #1
 8006420:	2111      	movs	r1, #17
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff ff69 	bl	80062fa <lps22hh_read_reg>
 8006428:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10f      	bne.n	8006450 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	b2da      	uxtb	r2, r3
 8006438:	7c3b      	ldrb	r3, [r7, #16]
 800643a:	f362 1306 	bfi	r3, r2, #4, #3
 800643e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006440:	f107 0210 	add.w	r2, r7, #16
 8006444:	2301      	movs	r3, #1
 8006446:	2110      	movs	r1, #16
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ff6e 	bl	800632a <lps22hh_write_reg>
 800644e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d119      	bne.n	800648a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	7b3b      	ldrb	r3, [r7, #12]
 8006462:	f362 0341 	bfi	r3, r2, #1, #1
 8006466:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	08db      	lsrs	r3, r3, #3
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	7b3b      	ldrb	r3, [r7, #12]
 8006474:	f362 0300 	bfi	r3, r2, #0, #1
 8006478:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800647a:	f107 020c 	add.w	r2, r7, #12
 800647e:	2301      	movs	r3, #1
 8006480:	2111      	movs	r1, #17
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff ff51 	bl	800632a <lps22hh_write_reg>
 8006488:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800648a:	697b      	ldr	r3, [r7, #20]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800649e:	f107 0210 	add.w	r2, r7, #16
 80064a2:	2301      	movs	r3, #1
 80064a4:	2110      	movs	r1, #16
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff ff27 	bl	80062fa <lps22hh_read_reg>
 80064ac:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80064b4:	f107 020c 	add.w	r2, r7, #12
 80064b8:	2301      	movs	r3, #1
 80064ba:	2111      	movs	r1, #17
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff ff1c 	bl	80062fa <lps22hh_read_reg>
 80064c2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8086 	bne.w	80065d8 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80064cc:	f107 020c 	add.w	r2, r7, #12
 80064d0:	2301      	movs	r3, #1
 80064d2:	2111      	movs	r1, #17
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff ff10 	bl	80062fa <lps22hh_read_reg>
 80064da:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80064dc:	7b3b      	ldrb	r3, [r7, #12]
 80064de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	7b3b      	ldrb	r3, [r7, #12]
 80064e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
             ctrl_reg1.odr))
 80064f2:	7c3a      	ldrb	r2, [r7, #16]
 80064f4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80064f8:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 80064fa:	4413      	add	r3, r2
 80064fc:	2b15      	cmp	r3, #21
 80064fe:	d867      	bhi.n	80065d0 <lps22hh_data_rate_get+0x13c>
 8006500:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <lps22hh_data_rate_get+0x74>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006561 	.word	0x08006561
 800650c:	08006571 	.word	0x08006571
 8006510:	08006579 	.word	0x08006579
 8006514:	08006581 	.word	0x08006581
 8006518:	08006589 	.word	0x08006589
 800651c:	08006591 	.word	0x08006591
 8006520:	080065c1 	.word	0x080065c1
 8006524:	080065c9 	.word	0x080065c9
 8006528:	08006569 	.word	0x08006569
 800652c:	080065d1 	.word	0x080065d1
 8006530:	080065d1 	.word	0x080065d1
 8006534:	080065d1 	.word	0x080065d1
 8006538:	080065d1 	.word	0x080065d1
 800653c:	080065d1 	.word	0x080065d1
 8006540:	080065d1 	.word	0x080065d1
 8006544:	080065d1 	.word	0x080065d1
 8006548:	080065d1 	.word	0x080065d1
 800654c:	08006599 	.word	0x08006599
 8006550:	080065a1 	.word	0x080065a1
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065b9 	.word	0x080065b9
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
        break;
 8006566:	e037      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2208      	movs	r2, #8
 800656c:	701a      	strb	r2, [r3, #0]
        break;
 800656e:	e033      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2201      	movs	r2, #1
 8006574:	701a      	strb	r2, [r3, #0]
        break;
 8006576:	e02f      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2202      	movs	r2, #2
 800657c:	701a      	strb	r2, [r3, #0]
        break;
 800657e:	e02b      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2203      	movs	r2, #3
 8006584:	701a      	strb	r2, [r3, #0]
        break;
 8006586:	e027      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	2204      	movs	r2, #4
 800658c:	701a      	strb	r2, [r3, #0]
        break;
 800658e:	e023      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2205      	movs	r2, #5
 8006594:	701a      	strb	r2, [r3, #0]
        break;
 8006596:	e01f      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2211      	movs	r2, #17
 800659c:	701a      	strb	r2, [r3, #0]
        break;
 800659e:	e01b      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2212      	movs	r2, #18
 80065a4:	701a      	strb	r2, [r3, #0]
        break;
 80065a6:	e017      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2213      	movs	r2, #19
 80065ac:	701a      	strb	r2, [r3, #0]
        break;
 80065ae:	e013      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2214      	movs	r2, #20
 80065b4:	701a      	strb	r2, [r3, #0]
        break;
 80065b6:	e00f      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2215      	movs	r2, #21
 80065bc:	701a      	strb	r2, [r3, #0]
        break;
 80065be:	e00b      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2206      	movs	r2, #6
 80065c4:	701a      	strb	r2, [r3, #0]
        break;
 80065c6:	e007      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2207      	movs	r2, #7
 80065cc:	701a      	strb	r2, [r3, #0]
        break;
 80065ce:	e003      	b.n	80065d8 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
        break;
 80065d6:	bf00      	nop
    }
  }

  return ret;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop

080065e4 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80065ee:	f107 0208 	add.w	r2, r7, #8
 80065f2:	2303      	movs	r3, #3
 80065f4:	2128      	movs	r1, #40	@ 0x28
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fe7f 	bl	80062fa <lps22hh_read_reg>
 80065fc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80065fe:	7abb      	ldrb	r3, [r7, #10]
 8006600:	461a      	mov	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	7a7a      	ldrb	r2, [r7, #9]
 800660e:	441a      	add	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	7a3a      	ldrb	r2, [r7, #8]
 800661c:	441a      	add	r2, r3
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	021a      	lsls	r2, r3, #8
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]

  return ret;
 800662c:	68fb      	ldr	r3, [r7, #12]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8006640:	f107 0208 	add.w	r2, r7, #8
 8006644:	2302      	movs	r3, #2
 8006646:	212b      	movs	r1, #43	@ 0x2b
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fe56 	bl	80062fa <lps22hh_read_reg>
 800664e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8006650:	7a7b      	ldrb	r3, [r7, #9]
 8006652:	b21a      	sxth	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800665e:	b29b      	uxth	r3, r3
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	b29b      	uxth	r3, r3
 8006664:	7a3a      	ldrb	r2, [r7, #8]
 8006666:	4413      	add	r3, r2
 8006668:	b29b      	uxth	r3, r3
 800666a:	b21a      	sxth	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006670:	68fb      	ldr	r3, [r7, #12]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006684:	2301      	movs	r3, #1
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	210f      	movs	r1, #15
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fe35 	bl	80062fa <lps22hh_read_reg>
 8006690:	60f8      	str	r0, [r7, #12]

  return ret;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80066a8:	f107 0208 	add.w	r2, r7, #8
 80066ac:	2301      	movs	r3, #1
 80066ae:	2111      	movs	r1, #17
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fe22 	bl	80062fa <lps22hh_read_reg>
 80066b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10f      	bne.n	80066de <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	7a3b      	ldrb	r3, [r7, #8]
 80066c8:	f362 1304 	bfi	r3, r2, #4, #1
 80066cc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80066ce:	f107 0208 	add.w	r2, r7, #8
 80066d2:	2301      	movs	r3, #1
 80066d4:	2111      	movs	r1, #17
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fe27 	bl	800632a <lps22hh_write_reg>
 80066dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80066f4:	f107 0208 	add.w	r2, r7, #8
 80066f8:	2301      	movs	r3, #1
 80066fa:	2110      	movs	r1, #16
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fdfc 	bl	80062fa <lps22hh_read_reg>
 8006702:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	b2da      	uxtb	r2, r3
 8006712:	7a3b      	ldrb	r3, [r7, #8]
 8006714:	f362 0383 	bfi	r3, r2, #2, #2
 8006718:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800671a:	f107 0208 	add.w	r2, r7, #8
 800671e:	2301      	movs	r3, #1
 8006720:	2110      	movs	r1, #16
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7ff fe01 	bl	800632a <lps22hh_write_reg>
 8006728:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006740:	f107 0208 	add.w	r2, r7, #8
 8006744:	2301      	movs	r3, #1
 8006746:	210e      	movs	r1, #14
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff fdd6 	bl	80062fa <lps22hh_read_reg>
 800674e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d118      	bne.n	8006788 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	b2da      	uxtb	r2, r3
 800675e:	7a3b      	ldrb	r3, [r7, #8]
 8006760:	f362 0341 	bfi	r3, r2, #1, #1
 8006764:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	b2da      	uxtb	r2, r3
 8006770:	7a3b      	ldrb	r3, [r7, #8]
 8006772:	f362 13c7 	bfi	r3, r2, #7, #1
 8006776:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8006778:	f107 0208 	add.w	r2, r7, #8
 800677c:	2301      	movs	r3, #1
 800677e:	210e      	movs	r1, #14
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff fdd2 	bl	800632a <lps22hh_write_reg>
 8006786:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e051      	b.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	7b1a      	ldrb	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006860 <LSM6DSO_RegisterBusIO+0xcc>)
 80067ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <LSM6DSO_RegisterBusIO+0xd0>)
 80067f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e020      	b.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4798      	blx	r3
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e016      	b.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d112      	bne.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10d      	bne.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006838:	230c      	movs	r3, #12
 800683a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	461a      	mov	r2, r3
 8006840:	2112      	movs	r1, #18
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 ff55 	bl	80076f2 <LSM6DSO_Write_Reg>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 800684e:	f04f 33ff 	mov.w	r3, #4294967295
 8006852:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006854:	68fb      	ldr	r3, [r7, #12]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	08007b0d 	.word	0x08007b0d
 8006864:	08007b43 	.word	0x08007b43

08006868 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b03      	cmp	r3, #3
 8006876:	d00b      	beq.n	8006890 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3320      	adds	r3, #32
 800687c:	2180      	movs	r1, #128	@ 0x80
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fe38 	bl	80084f4 <lsm6dso_i3c_disable_set>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 800688a:	f04f 33ff 	mov.w	r3, #4294967295
 800688e:	e060      	b.n	8006952 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3320      	adds	r3, #32
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f001 fe06 	bl	80084a8 <lsm6dso_auto_increment_set>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	e054      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3320      	adds	r3, #32
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fd16 	bl	80082e0 <lsm6dso_block_data_update_set>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	e048      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3320      	adds	r3, #32
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 fe5c 	bl	8008584 <lsm6dso_fifo_mode_set>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295
 80068d6:	e03c      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2204      	movs	r2, #4
 80068dc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3320      	adds	r3, #32
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f9d4 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e02c      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3320      	adds	r3, #32
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 f96a 	bl	8007bd8 <lsm6dso_xl_full_scale_set>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
 800690e:	e020      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2204      	movs	r2, #4
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3320      	adds	r3, #32
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fb82 	bl	8008028 <lsm6dso_gy_data_rate_set>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	e010      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3320      	adds	r3, #32
 8006934:	2106      	movs	r1, #6
 8006936:	4618      	mov	r0, r3
 8006938:	f001 fb0e 	bl	8007f58 <lsm6dso_gy_full_scale_set>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
 8006946:	e004      	b.n	8006952 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f888 	bl	8006a78 <LSM6DSO_ACC_Disable>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295
 8006972:	e015      	b.n	80069a0 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fc28 	bl	80071ca <LSM6DSO_GYRO_Disable>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006980:	f04f 33ff 	mov.w	r3, #4294967295
 8006984:	e00c      	b.n	80069a0 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3320      	adds	r3, #32
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 fd64 	bl	8008486 <lsm6dso_device_id_get>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295
 80069c8:	e000      	b.n	80069cc <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2200      	movs	r2, #0
 80069ee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80069fc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2210      	movs	r2, #16
 8006a02:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	4a07      	ldr	r2, [pc, #28]	@ (8006a2c <LSM6DSO_GetCapabilities+0x58>)
 8006a0e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	4a06      	ldr	r2, [pc, #24]	@ (8006a2c <LSM6DSO_GetCapabilities+0x58>)
 8006a14:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	45d02000 	.word	0x45d02000

08006a30 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e014      	b.n	8006a70 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f103 0220 	add.w	r2, r3, #32
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006a52:	4619      	mov	r1, r3
 8006a54:	4610      	mov	r0, r2
 8006a56:	f001 f91d 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	e004      	b.n	8006a70 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e01f      	b.n	8006ace <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f103 0220 	add.w	r2, r3, #32
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3333      	adds	r3, #51	@ 0x33
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f001 f9f4 	bl	8007e88 <lsm6dso_xl_data_rate_get>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	e010      	b.n	8006ace <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3320      	adds	r3, #32
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 f8ee 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	e004      	b.n	8006ace <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3320      	adds	r3, #32
 8006aea:	f107 020b 	add.w	r2, r7, #11
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f897 	bl	8007c24 <lsm6dso_xl_full_scale_get>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	e023      	b.n	8006b4a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d81b      	bhi.n	8006b40 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006b08:	a201      	add	r2, pc, #4	@ (adr r2, 8006b10 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b31 	.word	0x08006b31
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	4a0c      	ldr	r2, [pc, #48]	@ (8006b54 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006b24:	601a      	str	r2, [r3, #0]
      break;
 8006b26:	e00f      	b.n	8006b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b58 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006b2c:	601a      	str	r2, [r3, #0]
      break;
 8006b2e:	e00b      	b.n	8006b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	4a0a      	ldr	r2, [pc, #40]	@ (8006b5c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006b34:	601a      	str	r2, [r3, #0]
      break;
 8006b36:	e007      	b.n	8006b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006b3c:	601a      	str	r2, [r3, #0]
      break;
 8006b3e:	e003      	b.n	8006b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295
 8006b44:	60fb      	str	r3, [r7, #12]
      break;
 8006b46:	bf00      	nop
  }

  return ret;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	3d79db23 	.word	0x3d79db23
 8006b58:	3df9db23 	.word	0x3df9db23
 8006b5c:	3e79db23 	.word	0x3e79db23
 8006b60:	3ef9db23 	.word	0x3ef9db23

08006b64 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3320      	adds	r3, #32
 8006b76:	f107 020b 	add.w	r2, r7, #11
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f983 	bl	8007e88 <lsm6dso_xl_data_rate_get>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	e054      	b.n	8006c38 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	2b0b      	cmp	r3, #11
 8006b92:	d84c      	bhi.n	8006c2e <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006b94:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006bdf 	.word	0x08006bdf
 8006ba4:	08006be7 	.word	0x08006be7
 8006ba8:	08006bef 	.word	0x08006bef
 8006bac:	08006bf7 	.word	0x08006bf7
 8006bb0:	08006bff 	.word	0x08006bff
 8006bb4:	08006c07 	.word	0x08006c07
 8006bb8:	08006c0f 	.word	0x08006c0f
 8006bbc:	08006c17 	.word	0x08006c17
 8006bc0:	08006c1f 	.word	0x08006c1f
 8006bc4:	08006c27 	.word	0x08006c27
 8006bc8:	08006bd7 	.word	0x08006bd7
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
      break;
 8006bd4:	e02f      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	@ (8006c40 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006bda:	601a      	str	r2, [r3, #0]
      break;
 8006bdc:	e02b      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	4a18      	ldr	r2, [pc, #96]	@ (8006c44 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006be2:	601a      	str	r2, [r3, #0]
      break;
 8006be4:	e027      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	4a17      	ldr	r2, [pc, #92]	@ (8006c48 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8006bea:	601a      	str	r2, [r3, #0]
      break;
 8006bec:	e023      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	4a16      	ldr	r2, [pc, #88]	@ (8006c4c <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006bf2:	601a      	str	r2, [r3, #0]
      break;
 8006bf4:	e01f      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	4a15      	ldr	r2, [pc, #84]	@ (8006c50 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006bfa:	601a      	str	r2, [r3, #0]
      break;
 8006bfc:	e01b      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	4a14      	ldr	r2, [pc, #80]	@ (8006c54 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8006c02:	601a      	str	r2, [r3, #0]
      break;
 8006c04:	e017      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	4a13      	ldr	r2, [pc, #76]	@ (8006c58 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006c0a:	601a      	str	r2, [r3, #0]
      break;
 8006c0c:	e013      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8006c12:	601a      	str	r2, [r3, #0]
      break;
 8006c14:	e00f      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006c1a:	601a      	str	r2, [r3, #0]
      break;
 8006c1c:	e00b      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4a10      	ldr	r2, [pc, #64]	@ (8006c64 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8006c22:	601a      	str	r2, [r3, #0]
      break;
 8006c24:	e007      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	4a0f      	ldr	r2, [pc, #60]	@ (8006c68 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006c2a:	601a      	str	r2, [r3, #0]
      break;
 8006c2c:	e003      	b.n	8006c36 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c32:	60fb      	str	r3, [r7, #12]
      break;
 8006c34:	bf00      	nop
  }

  return ret;
 8006c36:	68fb      	ldr	r3, [r7, #12]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	3fcccccd 	.word	0x3fcccccd
 8006c44:	41480000 	.word	0x41480000
 8006c48:	41d00000 	.word	0x41d00000
 8006c4c:	42500000 	.word	0x42500000
 8006c50:	42d00000 	.word	0x42d00000
 8006c54:	43500000 	.word	0x43500000
 8006c58:	43d08000 	.word	0x43d08000
 8006c5c:	44504000 	.word	0x44504000
 8006c60:	44d06000 	.word	0x44d06000
 8006c64:	45505000 	.word	0x45505000
 8006c68:	45d05800 	.word	0x45d05800

08006c6c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006c76:	2200      	movs	r2, #0
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f806 	bl	8006c8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	@ 0x30
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	f000 80e6 	beq.w	8006e76 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ea>
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	f300 815d 	bgt.w	8006f6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d072      	beq.n	8006d9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8006cb8:	e157      	b.n	8006f6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2de>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f103 0020 	add.w	r0, r3, #32
 8006cc0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	2114      	movs	r1, #20
 8006cc8:	f000 ff56 	bl	8007b78 <lsm6dso_read_reg>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	e164      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8006cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cdc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d025      	beq.n	8006d32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d10b      	bne.n	8006d08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3320      	adds	r3, #32
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ffcc 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 8006d02:	f04f 33ff 	mov.w	r3, #4294967295
 8006d06:	e14c      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8006d08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d0c:	f36f 13c7 	bfc	r3, #7, #1
 8006d10:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f103 0020 	add.w	r0, r3, #32
 8006d1a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006d1e:	2301      	movs	r3, #1
 8006d20:	2114      	movs	r1, #20
 8006d22:	f000 ff41 	bl	8007ba8 <lsm6dso_write_reg>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa6>
        {
          return LSM6DSO_ERROR;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d30:	e137      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f103 0020 	add.w	r0, r3, #32
 8006d38:	f107 0220 	add.w	r2, r7, #32
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	2115      	movs	r1, #21
 8006d40:	f000 ff1a 	bl	8007b78 <lsm6dso_read_reg>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
      {
        return LSM6DSO_ERROR;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	e128      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8006d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d014      	beq.n	8006d88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
      {
        val2.xl_hm_mode = 0U;
 8006d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d62:	f36f 1304 	bfc	r3, #4, #1
 8006d66:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f103 0020 	add.w	r0, r3, #32
 8006d70:	f107 0220 	add.w	r2, r7, #32
 8006d74:	2301      	movs	r3, #1
 8006d76:	2115      	movs	r1, #21
 8006d78:	f000 ff16 	bl	8007ba8 <lsm6dso_write_reg>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfc>
        {
          return LSM6DSO_ERROR;
 8006d82:	f04f 33ff 	mov.w	r3, #4294967295
 8006d86:	e10c      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006d88:	4988      	ldr	r1, [pc, #544]	@ (8006fac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8006d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8c:	f7fa f990 	bl	80010b0 <__aeabi_fcmplt>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d100      	bne.n	8006d98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8006d96:	e0ec      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 12.5f;
 8006d98:	4b84      	ldr	r3, [pc, #528]	@ (8006fac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8006d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9c:	e0e9      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f103 0020 	add.w	r0, r3, #32
 8006da4:	f107 021c 	add.w	r2, r7, #28
 8006da8:	2301      	movs	r3, #1
 8006daa:	2114      	movs	r1, #20
 8006dac:	f000 fee4 	bl	8007b78 <lsm6dso_read_reg>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 8006db6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dba:	e0f2      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en != 0U)
 8006dbc:	7f3b      	ldrb	r3, [r7, #28]
 8006dbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d023      	beq.n	8006e10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d10b      	bne.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3320      	adds	r3, #32
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 ff5b 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 8006de4:	f04f 33ff 	mov.w	r3, #4294967295
 8006de8:	e0db      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 0;
 8006dea:	7f3b      	ldrb	r3, [r7, #28]
 8006dec:	f36f 13c7 	bfc	r3, #7, #1
 8006df0:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f103 0020 	add.w	r0, r3, #32
 8006df8:	f107 021c 	add.w	r2, r7, #28
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	2114      	movs	r1, #20
 8006e00:	f000 fed2 	bl	8007ba8 <lsm6dso_write_reg>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0e:	e0c8      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f103 0020 	add.w	r0, r3, #32
 8006e16:	f107 0218 	add.w	r2, r7, #24
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	2115      	movs	r1, #21
 8006e1e:	f000 feab 	bl	8007b78 <lsm6dso_read_reg>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2c:	e0b9      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode == 0U)
 8006e2e:	7e3b      	ldrb	r3, [r7, #24]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d112      	bne.n	8006e60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 8006e3a:	7e3b      	ldrb	r3, [r7, #24]
 8006e3c:	f043 0310 	orr.w	r3, r3, #16
 8006e40:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f103 0020 	add.w	r0, r3, #32
 8006e48:	f107 0218 	add.w	r2, r7, #24
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	2115      	movs	r1, #21
 8006e50:	f000 feaa 	bl	8007ba8 <lsm6dso_write_reg>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	e0a0      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006e60:	4953      	ldr	r1, [pc, #332]	@ (8006fb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e64:	f7fa f942 	bl	80010ec <__aeabi_fcmpgt>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d100      	bne.n	8006e70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      {
        newOdr = 208.0f;
      }
      break;
 8006e6e:	e080      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8006e70:	4b4f      	ldr	r3, [pc, #316]	@ (8006fb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e74:	e07d      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f103 0020 	add.w	r0, r3, #32
 8006e7c:	f107 0210 	add.w	r2, r7, #16
 8006e80:	2301      	movs	r3, #1
 8006e82:	2115      	movs	r1, #21
 8006e84:	f000 fe78 	bl	8007b78 <lsm6dso_read_reg>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x208>
      {
        return LSM6DSO_ERROR;
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	e086      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val2.xl_hm_mode != 0U)
 8006e94:	7c3b      	ldrb	r3, [r7, #16]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d012      	beq.n	8006ec6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
      {
        val2.xl_hm_mode = 0U;
 8006ea0:	7c3b      	ldrb	r3, [r7, #16]
 8006ea2:	f36f 1304 	bfc	r3, #4, #1
 8006ea6:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f103 0020 	add.w	r0, r3, #32
 8006eae:	f107 0210 	add.w	r2, r7, #16
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	2115      	movs	r1, #21
 8006eb6:	f000 fe77 	bl	8007ba8 <lsm6dso_write_reg>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23a>
        {
          return LSM6DSO_ERROR;
 8006ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec4:	e06d      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d108      	bne.n	8006ee2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f97a 	bl	80071ca <LSM6DSO_GYRO_Disable>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x256>
        {
          return LSM6DSO_ERROR;
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	e05f      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f103 0020 	add.w	r0, r3, #32
 8006ee8:	f107 0214 	add.w	r2, r7, #20
 8006eec:	2301      	movs	r3, #1
 8006eee:	2114      	movs	r1, #20
 8006ef0:	f000 fe42 	bl	8007b78 <lsm6dso_read_reg>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x274>
      {
        return LSM6DSO_ERROR;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	e050      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
      }

      if (val1.xl_ulp_en == 0U)
 8006f00:	7d3b      	ldrb	r3, [r7, #20]
 8006f02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d123      	bne.n	8006f54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d10b      	bne.n	8006f2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3320      	adds	r3, #32
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 feb9 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a2>
          {
            return LSM6DSO_ERROR;
 8006f28:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2c:	e039      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
          }
        }

        val1.xl_ulp_en = 1U;
 8006f2e:	7d3b      	ldrb	r3, [r7, #20]
 8006f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f34:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f103 0020 	add.w	r0, r3, #32
 8006f3c:	f107 0214 	add.w	r2, r7, #20
 8006f40:	2301      	movs	r3, #1
 8006f42:	2114      	movs	r1, #20
 8006f44:	f000 fe30 	bl	8007ba8 <lsm6dso_write_reg>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2c8>
        {
          return LSM6DSO_ERROR;
 8006f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f52:	e026      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006f54:	4916      	ldr	r1, [pc, #88]	@ (8006fb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f58:	f7fa f8c8 	bl	80010ec <__aeabi_fcmpgt>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d100      	bne.n	8006f64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      {
        newOdr = 208.0f;
      }
      break;
 8006f62:	e006      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
        newOdr = 208.0f;
 8006f64:	4b12      	ldr	r3, [pc, #72]	@ (8006fb0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x324>)
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f68:	e003      	b.n	8006f72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006f70:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d102      	bne.n	8006f80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
  {
    return LSM6DSO_ERROR;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	e010      	b.n	8006fa2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x316>
  }

  if (pObj->acc_is_enabled == 1U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d105      	bne.n	8006f96 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fbcb 	bl	8007728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006f92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006f94:	e004      	b.n	8006fa0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fc4d 	bl	8007838 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006f9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3730      	adds	r7, #48	@ 0x30
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	41480000 	.word	0x41480000
 8006fb0:	43500000 	.word	0x43500000

08006fb4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3320      	adds	r3, #32
 8006fc6:	f107 020b 	add.w	r2, r7, #11
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fe29 	bl	8007c24 <lsm6dso_xl_full_scale_get>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fdc:	e023      	b.n	8007026 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d81b      	bhi.n	800701c <LSM6DSO_ACC_GetFullScale+0x68>
 8006fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <LSM6DSO_ACC_GetFullScale+0x38>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	0800700d 	.word	0x0800700d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2202      	movs	r2, #2
 8007000:	601a      	str	r2, [r3, #0]
      break;
 8007002:	e00f      	b.n	8007024 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2204      	movs	r2, #4
 8007008:	601a      	str	r2, [r3, #0]
      break;
 800700a:	e00b      	b.n	8007024 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2208      	movs	r2, #8
 8007010:	601a      	str	r2, [r3, #0]
      break;
 8007012:	e007      	b.n	8007024 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2210      	movs	r2, #16
 8007018:	601a      	str	r2, [r3, #0]
      break;
 800701a:	e003      	b.n	8007024 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	60fb      	str	r3, [r7, #12]
      break;
 8007022:	bf00      	nop
  }

  return ret;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b02      	cmp	r3, #2
 800703e:	dd0b      	ble.n	8007058 <LSM6DSO_ACC_SetFullScale+0x28>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b04      	cmp	r3, #4
 8007044:	dd06      	ble.n	8007054 <LSM6DSO_ACC_SetFullScale+0x24>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b08      	cmp	r3, #8
 800704a:	dc01      	bgt.n	8007050 <LSM6DSO_ACC_SetFullScale+0x20>
 800704c:	2303      	movs	r3, #3
 800704e:	e004      	b.n	800705a <LSM6DSO_ACC_SetFullScale+0x2a>
 8007050:	2301      	movs	r3, #1
 8007052:	e002      	b.n	800705a <LSM6DSO_ACC_SetFullScale+0x2a>
 8007054:	2302      	movs	r3, #2
 8007056:	e000      	b.n	800705a <LSM6DSO_ACC_SetFullScale+0x2a>
 8007058:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800705a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3320      	adds	r3, #32
 8007060:	7bfa      	ldrb	r2, [r7, #15]
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fdb7 	bl	8007bd8 <lsm6dso_xl_full_scale_set>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8007070:	f04f 33ff 	mov.w	r3, #4294967295
 8007074:	e000      	b.n	8007078 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3320      	adds	r3, #32
 800708e:	f107 0208 	add.w	r2, r7, #8
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f991 	bl	80083bc <lsm6dso_acceleration_raw_get>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	e00c      	b.n	80070c0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80070a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80070ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80070b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3320      	adds	r3, #32
 80070dc:	f107 0210 	add.w	r2, r7, #16
 80070e0:	4611      	mov	r1, r2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 f96a 	bl	80083bc <lsm6dso_acceleration_raw_get>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	e042      	b.n	800717a <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80070f4:	f107 030c 	add.w	r3, r7, #12
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fcec 	bl	8006ad8 <LSM6DSO_ACC_GetSensitivity>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	e036      	b.n	800717a <LSM6DSO_ACC_GetAxes+0xb2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800710c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007110:	4618      	mov	r0, r3
 8007112:	f7f9 fddb 	bl	8000ccc <__aeabi_i2f>
 8007116:	4602      	mov	r2, r0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7f9 fe29 	bl	8000d74 <__aeabi_fmul>
 8007122:	4603      	mov	r3, r0
 8007124:	4618      	mov	r0, r3
 8007126:	f7f9 ffeb 	bl	8001100 <__aeabi_f2iz>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007130:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007134:	4618      	mov	r0, r3
 8007136:	f7f9 fdc9 	bl	8000ccc <__aeabi_i2f>
 800713a:	4602      	mov	r2, r0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7f9 fe17 	bl	8000d74 <__aeabi_fmul>
 8007146:	4603      	mov	r3, r0
 8007148:	4618      	mov	r0, r3
 800714a:	f7f9 ffd9 	bl	8001100 <__aeabi_f2iz>
 800714e:	4602      	mov	r2, r0
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007154:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007158:	4618      	mov	r0, r3
 800715a:	f7f9 fdb7 	bl	8000ccc <__aeabi_i2f>
 800715e:	4602      	mov	r2, r0
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7f9 fe05 	bl	8000d74 <__aeabi_fmul>
 800716a:	4603      	mov	r3, r0
 800716c:	4618      	mov	r0, r3
 800716e:	f7f9 ffc7 	bl	8001100 <__aeabi_f2iz>
 8007172:	4602      	mov	r2, r0
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	e014      	b.n	80071c2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f103 0220 	add.w	r2, r3, #32
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	f000 ff3e 	bl	8008028 <lsm6dso_gy_data_rate_set>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80071b2:	f04f 33ff 	mov.w	r3, #4294967295
 80071b6:	e004      	b.n	80071c2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e01f      	b.n	8007220 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f103 0220 	add.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3334      	adds	r3, #52	@ 0x34
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f001 f815 	bl	800821c <lsm6dso_gy_data_rate_get>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	e010      	b.n	8007220 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3320      	adds	r3, #32
 8007202:	2100      	movs	r1, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f000 ff0f 	bl	8008028 <lsm6dso_gy_data_rate_set>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8007210:	f04f 33ff 	mov.w	r3, #4294967295
 8007214:	e004      	b.n	8007220 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3320      	adds	r3, #32
 800723a:	f107 020b 	add.w	r2, r7, #11
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 feaf 	bl	8007fa4 <lsm6dso_gy_full_scale_get>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800724c:	f04f 33ff 	mov.w	r3, #4294967295
 8007250:	e02d      	b.n	80072ae <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d825      	bhi.n	80072a4 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8007258:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007285 	.word	0x08007285
 8007264:	0800727d 	.word	0x0800727d
 8007268:	0800728d 	.word	0x0800728d
 800726c:	080072a5 	.word	0x080072a5
 8007270:	08007295 	.word	0x08007295
 8007274:	080072a5 	.word	0x080072a5
 8007278:	0800729d 	.word	0x0800729d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	4a0e      	ldr	r2, [pc, #56]	@ (80072b8 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8007280:	601a      	str	r2, [r3, #0]
      break;
 8007282:	e013      	b.n	80072ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4a0d      	ldr	r2, [pc, #52]	@ (80072bc <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8007288:	601a      	str	r2, [r3, #0]
      break;
 800728a:	e00f      	b.n	80072ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	4a0c      	ldr	r2, [pc, #48]	@ (80072c0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8007290:	601a      	str	r2, [r3, #0]
      break;
 8007292:	e00b      	b.n	80072ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	4a0b      	ldr	r2, [pc, #44]	@ (80072c4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8007298:	601a      	str	r2, [r3, #0]
      break;
 800729a:	e007      	b.n	80072ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	4a0a      	ldr	r2, [pc, #40]	@ (80072c8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80072a0:	601a      	str	r2, [r3, #0]
      break;
 80072a2:	e003      	b.n	80072ac <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	60fb      	str	r3, [r7, #12]
      break;
 80072aa:	bf00      	nop
  }

  return ret;
 80072ac:	68fb      	ldr	r3, [r7, #12]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	408c0000 	.word	0x408c0000
 80072bc:	410c0000 	.word	0x410c0000
 80072c0:	418c0000 	.word	0x418c0000
 80072c4:	420c0000 	.word	0x420c0000
 80072c8:	428c0000 	.word	0x428c0000

080072cc <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3320      	adds	r3, #32
 80072de:	f107 020b 	add.w	r2, r7, #11
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 ff99 	bl	800821c <lsm6dso_gy_data_rate_get>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	e04e      	b.n	8007394 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	2b0a      	cmp	r3, #10
 80072fa:	d846      	bhi.n	800738a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80072fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007331 	.word	0x08007331
 8007308:	0800733b 	.word	0x0800733b
 800730c:	08007343 	.word	0x08007343
 8007310:	0800734b 	.word	0x0800734b
 8007314:	08007353 	.word	0x08007353
 8007318:	0800735b 	.word	0x0800735b
 800731c:	08007363 	.word	0x08007363
 8007320:	0800736b 	.word	0x0800736b
 8007324:	08007373 	.word	0x08007373
 8007328:	0800737b 	.word	0x0800737b
 800732c:	08007383 	.word	0x08007383
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	601a      	str	r2, [r3, #0]
      break;
 8007338:	e02b      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	4a17      	ldr	r2, [pc, #92]	@ (800739c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800733e:	601a      	str	r2, [r3, #0]
      break;
 8007340:	e027      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	4a16      	ldr	r2, [pc, #88]	@ (80073a0 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8007346:	601a      	str	r2, [r3, #0]
      break;
 8007348:	e023      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	4a15      	ldr	r2, [pc, #84]	@ (80073a4 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 800734e:	601a      	str	r2, [r3, #0]
      break;
 8007350:	e01f      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	4a14      	ldr	r2, [pc, #80]	@ (80073a8 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8007356:	601a      	str	r2, [r3, #0]
      break;
 8007358:	e01b      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	4a13      	ldr	r2, [pc, #76]	@ (80073ac <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800735e:	601a      	str	r2, [r3, #0]
      break;
 8007360:	e017      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	4a12      	ldr	r2, [pc, #72]	@ (80073b0 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8007366:	601a      	str	r2, [r3, #0]
      break;
 8007368:	e013      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	4a11      	ldr	r2, [pc, #68]	@ (80073b4 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800736e:	601a      	str	r2, [r3, #0]
      break;
 8007370:	e00f      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	4a10      	ldr	r2, [pc, #64]	@ (80073b8 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8007376:	601a      	str	r2, [r3, #0]
      break;
 8007378:	e00b      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	4a0f      	ldr	r2, [pc, #60]	@ (80073bc <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800737e:	601a      	str	r2, [r3, #0]
      break;
 8007380:	e007      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	4a0e      	ldr	r2, [pc, #56]	@ (80073c0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8007386:	601a      	str	r2, [r3, #0]
      break;
 8007388:	e003      	b.n	8007392 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	60fb      	str	r3, [r7, #12]
      break;
 8007390:	bf00      	nop
  }

  return ret;
 8007392:	68fb      	ldr	r3, [r7, #12]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	41480000 	.word	0x41480000
 80073a0:	41d00000 	.word	0x41d00000
 80073a4:	42500000 	.word	0x42500000
 80073a8:	42d00000 	.word	0x42d00000
 80073ac:	43500000 	.word	0x43500000
 80073b0:	43d08000 	.word	0x43d08000
 80073b4:	44504000 	.word	0x44504000
 80073b8:	44d06000 	.word	0x44d06000
 80073bc:	45505000 	.word	0x45505000
 80073c0:	45d05800 	.word	0x45d05800

080073c4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80073ce:	2200      	movs	r2, #0
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f806 	bl	80073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x22>
 8007400:	2b01      	cmp	r3, #1
 8007402:	d028      	beq.n	8007456 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x72>
 8007404:	e05a      	b.n	80074bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f103 0020 	add.w	r0, r3, #32
 800740c:	f107 0214 	add.w	r2, r7, #20
 8007410:	2301      	movs	r3, #1
 8007412:	2116      	movs	r1, #22
 8007414:	f000 fbb0 	bl	8007b78 <lsm6dso_read_reg>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	e068      	b.n	80074f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode != 0U)
 8007424:	7d3b      	ldrb	r3, [r7, #20]
 8007426:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d049      	beq.n	80074c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
      {
        val1.g_hm_mode = 0U;
 8007430:	7d3b      	ldrb	r3, [r7, #20]
 8007432:	f36f 13c7 	bfc	r3, #7, #1
 8007436:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f103 0020 	add.w	r0, r3, #32
 800743e:	f107 0214 	add.w	r2, r7, #20
 8007442:	2301      	movs	r3, #1
 8007444:	2116      	movs	r1, #22
 8007446:	f000 fbaf 	bl	8007ba8 <lsm6dso_write_reg>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d039      	beq.n	80074c4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe0>
        {
          return LSM6DSO_ERROR;
 8007450:	f04f 33ff 	mov.w	r3, #4294967295
 8007454:	e04f      	b.n	80074f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f103 0020 	add.w	r0, r3, #32
 800745c:	f107 0210 	add.w	r2, r7, #16
 8007460:	2301      	movs	r3, #1
 8007462:	2116      	movs	r1, #22
 8007464:	f000 fb88 	bl	8007b78 <lsm6dso_read_reg>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	e040      	b.n	80074f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
      }

      if (val1.g_hm_mode == 0U)
 8007474:	7c3b      	ldrb	r3, [r7, #16]
 8007476:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d112      	bne.n	80074a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
      {
        val1.g_hm_mode = 1U;
 8007480:	7c3b      	ldrb	r3, [r7, #16]
 8007482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007486:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f103 0020 	add.w	r0, r3, #32
 800748e:	f107 0210 	add.w	r2, r7, #16
 8007492:	2301      	movs	r3, #1
 8007494:	2116      	movs	r1, #22
 8007496:	f000 fb87 	bl	8007ba8 <lsm6dso_write_reg>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc2>
        {
          return LSM6DSO_ERROR;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	e027      	b.n	80074f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80074a6:	4916      	ldr	r1, [pc, #88]	@ (8007500 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 80074a8:	69b8      	ldr	r0, [r7, #24]
 80074aa:	f7f9 fe1f 	bl	80010ec <__aeabi_fcmpgt>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d100      	bne.n	80074b6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd2>
      {
        newOdr = 208.0f;
      }
      break;
 80074b4:	e007      	b.n	80074c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        newOdr = 208.0f;
 80074b6:	4b12      	ldr	r3, [pc, #72]	@ (8007500 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>)
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e004      	b.n	80074c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
    }
    default:
      ret = LSM6DSO_ERROR;
 80074bc:	f04f 33ff 	mov.w	r3, #4294967295
 80074c0:	61fb      	str	r3, [r7, #28]
      break;
 80074c2:	e000      	b.n	80074c6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      break;
 80074c4:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d102      	bne.n	80074d4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	e010      	b.n	80074f6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x112>
  }

  if (pObj->gyro_is_enabled == 1U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x106>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80074de:	69b9      	ldr	r1, [r7, #24]
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fa25 	bl	8007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80074e6:	61f8      	str	r0, [r7, #28]
 80074e8:	e004      	b.n	80074f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x110>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80074ea:	69b9      	ldr	r1, [r7, #24]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fa9b 	bl	8007a28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80074f2:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80074f4:	69fb      	ldr	r3, [r7, #28]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	43500000 	.word	0x43500000

08007504 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3320      	adds	r3, #32
 8007516:	f107 020b 	add.w	r2, r7, #11
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fd41 	bl	8007fa4 <lsm6dso_gy_full_scale_get>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8007528:	f04f 33ff 	mov.w	r3, #4294967295
 800752c:	e030      	b.n	8007590 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b06      	cmp	r3, #6
 8007532:	d828      	bhi.n	8007586 <LSM6DSO_GYRO_GetFullScale+0x82>
 8007534:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	08007561 	.word	0x08007561
 8007540:	08007559 	.word	0x08007559
 8007544:	08007569 	.word	0x08007569
 8007548:	08007587 	.word	0x08007587
 800754c:	08007573 	.word	0x08007573
 8007550:	08007587 	.word	0x08007587
 8007554:	0800757d 	.word	0x0800757d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	227d      	movs	r2, #125	@ 0x7d
 800755c:	601a      	str	r2, [r3, #0]
      break;
 800755e:	e016      	b.n	800758e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	22fa      	movs	r2, #250	@ 0xfa
 8007564:	601a      	str	r2, [r3, #0]
      break;
 8007566:	e012      	b.n	800758e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800756e:	601a      	str	r2, [r3, #0]
      break;
 8007570:	e00d      	b.n	800758e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007578:	601a      	str	r2, [r3, #0]
      break;
 800757a:	e008      	b.n	800758e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007582:	601a      	str	r2, [r3, #0]
      break;
 8007584:	e003      	b.n	800758e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	60fb      	str	r3, [r7, #12]
      break;
 800758c:	bf00      	nop
  }

  return ret;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b7d      	cmp	r3, #125	@ 0x7d
 80075a6:	dd12      	ble.n	80075ce <LSM6DSO_GYRO_SetFullScale+0x36>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2bfa      	cmp	r3, #250	@ 0xfa
 80075ac:	dd0d      	ble.n	80075ca <LSM6DSO_GYRO_SetFullScale+0x32>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80075b4:	dd07      	ble.n	80075c6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075bc:	dc01      	bgt.n	80075c2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80075be:	2304      	movs	r3, #4
 80075c0:	e006      	b.n	80075d0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80075c2:	2306      	movs	r3, #6
 80075c4:	e004      	b.n	80075d0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80075c6:	2302      	movs	r3, #2
 80075c8:	e002      	b.n	80075d0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80075ca:	2300      	movs	r3, #0
 80075cc:	e000      	b.n	80075d0 <LSM6DSO_GYRO_SetFullScale+0x38>
 80075ce:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80075d0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3320      	adds	r3, #32
 80075d6:	7bfa      	ldrb	r2, [r7, #15]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fcbc 	bl	8007f58 <lsm6dso_gy_full_scale_set>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	e000      	b.n	80075ee <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3320      	adds	r3, #32
 8007604:	f107 0208 	add.w	r2, r7, #8
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fe8e 	bl	800832c <lsm6dso_angular_rate_raw_get>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8007616:	f04f 33ff 	mov.w	r3, #4294967295
 800761a:	e00c      	b.n	8007636 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800761c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007624:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800762c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3320      	adds	r3, #32
 800764c:	f107 0210 	add.w	r2, r7, #16
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fe6a 	bl	800832c <lsm6dso_angular_rate_raw_get>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	e042      	b.n	80076ea <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8007664:	f107 030c 	add.w	r3, r7, #12
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff fddc 	bl	8007228 <LSM6DSO_GYRO_GetSensitivity>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8007676:	f04f 33ff 	mov.w	r3, #4294967295
 800767a:	e036      	b.n	80076ea <LSM6DSO_GYRO_GetAxes+0xac>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800767c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007680:	4618      	mov	r0, r3
 8007682:	f7f9 fb23 	bl	8000ccc <__aeabi_i2f>
 8007686:	4602      	mov	r2, r0
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7f9 fb71 	bl	8000d74 <__aeabi_fmul>
 8007692:	4603      	mov	r3, r0
 8007694:	4618      	mov	r0, r3
 8007696:	f7f9 fd33 	bl	8001100 <__aeabi_f2iz>
 800769a:	4602      	mov	r2, r0
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80076a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7f9 fb11 	bl	8000ccc <__aeabi_i2f>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7f9 fb5f 	bl	8000d74 <__aeabi_fmul>
 80076b6:	4603      	mov	r3, r0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7f9 fd21 	bl	8001100 <__aeabi_f2iz>
 80076be:	4602      	mov	r2, r0
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80076c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7f9 faff 	bl	8000ccc <__aeabi_i2f>
 80076ce:	4602      	mov	r2, r0
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7f9 fb4d 	bl	8000d74 <__aeabi_fmul>
 80076da:	4603      	mov	r3, r0
 80076dc:	4618      	mov	r0, r3
 80076de:	f7f9 fd0f 	bl	8001100 <__aeabi_f2iz>
 80076e2:	4602      	mov	r2, r0
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70fb      	strb	r3, [r7, #3]
 80076fe:	4613      	mov	r3, r2
 8007700:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f103 0020 	add.w	r0, r3, #32
 8007708:	1cba      	adds	r2, r7, #2
 800770a:	78f9      	ldrb	r1, [r7, #3]
 800770c:	2301      	movs	r3, #1
 800770e:	f000 fa4b 	bl	8007ba8 <lsm6dso_write_reg>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007718:	f04f 33ff 	mov.w	r3, #4294967295
 800771c:	e000      	b.n	8007720 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007732:	4937      	ldr	r1, [pc, #220]	@ (8007810 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8007734:	6838      	ldr	r0, [r7, #0]
 8007736:	f7f9 fcc5 	bl	80010c4 <__aeabi_fcmple>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1c>
 8007740:	230b      	movs	r3, #11
 8007742:	e051      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007744:	4933      	ldr	r1, [pc, #204]	@ (8007814 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8007746:	6838      	ldr	r0, [r7, #0]
 8007748:	f7f9 fcbc 	bl	80010c4 <__aeabi_fcmple>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2e>
 8007752:	2301      	movs	r3, #1
 8007754:	e048      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007756:	4930      	ldr	r1, [pc, #192]	@ (8007818 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8007758:	6838      	ldr	r0, [r7, #0]
 800775a:	f7f9 fcb3 	bl	80010c4 <__aeabi_fcmple>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x40>
 8007764:	2302      	movs	r3, #2
 8007766:	e03f      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007768:	492c      	ldr	r1, [pc, #176]	@ (800781c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 800776a:	6838      	ldr	r0, [r7, #0]
 800776c:	f7f9 fcaa 	bl	80010c4 <__aeabi_fcmple>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007776:	2303      	movs	r3, #3
 8007778:	e036      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800777a:	4929      	ldr	r1, [pc, #164]	@ (8007820 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 800777c:	6838      	ldr	r0, [r7, #0]
 800777e:	f7f9 fca1 	bl	80010c4 <__aeabi_fcmple>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007788:	2304      	movs	r3, #4
 800778a:	e02d      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800778c:	4925      	ldr	r1, [pc, #148]	@ (8007824 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 800778e:	6838      	ldr	r0, [r7, #0]
 8007790:	f7f9 fc98 	bl	80010c4 <__aeabi_fcmple>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x76>
 800779a:	2305      	movs	r3, #5
 800779c:	e024      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800779e:	4922      	ldr	r1, [pc, #136]	@ (8007828 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x100>)
 80077a0:	6838      	ldr	r0, [r7, #0]
 80077a2:	f7f9 fc8f 	bl	80010c4 <__aeabi_fcmple>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 80077ac:	2306      	movs	r3, #6
 80077ae:	e01b      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80077b0:	491e      	ldr	r1, [pc, #120]	@ (800782c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x104>)
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fc86 	bl	80010c4 <__aeabi_fcmple>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 80077be:	2307      	movs	r3, #7
 80077c0:	e012      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80077c2:	491b      	ldr	r1, [pc, #108]	@ (8007830 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>)
 80077c4:	6838      	ldr	r0, [r7, #0]
 80077c6:	f7f9 fc7d 	bl	80010c4 <__aeabi_fcmple>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 80077d0:	2308      	movs	r3, #8
 80077d2:	e009      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80077d4:	4917      	ldr	r1, [pc, #92]	@ (8007834 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x10c>)
 80077d6:	6838      	ldr	r0, [r7, #0]
 80077d8:	f7f9 fc74 	bl	80010c4 <__aeabi_fcmple>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbe>
 80077e2:	2309      	movs	r3, #9
 80077e4:	e000      	b.n	80077e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80077e6:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80077e8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3320      	adds	r3, #32
 80077ee:	7bfa      	ldrb	r2, [r7, #15]
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fa4e 	bl	8007c94 <lsm6dso_xl_data_rate_set>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>
  {
    return LSM6DSO_ERROR;
 80077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007802:	e000      	b.n	8007806 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xde>
  }

  return LSM6DSO_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	3fcccccd 	.word	0x3fcccccd
 8007814:	41480000 	.word	0x41480000
 8007818:	41d00000 	.word	0x41d00000
 800781c:	42500000 	.word	0x42500000
 8007820:	42d00000 	.word	0x42d00000
 8007824:	43500000 	.word	0x43500000
 8007828:	43d08000 	.word	0x43d08000
 800782c:	44504000 	.word	0x44504000
 8007830:	44d06000 	.word	0x44d06000
 8007834:	45505000 	.word	0x45505000

08007838 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8007842:	4931      	ldr	r1, [pc, #196]	@ (8007908 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8007844:	6838      	ldr	r0, [r7, #0]
 8007846:	f7f9 fc3d 	bl	80010c4 <__aeabi_fcmple>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1c>
 8007850:	230b      	movs	r3, #11
 8007852:	e051      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007854:	492d      	ldr	r1, [pc, #180]	@ (800790c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8007856:	6838      	ldr	r0, [r7, #0]
 8007858:	f7f9 fc34 	bl	80010c4 <__aeabi_fcmple>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8007862:	2301      	movs	r3, #1
 8007864:	e048      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007866:	492a      	ldr	r1, [pc, #168]	@ (8007910 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8007868:	6838      	ldr	r0, [r7, #0]
 800786a:	f7f9 fc2b 	bl	80010c4 <__aeabi_fcmple>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x40>
 8007874:	2302      	movs	r3, #2
 8007876:	e03f      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 8007878:	4926      	ldr	r1, [pc, #152]	@ (8007914 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 800787a:	6838      	ldr	r0, [r7, #0]
 800787c:	f7f9 fc22 	bl	80010c4 <__aeabi_fcmple>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x52>
 8007886:	2303      	movs	r3, #3
 8007888:	e036      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800788a:	4923      	ldr	r1, [pc, #140]	@ (8007918 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 800788c:	6838      	ldr	r0, [r7, #0]
 800788e:	f7f9 fc19 	bl	80010c4 <__aeabi_fcmple>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007898:	2304      	movs	r3, #4
 800789a:	e02d      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 800789c:	491f      	ldr	r1, [pc, #124]	@ (800791c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe4>)
 800789e:	6838      	ldr	r0, [r7, #0]
 80078a0:	f7f9 fc10 	bl	80010c4 <__aeabi_fcmple>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x76>
 80078aa:	2305      	movs	r3, #5
 80078ac:	e024      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80078ae:	491c      	ldr	r1, [pc, #112]	@ (8007920 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>)
 80078b0:	6838      	ldr	r0, [r7, #0]
 80078b2:	f7f9 fc07 	bl	80010c4 <__aeabi_fcmple>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x88>
 80078bc:	2306      	movs	r3, #6
 80078be:	e01b      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80078c0:	4918      	ldr	r1, [pc, #96]	@ (8007924 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80078c2:	6838      	ldr	r0, [r7, #0]
 80078c4:	f7f9 fbfe 	bl	80010c4 <__aeabi_fcmple>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 80078ce:	2307      	movs	r3, #7
 80078d0:	e012      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80078d2:	4915      	ldr	r1, [pc, #84]	@ (8007928 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80078d4:	6838      	ldr	r0, [r7, #0]
 80078d6:	f7f9 fbf5 	bl	80010c4 <__aeabi_fcmple>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 80078e0:	2308      	movs	r3, #8
 80078e2:	e009      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80078e4:	4911      	ldr	r1, [pc, #68]	@ (800792c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f7f9 fbec 	bl	80010c4 <__aeabi_fcmple>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80078f2:	2309      	movs	r3, #9
 80078f4:	e000      	b.n	80078f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>
 80078f6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	3fcccccd 	.word	0x3fcccccd
 800790c:	41480000 	.word	0x41480000
 8007910:	41d00000 	.word	0x41d00000
 8007914:	42500000 	.word	0x42500000
 8007918:	42d00000 	.word	0x42d00000
 800791c:	43500000 	.word	0x43500000
 8007920:	43d08000 	.word	0x43d08000
 8007924:	44504000 	.word	0x44504000
 8007928:	44d06000 	.word	0x44d06000
 800792c:	45505000 	.word	0x45505000

08007930 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800793a:	4932      	ldr	r1, [pc, #200]	@ (8007a04 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 800793c:	6838      	ldr	r0, [r7, #0]
 800793e:	f7f9 fbc1 	bl	80010c4 <__aeabi_fcmple>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1c>
 8007948:	2301      	movs	r3, #1
 800794a:	e048      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800794c:	492e      	ldr	r1, [pc, #184]	@ (8007a08 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 800794e:	6838      	ldr	r0, [r7, #0]
 8007950:	f7f9 fbb8 	bl	80010c4 <__aeabi_fcmple>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2e>
 800795a:	2302      	movs	r3, #2
 800795c:	e03f      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 800795e:	492b      	ldr	r1, [pc, #172]	@ (8007a0c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8007960:	6838      	ldr	r0, [r7, #0]
 8007962:	f7f9 fbaf 	bl	80010c4 <__aeabi_fcmple>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x40>
 800796c:	2303      	movs	r3, #3
 800796e:	e036      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007970:	4927      	ldr	r1, [pc, #156]	@ (8007a10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8007972:	6838      	ldr	r0, [r7, #0]
 8007974:	f7f9 fba6 	bl	80010c4 <__aeabi_fcmple>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800797e:	2304      	movs	r3, #4
 8007980:	e02d      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007982:	4924      	ldr	r1, [pc, #144]	@ (8007a14 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	f7f9 fb9d 	bl	80010c4 <__aeabi_fcmple>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007990:	2305      	movs	r3, #5
 8007992:	e024      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 8007994:	4920      	ldr	r1, [pc, #128]	@ (8007a18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8007996:	6838      	ldr	r0, [r7, #0]
 8007998:	f7f9 fb94 	bl	80010c4 <__aeabi_fcmple>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 80079a2:	2306      	movs	r3, #6
 80079a4:	e01b      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80079a6:	491d      	ldr	r1, [pc, #116]	@ (8007a1c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xec>)
 80079a8:	6838      	ldr	r0, [r7, #0]
 80079aa:	f7f9 fb8b 	bl	80010c4 <__aeabi_fcmple>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x88>
 80079b4:	2307      	movs	r3, #7
 80079b6:	e012      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80079b8:	4919      	ldr	r1, [pc, #100]	@ (8007a20 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>)
 80079ba:	6838      	ldr	r0, [r7, #0]
 80079bc:	f7f9 fb82 	bl	80010c4 <__aeabi_fcmple>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 80079c6:	2308      	movs	r3, #8
 80079c8:	e009      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80079ca:	4916      	ldr	r1, [pc, #88]	@ (8007a24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf4>)
 80079cc:	6838      	ldr	r0, [r7, #0]
 80079ce:	f7f9 fb79 	bl	80010c4 <__aeabi_fcmple>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>
 80079d8:	2309      	movs	r3, #9
 80079da:	e000      	b.n	80079de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xae>
 80079dc:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80079de:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3320      	adds	r3, #32
 80079e4:	7bfa      	ldrb	r2, [r7, #15]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fb1d 	bl	8008028 <lsm6dso_gy_data_rate_set>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xca>
  {
    return LSM6DSO_ERROR;
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	e000      	b.n	80079fc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>
  }

  return LSM6DSO_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	41480000 	.word	0x41480000
 8007a08:	41d00000 	.word	0x41d00000
 8007a0c:	42500000 	.word	0x42500000
 8007a10:	42d00000 	.word	0x42d00000
 8007a14:	43500000 	.word	0x43500000
 8007a18:	43d08000 	.word	0x43d08000
 8007a1c:	44504000 	.word	0x44504000
 8007a20:	44d06000 	.word	0x44d06000
 8007a24:	45505000 	.word	0x45505000

08007a28 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007a32:	492d      	ldr	r1, [pc, #180]	@ (8007ae8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8007a34:	6838      	ldr	r0, [r7, #0]
 8007a36:	f7f9 fb45 	bl	80010c4 <__aeabi_fcmple>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1c>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e048      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a44:	4929      	ldr	r1, [pc, #164]	@ (8007aec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8007a46:	6838      	ldr	r0, [r7, #0]
 8007a48:	f7f9 fb3c 	bl	80010c4 <__aeabi_fcmple>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2e>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e03f      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a56:	4926      	ldr	r1, [pc, #152]	@ (8007af0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8007a58:	6838      	ldr	r0, [r7, #0]
 8007a5a:	f7f9 fb33 	bl	80010c4 <__aeabi_fcmple>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x40>
 8007a64:	2303      	movs	r3, #3
 8007a66:	e036      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a68:	4922      	ldr	r1, [pc, #136]	@ (8007af4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8007a6a:	6838      	ldr	r0, [r7, #0]
 8007a6c:	f7f9 fb2a 	bl	80010c4 <__aeabi_fcmple>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x52>
 8007a76:	2304      	movs	r3, #4
 8007a78:	e02d      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a7a:	491f      	ldr	r1, [pc, #124]	@ (8007af8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd0>)
 8007a7c:	6838      	ldr	r0, [r7, #0]
 8007a7e:	f7f9 fb21 	bl	80010c4 <__aeabi_fcmple>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007a88:	2305      	movs	r3, #5
 8007a8a:	e024      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a8c:	491b      	ldr	r1, [pc, #108]	@ (8007afc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>)
 8007a8e:	6838      	ldr	r0, [r7, #0]
 8007a90:	f7f9 fb18 	bl	80010c4 <__aeabi_fcmple>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8007a9a:	2306      	movs	r3, #6
 8007a9c:	e01b      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007a9e:	4918      	ldr	r1, [pc, #96]	@ (8007b00 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd8>)
 8007aa0:	6838      	ldr	r0, [r7, #0]
 8007aa2:	f7f9 fb0f 	bl	80010c4 <__aeabi_fcmple>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x88>
 8007aac:	2307      	movs	r3, #7
 8007aae:	e012      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007ab0:	4914      	ldr	r1, [pc, #80]	@ (8007b04 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xdc>)
 8007ab2:	6838      	ldr	r0, [r7, #0]
 8007ab4:	f7f9 fb06 	bl	80010c4 <__aeabi_fcmple>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8007abe:	2308      	movs	r3, #8
 8007ac0:	e009      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007ac2:	4911      	ldr	r1, [pc, #68]	@ (8007b08 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe0>)
 8007ac4:	6838      	ldr	r0, [r7, #0]
 8007ac6:	f7f9 fafd 	bl	80010c4 <__aeabi_fcmple>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	e000      	b.n	8007ad6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xae>
 8007ad4:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	41480000 	.word	0x41480000
 8007aec:	41d00000 	.word	0x41d00000
 8007af0:	42500000 	.word	0x42500000
 8007af4:	42d00000 	.word	0x42d00000
 8007af8:	43500000 	.word	0x43500000
 8007afc:	43d08000 	.word	0x43d08000
 8007b00:	44504000 	.word	0x44504000
 8007b04:	44d06000 	.word	0x44d06000
 8007b08:	45505000 	.word	0x45505000

08007b0c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	461a      	mov	r2, r3
 8007b18:	460b      	mov	r3, r1
 8007b1a:	72fb      	strb	r3, [r7, #11]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	695c      	ldr	r4, [r3, #20]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	7b1b      	ldrb	r3, [r3, #12]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	b299      	uxth	r1, r3
 8007b32:	893b      	ldrh	r3, [r7, #8]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	47a0      	blx	r4
 8007b38:	4603      	mov	r3, r0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd90      	pop	{r4, r7, pc}

08007b42 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007b42:	b590      	push	{r4, r7, lr}
 8007b44:	b087      	sub	sp, #28
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	460b      	mov	r3, r1
 8007b50:	72fb      	strb	r3, [r7, #11]
 8007b52:	4613      	mov	r3, r2
 8007b54:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	691c      	ldr	r4, [r3, #16]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	7b1b      	ldrb	r3, [r3, #12]
 8007b62:	4618      	mov	r0, r3
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	b299      	uxth	r1, r3
 8007b68:	893b      	ldrh	r3, [r7, #8]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	47a0      	blx	r4
 8007b6e:	4603      	mov	r3, r0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd90      	pop	{r4, r7, pc}

08007b78 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007b78:	b590      	push	{r4, r7, lr}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	461a      	mov	r2, r3
 8007b84:	460b      	mov	r3, r1
 8007b86:	72fb      	strb	r3, [r7, #11]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685c      	ldr	r4, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68d8      	ldr	r0, [r3, #12]
 8007b94:	893b      	ldrh	r3, [r7, #8]
 8007b96:	7af9      	ldrb	r1, [r7, #11]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	47a0      	blx	r4
 8007b9c:	6178      	str	r0, [r7, #20]

  return ret;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd90      	pop	{r4, r7, pc}

08007ba8 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007ba8:	b590      	push	{r4, r7, lr}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	72fb      	strb	r3, [r7, #11]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681c      	ldr	r4, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68d8      	ldr	r0, [r3, #12]
 8007bc4:	893b      	ldrh	r3, [r7, #8]
 8007bc6:	7af9      	ldrb	r1, [r7, #11]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	47a0      	blx	r4
 8007bcc:	6178      	str	r0, [r7, #20]

  return ret;
 8007bce:	697b      	ldr	r3, [r7, #20]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd90      	pop	{r4, r7, pc}

08007bd8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007be4:	f107 0208 	add.w	r2, r7, #8
 8007be8:	2301      	movs	r3, #1
 8007bea:	2110      	movs	r1, #16
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ffc3 	bl	8007b78 <lsm6dso_read_reg>
 8007bf2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7a3b      	ldrb	r3, [r7, #8]
 8007c04:	f362 0383 	bfi	r3, r2, #2, #2
 8007c08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007c0a:	f107 0208 	add.w	r2, r7, #8
 8007c0e:	2301      	movs	r3, #1
 8007c10:	2110      	movs	r1, #16
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff ffc8 	bl	8007ba8 <lsm6dso_write_reg>
 8007c18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007c2e:	f107 0208 	add.w	r2, r7, #8
 8007c32:	2301      	movs	r3, #1
 8007c34:	2110      	movs	r1, #16
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff9e 	bl	8007b78 <lsm6dso_read_reg>
 8007c3c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8007c3e:	7a3b      	ldrb	r3, [r7, #8]
 8007c40:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d81a      	bhi.n	8007c80 <lsm6dso_xl_full_scale_get+0x5c>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <lsm6dso_xl_full_scale_get+0x2c>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007c71 	.word	0x08007c71
 8007c5c:	08007c79 	.word	0x08007c79
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
      break;
 8007c66:	e00f      	b.n	8007c88 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
      break;
 8007c6e:	e00b      	b.n	8007c88 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2202      	movs	r2, #2
 8007c74:	701a      	strb	r2, [r3, #0]
      break;
 8007c76:	e007      	b.n	8007c88 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e003      	b.n	8007c88 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
      break;
 8007c86:	bf00      	nop
  }

  return ret;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop

08007c94 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007ca4:	f107 030c 	add.w	r3, r7, #12
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fc90 	bl	80085d0 <lsm6dso_fsm_enable_get>
 8007cb0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <lsm6dso_xl_data_rate_set+0x28>
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	e0e0      	b.n	8007e7e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007cbc:	7b3b      	ldrb	r3, [r7, #12]
 8007cbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007cc2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007cc4:	7b3b      	ldrb	r3, [r7, #12]
 8007cc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007cca:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007cd0:	7b3b      	ldrb	r3, [r7, #12]
 8007cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007cd6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007cdc:	7b3b      	ldrb	r3, [r7, #12]
 8007cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007ce2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007ce8:	7b3b      	ldrb	r3, [r7, #12]
 8007cea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007cee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007cf4:	7b3b      	ldrb	r3, [r7, #12]
 8007cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007cfa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007d00:	7b3b      	ldrb	r3, [r7, #12]
 8007d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007d06:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007d0c:	7b3b      	ldrb	r3, [r7, #12]
 8007d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d12:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007d14:	4313      	orrs	r3, r2
 8007d16:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007d18:	7b7b      	ldrb	r3, [r7, #13]
 8007d1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d1e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007d20:	4313      	orrs	r3, r2
 8007d22:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007d24:	7b7b      	ldrb	r3, [r7, #13]
 8007d26:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d2a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007d30:	7b7b      	ldrb	r3, [r7, #13]
 8007d32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d36:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007d3c:	7b7b      	ldrb	r3, [r7, #13]
 8007d3e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d42:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007d48:	7b7b      	ldrb	r3, [r7, #13]
 8007d4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007d4e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007d50:	4313      	orrs	r3, r2
 8007d52:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007d54:	7b7b      	ldrb	r3, [r7, #13]
 8007d56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007d5a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007d60:	7b7b      	ldrb	r3, [r7, #13]
 8007d62:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007d66:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007d6c:	7b7b      	ldrb	r3, [r7, #13]
 8007d6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d72:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007d74:	4313      	orrs	r3, r2
 8007d76:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d164      	bne.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007d7c:	f107 030b 	add.w	r3, r7, #11
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fc46 	bl	8008614 <lsm6dso_fsm_data_rate_get>
 8007d88:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <lsm6dso_xl_data_rate_set+0x100>
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	e074      	b.n	8007e7e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d852      	bhi.n	8007e40 <lsm6dso_xl_data_rate_set+0x1ac>
 8007d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007da0 <lsm6dso_xl_data_rate_set+0x10c>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007dc3 	.word	0x08007dc3
 8007da8:	08007de1 	.word	0x08007de1
 8007dac:	08007e0b 	.word	0x08007e0b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007dba:	e044      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	75fb      	strb	r3, [r7, #23]
        break;
 8007dc0:	e041      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007dcc:	e03b      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d102      	bne.n	8007dda <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	75fb      	strb	r3, [r7, #23]
        break;
 8007dd8:	e035      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007dda:	78fb      	ldrb	r3, [r7, #3]
 8007ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8007dde:	e032      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007de6:	2303      	movs	r3, #3
 8007de8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007dea:	e02c      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d102      	bne.n	8007df8 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007df2:	2303      	movs	r3, #3
 8007df4:	75fb      	strb	r3, [r7, #23]
        break;
 8007df6:	e026      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d102      	bne.n	8007e04 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	75fb      	strb	r3, [r7, #23]
        break;
 8007e02:	e020      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	75fb      	strb	r3, [r7, #23]
        break;
 8007e08:	e01d      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007e10:	2304      	movs	r3, #4
 8007e12:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007e14:	e017      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d102      	bne.n	8007e22 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007e1c:	2304      	movs	r3, #4
 8007e1e:	75fb      	strb	r3, [r7, #23]
        break;
 8007e20:	e011      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d102      	bne.n	8007e2e <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007e28:	2304      	movs	r3, #4
 8007e2a:	75fb      	strb	r3, [r7, #23]
        break;
 8007e2c:	e00b      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d102      	bne.n	8007e3a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007e34:	2304      	movs	r3, #4
 8007e36:	75fb      	strb	r3, [r7, #23]
        break;
 8007e38:	e005      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	75fb      	strb	r3, [r7, #23]
        break;
 8007e3e:	e002      	b.n	8007e46 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	75fb      	strb	r3, [r7, #23]
        break;
 8007e44:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e46:	f107 0208 	add.w	r2, r7, #8
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	2110      	movs	r1, #16
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fe92 	bl	8007b78 <lsm6dso_read_reg>
 8007e54:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	7a3b      	ldrb	r3, [r7, #8]
 8007e60:	f362 1307 	bfi	r3, r2, #4, #4
 8007e64:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e66:	f107 0208 	add.w	r2, r7, #8
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff fe9a 	bl	8007ba8 <lsm6dso_write_reg>
 8007e74:	4602      	mov	r2, r0
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	4413      	add	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]

  return ret;
 8007e7c:	693b      	ldr	r3, [r7, #16]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop

08007e88 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007e92:	f107 0208 	add.w	r2, r7, #8
 8007e96:	2301      	movs	r3, #1
 8007e98:	2110      	movs	r1, #16
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff fe6c 	bl	8007b78 <lsm6dso_read_reg>
 8007ea0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007ea2:	7a3b      	ldrb	r3, [r7, #8]
 8007ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d84a      	bhi.n	8007f44 <lsm6dso_xl_data_rate_get+0xbc>
 8007eae:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <lsm6dso_xl_data_rate_get+0x2c>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ee5 	.word	0x08007ee5
 8007eb8:	08007eed 	.word	0x08007eed
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007efd 	.word	0x08007efd
 8007ec4:	08007f05 	.word	0x08007f05
 8007ec8:	08007f0d 	.word	0x08007f0d
 8007ecc:	08007f15 	.word	0x08007f15
 8007ed0:	08007f1d 	.word	0x08007f1d
 8007ed4:	08007f25 	.word	0x08007f25
 8007ed8:	08007f2d 	.word	0x08007f2d
 8007edc:	08007f35 	.word	0x08007f35
 8007ee0:	08007f3d 	.word	0x08007f3d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
      break;
 8007eea:	e02f      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	701a      	strb	r2, [r3, #0]
      break;
 8007ef2:	e02b      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	701a      	strb	r2, [r3, #0]
      break;
 8007efa:	e027      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2203      	movs	r2, #3
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e023      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2204      	movs	r2, #4
 8007f08:	701a      	strb	r2, [r3, #0]
      break;
 8007f0a:	e01f      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2205      	movs	r2, #5
 8007f10:	701a      	strb	r2, [r3, #0]
      break;
 8007f12:	e01b      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2206      	movs	r2, #6
 8007f18:	701a      	strb	r2, [r3, #0]
      break;
 8007f1a:	e017      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2207      	movs	r2, #7
 8007f20:	701a      	strb	r2, [r3, #0]
      break;
 8007f22:	e013      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2208      	movs	r2, #8
 8007f28:	701a      	strb	r2, [r3, #0]
      break;
 8007f2a:	e00f      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2209      	movs	r2, #9
 8007f30:	701a      	strb	r2, [r3, #0]
      break;
 8007f32:	e00b      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	220a      	movs	r2, #10
 8007f38:	701a      	strb	r2, [r3, #0]
      break;
 8007f3a:	e007      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	220b      	movs	r2, #11
 8007f40:	701a      	strb	r2, [r3, #0]
      break;
 8007f42:	e003      	b.n	8007f4c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
      break;
 8007f4a:	bf00      	nop
  }

  return ret;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f64:	f107 0208 	add.w	r2, r7, #8
 8007f68:	2301      	movs	r3, #1
 8007f6a:	2111      	movs	r1, #17
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fe03 	bl	8007b78 <lsm6dso_read_reg>
 8007f72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d10f      	bne.n	8007f9a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	7a3b      	ldrb	r3, [r7, #8]
 8007f84:	f362 0343 	bfi	r3, r2, #1, #3
 8007f88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f8a:	f107 0208 	add.w	r2, r7, #8
 8007f8e:	2301      	movs	r3, #1
 8007f90:	2111      	movs	r1, #17
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff fe08 	bl	8007ba8 <lsm6dso_write_reg>
 8007f98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007fae:	f107 0208 	add.w	r2, r7, #8
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	2111      	movs	r1, #17
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fdde 	bl	8007b78 <lsm6dso_read_reg>
 8007fbc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8007fbe:	7a3b      	ldrb	r3, [r7, #8]
 8007fc0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b06      	cmp	r3, #6
 8007fc8:	d824      	bhi.n	8008014 <lsm6dso_gy_full_scale_get+0x70>
 8007fca:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <lsm6dso_gy_full_scale_get+0x2c>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008015 	.word	0x08008015
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	08008015 	.word	0x08008015
 8007fe8:	0800800d 	.word	0x0800800d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
      break;
 8007ff2:	e013      	b.n	800801c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
      break;
 8007ffa:	e00f      	b.n	800801c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2202      	movs	r2, #2
 8008000:	701a      	strb	r2, [r3, #0]
      break;
 8008002:	e00b      	b.n	800801c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2204      	movs	r2, #4
 8008008:	701a      	strb	r2, [r3, #0]
      break;
 800800a:	e007      	b.n	800801c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2206      	movs	r2, #6
 8008010:	701a      	strb	r2, [r3, #0]
      break;
 8008012:	e003      	b.n	800801c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
      break;
 800801a:	bf00      	nop
  }

  return ret;
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop

08008028 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fac6 	bl	80085d0 <lsm6dso_fsm_enable_get>
 8008044:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <lsm6dso_gy_data_rate_set+0x28>
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	e0e0      	b.n	8008212 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008050:	7b3b      	ldrb	r3, [r7, #12]
 8008052:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008056:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8008058:	7b3b      	ldrb	r3, [r7, #12]
 800805a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800805e:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8008060:	4313      	orrs	r3, r2
 8008062:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008064:	7b3b      	ldrb	r3, [r7, #12]
 8008066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800806a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800806c:	4313      	orrs	r3, r2
 800806e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008070:	7b3b      	ldrb	r3, [r7, #12]
 8008072:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008076:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8008078:	4313      	orrs	r3, r2
 800807a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800807c:	7b3b      	ldrb	r3, [r7, #12]
 800807e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008082:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8008084:	4313      	orrs	r3, r2
 8008086:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8008088:	7b3b      	ldrb	r3, [r7, #12]
 800808a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800808e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8008090:	4313      	orrs	r3, r2
 8008092:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8008094:	7b3b      	ldrb	r3, [r7, #12]
 8008096:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800809a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800809c:	4313      	orrs	r3, r2
 800809e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80080a0:	7b3b      	ldrb	r3, [r7, #12]
 80080a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80080a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80080a8:	4313      	orrs	r3, r2
 80080aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80080ac:	7b7b      	ldrb	r3, [r7, #13]
 80080ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80080b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80080b4:	4313      	orrs	r3, r2
 80080b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80080b8:	7b7b      	ldrb	r3, [r7, #13]
 80080ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80080be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80080c0:	4313      	orrs	r3, r2
 80080c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80080c4:	7b7b      	ldrb	r3, [r7, #13]
 80080c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80080ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80080cc:	4313      	orrs	r3, r2
 80080ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80080d0:	7b7b      	ldrb	r3, [r7, #13]
 80080d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80080d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80080d8:	4313      	orrs	r3, r2
 80080da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80080dc:	7b7b      	ldrb	r3, [r7, #13]
 80080de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80080e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80080e4:	4313      	orrs	r3, r2
 80080e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80080ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80080f0:	4313      	orrs	r3, r2
 80080f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80080f4:	7b7b      	ldrb	r3, [r7, #13]
 80080f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80080fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80080fc:	4313      	orrs	r3, r2
 80080fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8008100:	7b7b      	ldrb	r3, [r7, #13]
 8008102:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008106:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8008108:	4313      	orrs	r3, r2
 800810a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800810c:	2b01      	cmp	r3, #1
 800810e:	d164      	bne.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8008110:	f107 030b 	add.w	r3, r7, #11
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa7c 	bl	8008614 <lsm6dso_fsm_data_rate_get>
 800811c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <lsm6dso_gy_data_rate_set+0x100>
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	e074      	b.n	8008212 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	2b03      	cmp	r3, #3
 800812c:	d852      	bhi.n	80081d4 <lsm6dso_gy_data_rate_set+0x1ac>
 800812e:	a201      	add	r2, pc, #4	@ (adr r2, 8008134 <lsm6dso_gy_data_rate_set+0x10c>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008145 	.word	0x08008145
 8008138:	08008157 	.word	0x08008157
 800813c:	08008175 	.word	0x08008175
 8008140:	0800819f 	.word	0x0800819f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008144:	78fb      	ldrb	r3, [r7, #3]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d102      	bne.n	8008150 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800814e:	e044      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	75fb      	strb	r3, [r7, #23]
        break;
 8008154:	e041      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 800815c:	2302      	movs	r3, #2
 800815e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8008160:	e03b      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d102      	bne.n	800816e <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8008168:	2302      	movs	r3, #2
 800816a:	75fb      	strb	r3, [r7, #23]
        break;
 800816c:	e035      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	75fb      	strb	r3, [r7, #23]
        break;
 8008172:	e032      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 800817a:	2303      	movs	r3, #3
 800817c:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800817e:	e02c      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008186:	2303      	movs	r3, #3
 8008188:	75fb      	strb	r3, [r7, #23]
        break;
 800818a:	e026      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d102      	bne.n	8008198 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8008192:	2303      	movs	r3, #3
 8008194:	75fb      	strb	r3, [r7, #23]
        break;
 8008196:	e020      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	75fb      	strb	r3, [r7, #23]
        break;
 800819c:	e01d      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80081a4:	2304      	movs	r3, #4
 80081a6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80081a8:	e017      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d102      	bne.n	80081b6 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80081b0:	2304      	movs	r3, #4
 80081b2:	75fb      	strb	r3, [r7, #23]
        break;
 80081b4:	e011      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d102      	bne.n	80081c2 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80081bc:	2304      	movs	r3, #4
 80081be:	75fb      	strb	r3, [r7, #23]
        break;
 80081c0:	e00b      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d102      	bne.n	80081ce <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80081c8:	2304      	movs	r3, #4
 80081ca:	75fb      	strb	r3, [r7, #23]
        break;
 80081cc:	e005      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	75fb      	strb	r3, [r7, #23]
        break;
 80081d2:	e002      	b.n	80081da <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	75fb      	strb	r3, [r7, #23]
        break;
 80081d8:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80081da:	f107 0208 	add.w	r2, r7, #8
 80081de:	2301      	movs	r3, #1
 80081e0:	2111      	movs	r1, #17
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fcc8 	bl	8007b78 <lsm6dso_read_reg>
 80081e8:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	7a3b      	ldrb	r3, [r7, #8]
 80081f4:	f362 1307 	bfi	r3, r2, #4, #4
 80081f8:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80081fa:	f107 0208 	add.w	r2, r7, #8
 80081fe:	2301      	movs	r3, #1
 8008200:	2111      	movs	r1, #17
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fcd0 	bl	8007ba8 <lsm6dso_write_reg>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	4413      	add	r3, r2
 800820e:	613b      	str	r3, [r7, #16]

  return ret;
 8008210:	693b      	ldr	r3, [r7, #16]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop

0800821c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	2301      	movs	r3, #1
 800822c:	2111      	movs	r1, #17
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fca2 	bl	8007b78 <lsm6dso_read_reg>
 8008234:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8008236:	7a3b      	ldrb	r3, [r7, #8]
 8008238:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b0a      	cmp	r3, #10
 8008240:	d844      	bhi.n	80082cc <lsm6dso_gy_data_rate_get+0xb0>
 8008242:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <lsm6dso_gy_data_rate_get+0x2c>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	08008275 	.word	0x08008275
 800824c:	0800827d 	.word	0x0800827d
 8008250:	08008285 	.word	0x08008285
 8008254:	0800828d 	.word	0x0800828d
 8008258:	08008295 	.word	0x08008295
 800825c:	0800829d 	.word	0x0800829d
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082ad 	.word	0x080082ad
 8008268:	080082b5 	.word	0x080082b5
 800826c:	080082bd 	.word	0x080082bd
 8008270:	080082c5 	.word	0x080082c5
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
      break;
 800827a:	e02b      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
      break;
 8008282:	e027      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2202      	movs	r2, #2
 8008288:	701a      	strb	r2, [r3, #0]
      break;
 800828a:	e023      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2203      	movs	r2, #3
 8008290:	701a      	strb	r2, [r3, #0]
      break;
 8008292:	e01f      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2204      	movs	r2, #4
 8008298:	701a      	strb	r2, [r3, #0]
      break;
 800829a:	e01b      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2205      	movs	r2, #5
 80082a0:	701a      	strb	r2, [r3, #0]
      break;
 80082a2:	e017      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2206      	movs	r2, #6
 80082a8:	701a      	strb	r2, [r3, #0]
      break;
 80082aa:	e013      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2207      	movs	r2, #7
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e00f      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2208      	movs	r2, #8
 80082b8:	701a      	strb	r2, [r3, #0]
      break;
 80082ba:	e00b      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2209      	movs	r2, #9
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e007      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	220a      	movs	r2, #10
 80082c8:	701a      	strb	r2, [r3, #0]
      break;
 80082ca:	e003      	b.n	80082d4 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
      break;
 80082d2:	bf00      	nop
  }

  return ret;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop

080082e0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80082ec:	f107 0208 	add.w	r2, r7, #8
 80082f0:	2301      	movs	r3, #1
 80082f2:	2112      	movs	r1, #18
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fc3f 	bl	8007b78 <lsm6dso_read_reg>
 80082fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10f      	bne.n	8008322 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	b2da      	uxtb	r2, r3
 800830a:	7a3b      	ldrb	r3, [r7, #8]
 800830c:	f362 1386 	bfi	r3, r2, #6, #1
 8008310:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8008312:	f107 0208 	add.w	r2, r7, #8
 8008316:	2301      	movs	r3, #1
 8008318:	2112      	movs	r1, #18
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fc44 	bl	8007ba8 <lsm6dso_write_reg>
 8008320:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008322:	68fb      	ldr	r3, [r7, #12]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8008336:	f107 020c 	add.w	r2, r7, #12
 800833a:	2306      	movs	r3, #6
 800833c:	2122      	movs	r1, #34	@ 0x22
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff fc1a 	bl	8007b78 <lsm6dso_read_reg>
 8008344:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008346:	7b7b      	ldrb	r3, [r7, #13]
 8008348:	b21a      	sxth	r2, r3
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008354:	b29b      	uxth	r3, r3
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	b29b      	uxth	r3, r3
 800835a:	7b3a      	ldrb	r2, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	b29b      	uxth	r3, r3
 8008360:	b21a      	sxth	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008366:	7bfa      	ldrb	r2, [r7, #15]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	3302      	adds	r3, #2
 800836c:	b212      	sxth	r2, r2
 800836e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	3302      	adds	r3, #2
 8008374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008378:	b29b      	uxth	r3, r3
 800837a:	021b      	lsls	r3, r3, #8
 800837c:	b29b      	uxth	r3, r3
 800837e:	7bba      	ldrb	r2, [r7, #14]
 8008380:	4413      	add	r3, r2
 8008382:	b29a      	uxth	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	3302      	adds	r3, #2
 8008388:	b212      	sxth	r2, r2
 800838a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800838c:	7c7a      	ldrb	r2, [r7, #17]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	3304      	adds	r3, #4
 8008392:	b212      	sxth	r2, r2
 8008394:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	3304      	adds	r3, #4
 800839a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	7c3a      	ldrb	r2, [r7, #16]
 80083a6:	4413      	add	r3, r2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	3304      	adds	r3, #4
 80083ae:	b212      	sxth	r2, r2
 80083b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80083b2:	697b      	ldr	r3, [r7, #20]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80083c6:	f107 020c 	add.w	r2, r7, #12
 80083ca:	2306      	movs	r3, #6
 80083cc:	2128      	movs	r1, #40	@ 0x28
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fbd2 	bl	8007b78 <lsm6dso_read_reg>
 80083d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80083d6:	7b7b      	ldrb	r3, [r7, #13]
 80083d8:	b21a      	sxth	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	7b3a      	ldrb	r2, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	b21a      	sxth	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3302      	adds	r3, #2
 80083fc:	b212      	sxth	r2, r2
 80083fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	3302      	adds	r3, #2
 8008404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008408:	b29b      	uxth	r3, r3
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	b29b      	uxth	r3, r3
 800840e:	7bba      	ldrb	r2, [r7, #14]
 8008410:	4413      	add	r3, r2
 8008412:	b29a      	uxth	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3302      	adds	r3, #2
 8008418:	b212      	sxth	r2, r2
 800841a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800841c:	7c7a      	ldrb	r2, [r7, #17]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	3304      	adds	r3, #4
 8008422:	b212      	sxth	r2, r2
 8008424:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	3304      	adds	r3, #4
 800842a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800842e:	b29b      	uxth	r3, r3
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	b29b      	uxth	r3, r3
 8008434:	7c3a      	ldrb	r2, [r7, #16]
 8008436:	4413      	add	r3, r2
 8008438:	b29a      	uxth	r2, r3
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	3304      	adds	r3, #4
 800843e:	b212      	sxth	r2, r2
 8008440:	801a      	strh	r2, [r3, #0]

  return ret;
 8008442:	697b      	ldr	r3, [r7, #20]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8008458:	2300      	movs	r3, #0
 800845a:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	b2da      	uxtb	r2, r3
 8008464:	7a3b      	ldrb	r3, [r7, #8]
 8008466:	f362 1387 	bfi	r3, r2, #6, #2
 800846a:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	2301      	movs	r3, #1
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fb97 	bl	8007ba8 <lsm6dso_write_reg>
 800847a:	60f8      	str	r0, [r7, #12]

  return ret;
 800847c:	68fb      	ldr	r3, [r7, #12]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8008490:	2301      	movs	r3, #1
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	210f      	movs	r1, #15
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fb6e 	bl	8007b78 <lsm6dso_read_reg>
 800849c:	60f8      	str	r0, [r7, #12]

  return ret;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80084b4:	f107 0208 	add.w	r2, r7, #8
 80084b8:	2301      	movs	r3, #1
 80084ba:	2112      	movs	r1, #18
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fb5b 	bl	8007b78 <lsm6dso_read_reg>
 80084c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10f      	bne.n	80084ea <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	7a3b      	ldrb	r3, [r7, #8]
 80084d4:	f362 0382 	bfi	r3, r2, #2, #1
 80084d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80084da:	f107 0208 	add.w	r2, r7, #8
 80084de:	2301      	movs	r3, #1
 80084e0:	2112      	movs	r1, #18
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff fb60 	bl	8007ba8 <lsm6dso_write_reg>
 80084e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008500:	f107 020c 	add.w	r2, r7, #12
 8008504:	2301      	movs	r3, #1
 8008506:	2118      	movs	r1, #24
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fb35 	bl	8007b78 <lsm6dso_read_reg>
 800850e:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8008510:	78fb      	ldrb	r3, [r7, #3]
 8008512:	09db      	lsrs	r3, r3, #7
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	7b3b      	ldrb	r3, [r7, #12]
 800851e:	f362 0341 	bfi	r3, r2, #1, #1
 8008522:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008524:	f107 020c 	add.w	r2, r7, #12
 8008528:	2301      	movs	r3, #1
 800852a:	2118      	movs	r1, #24
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fb3b 	bl	8007ba8 <lsm6dso_write_reg>
 8008532:	4602      	mov	r2, r0
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	4413      	add	r3, r2
 8008538:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <lsm6dso_i3c_disable_set+0x50>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	e01b      	b.n	800857c <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008544:	f107 0210 	add.w	r2, r7, #16
 8008548:	2301      	movs	r3, #1
 800854a:	2162      	movs	r1, #98	@ 0x62
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fb13 	bl	8007b78 <lsm6dso_read_reg>
 8008552:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	7c3b      	ldrb	r3, [r7, #16]
 800855e:	f362 03c4 	bfi	r3, r2, #3, #2
 8008562:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8008564:	f107 0210 	add.w	r2, r7, #16
 8008568:	2301      	movs	r3, #1
 800856a:	2162      	movs	r1, #98	@ 0x62
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff fb1b 	bl	8007ba8 <lsm6dso_write_reg>
 8008572:	4602      	mov	r2, r0
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	4413      	add	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  return ret;
 800857a:	697b      	ldr	r3, [r7, #20]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8008590:	f107 0208 	add.w	r2, r7, #8
 8008594:	2301      	movs	r3, #1
 8008596:	210a      	movs	r1, #10
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff faed 	bl	8007b78 <lsm6dso_read_reg>
 800859e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10f      	bne.n	80085c6 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	7a3b      	ldrb	r3, [r7, #8]
 80085b0:	f362 0302 	bfi	r3, r2, #0, #3
 80085b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80085b6:	f107 0208 	add.w	r2, r7, #8
 80085ba:	2301      	movs	r3, #1
 80085bc:	210a      	movs	r1, #10
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff faf2 	bl	8007ba8 <lsm6dso_write_reg>
 80085c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80085da:	2102      	movs	r1, #2
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ff35 	bl	800844c <lsm6dso_mem_bank_set>
 80085e2:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80085e4:	2302      	movs	r3, #2
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	2146      	movs	r1, #70	@ 0x46
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff fac4 	bl	8007b78 <lsm6dso_read_reg>
 80085f0:	4602      	mov	r2, r0
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80085f8:	2100      	movs	r1, #0
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff ff26 	bl	800844c <lsm6dso_mem_bank_set>
 8008600:	4602      	mov	r2, r0
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  return ret;
 8008608:	68fb      	ldr	r3, [r7, #12]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800861e:	2102      	movs	r1, #2
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff13 	bl	800844c <lsm6dso_mem_bank_set>
 8008626:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <lsm6dso_fsm_data_rate_get+0x1e>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	e03a      	b.n	80086a8 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8008632:	f107 0208 	add.w	r2, r7, #8
 8008636:	2301      	movs	r3, #1
 8008638:	215f      	movs	r1, #95	@ 0x5f
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff fa9c 	bl	8007b78 <lsm6dso_read_reg>
 8008640:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d125      	bne.n	8008694 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8008648:	7a3b      	ldrb	r3, [r7, #8]
 800864a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b03      	cmp	r3, #3
 8008652:	d81b      	bhi.n	800868c <lsm6dso_fsm_data_rate_get+0x78>
 8008654:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <lsm6dso_fsm_data_rate_get+0x48>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	0800866d 	.word	0x0800866d
 8008660:	08008675 	.word	0x08008675
 8008664:	0800867d 	.word	0x0800867d
 8008668:	08008685 	.word	0x08008685
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	701a      	strb	r2, [r3, #0]
      break;
 8008672:	e010      	b.n	8008696 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2201      	movs	r2, #1
 8008678:	701a      	strb	r2, [r3, #0]
      break;
 800867a:	e00c      	b.n	8008696 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2202      	movs	r2, #2
 8008680:	701a      	strb	r2, [r3, #0]
      break;
 8008682:	e008      	b.n	8008696 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2203      	movs	r2, #3
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e004      	b.n	8008696 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
      break;
 8008692:	e000      	b.n	8008696 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8008694:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008696:	2100      	movs	r1, #0
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fed7 	bl	800844c <lsm6dso_mem_bank_set>
 800869e:	4602      	mov	r2, r0
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  return ret;
 80086a6:	68fb      	ldr	r3, [r7, #12]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d103      	bne.n	80086c8 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80086c0:	f04f 33ff 	mov.w	r3, #4294967295
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e034      	b.n	8008732 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	7b1a      	ldrb	r2, [r3, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	695a      	ldr	r2, [r3, #20]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a0e      	ldr	r2, [pc, #56]	@ (800873c <STTS751_RegisterBusIO+0x8c>)
 8008704:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a0d      	ldr	r2, [pc, #52]	@ (8008740 <STTS751_RegisterBusIO+0x90>)
 800870a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	69da      	ldr	r2, [r3, #28]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d004      	beq.n	800872c <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	e002      	b.n	8008732 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008732:	68fb      	ldr	r3, [r7, #12]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	08008ba9 	.word	0x08008ba9
 8008740:	08008c17 	.word	0x08008c17

08008744 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008752:	2b00      	cmp	r3, #0
 8008754:	d127      	bne.n	80087a6 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3320      	adds	r3, #32
 800875a:	2101      	movs	r1, #1
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fc39 	bl	8008fd4 <stts751_pin_event_route_set>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	e020      	b.n	80087b0 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008774:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3320      	adds	r3, #32
 800877a:	2103      	movs	r1, #3
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fb9d 	bl	8008ebc <stts751_resolution_set>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	e010      	b.n	80087b0 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3320      	adds	r3, #32
 8008792:	2180      	movs	r1, #128	@ 0x80
 8008794:	4618      	mov	r0, r3
 8008796:	f000 faba 	bl	8008d0e <stts751_temp_data_rate_set>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80087a0:	f04f 33ff 	mov.w	r3, #4294967295
 80087a4:	e004      	b.n	80087b0 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d108      	bne.n	80087dc <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f874 	bl	80088b8 <STTS751_TEMP_Disable>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295
 80087da:	e004      	b.n	80087e6 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS751_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3320      	adds	r3, #32
 80087fc:	f107 020c 	add.w	r2, r7, #12
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fc0c 	bl	8009020 <stts751_device_id_get>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 800880e:	f04f 33ff 	mov.w	r3, #4294967295
 8008812:	e003      	b.n	800881c <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8008814:	7b7a      	ldrb	r2, [r7, #13]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2200      	movs	r2, #0
 8008832:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2200      	movs	r2, #0
 8008844:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2200      	movs	r2, #0
 800884a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 800885a:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f04f 0200 	mov.w	r2, #0
 800886a:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	e010      	b.n	80088b0 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f8b5 	bl	8008a04 <STTS751_TEMP_SetOutputDataRate>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295
 80088a4:	e004      	b.n	80088b0 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e01c      	b.n	8008908 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3334      	adds	r3, #52	@ 0x34
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f81b 	bl	8008910 <STTS751_TEMP_GetOutputDataRate>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80088e0:	f04f 33ff 	mov.w	r3, #4294967295
 80088e4:	e010      	b.n	8008908 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3320      	adds	r3, #32
 80088ea:	2180      	movs	r1, #128	@ 0x80
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fa0e 	bl	8008d0e <stts751_temp_data_rate_set>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80088f8:	f04f 33ff 	mov.w	r3, #4294967295
 80088fc:	e004      	b.n	8008908 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS751_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3320      	adds	r3, #32
 8008922:	f107 020b 	add.w	r2, r7, #11
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fa47 	bl	8008dbc <stts751_temp_data_rate_get>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8008934:	f04f 33ff 	mov.w	r3, #4294967295
 8008938:	e060      	b.n	80089fc <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	2b90      	cmp	r3, #144	@ 0x90
 800893e:	d021      	beq.n	8008984 <STTS751_TEMP_GetOutputDataRate+0x74>
 8008940:	2b90      	cmp	r3, #144	@ 0x90
 8008942:	dc56      	bgt.n	80089f2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008944:	2b09      	cmp	r3, #9
 8008946:	dc1b      	bgt.n	8008980 <STTS751_TEMP_GetOutputDataRate+0x70>
 8008948:	2b00      	cmp	r3, #0
 800894a:	db52      	blt.n	80089f2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 800894c:	2b09      	cmp	r3, #9
 800894e:	d850      	bhi.n	80089f2 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008950:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <STTS751_TEMP_GetOutputDataRate+0x48>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	0800898f 	.word	0x0800898f
 800895c:	08008999 	.word	0x08008999
 8008960:	080089a3 	.word	0x080089a3
 8008964:	080089ad 	.word	0x080089ad
 8008968:	080089b7 	.word	0x080089b7
 800896c:	080089c1 	.word	0x080089c1
 8008970:	080089cb 	.word	0x080089cb
 8008974:	080089d5 	.word	0x080089d5
 8008978:	080089df 	.word	0x080089df
 800897c:	080089e9 	.word	0x080089e9
 8008980:	2b80      	cmp	r3, #128	@ 0x80
 8008982:	d136      	bne.n	80089f2 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
      break;
 800898c:	e035      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8008994:	601a      	str	r2, [r3, #0]
      break;
 8008996:	e030      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 800899e:	601a      	str	r2, [r3, #0]
      break;
 80089a0:	e02b      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80089a8:	601a      	str	r2, [r3, #0]
      break;
 80089aa:	e026      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80089b2:	601a      	str	r2, [r3, #0]
      break;
 80089b4:	e021      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80089bc:	601a      	str	r2, [r3, #0]
      break;
 80089be:	e01c      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80089c6:	601a      	str	r2, [r3, #0]
      break;
 80089c8:	e017      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80089d0:	601a      	str	r2, [r3, #0]
      break;
 80089d2:	e012      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80089da:	601a      	str	r2, [r3, #0]
      break;
 80089dc:	e00d      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80089e4:	601a      	str	r2, [r3, #0]
      break;
 80089e6:	e008      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f04f 4284 	mov.w	r2, #1107296256	@ 0x42000000
 80089ee:	601a      	str	r2, [r3, #0]
      break;
 80089f0:	e003      	b.n	80089fa <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	60fb      	str	r3, [r7, #12]
      break;
 80089f8:	bf00      	nop
  }

  return ret;
 80089fa:	68fb      	ldr	r3, [r7, #12]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3320      	adds	r3, #32
 8008a12:	f107 020e 	add.w	r2, r7, #14
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fa75 	bl	8008f08 <stts751_resolution_get>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d002      	beq.n	8008a2a <STTS751_TEMP_SetOutputDataRate+0x26>
  {
    return STTS751_ERROR;
 8008a24:	f04f 33ff 	mov.w	r3, #4294967295
 8008a28:	e09a      	b.n	8008b60 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008a2a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8008a2e:	6838      	ldr	r0, [r7, #0]
 8008a30:	f7f8 fb34 	bl	800109c <__aeabi_fcmpeq>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00e      	beq.n	8008a58 <STTS751_TEMP_SetOutputDataRate+0x54>
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d10b      	bne.n	8008a58 <STTS751_TEMP_SetOutputDataRate+0x54>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3320      	adds	r3, #32
 8008a44:	2101      	movs	r1, #1
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fa38 	bl	8008ebc <stts751_resolution_set>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <STTS751_TEMP_SetOutputDataRate+0x54>
    {
      return STTS751_ERROR;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	e083      	b.n	8008b60 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008a58:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8008a5c:	6838      	ldr	r0, [r7, #0]
 8008a5e:	f7f8 fb1d 	bl	800109c <__aeabi_fcmpeq>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d011      	beq.n	8008a8c <STTS751_TEMP_SetOutputDataRate+0x88>
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d002      	beq.n	8008a74 <STTS751_TEMP_SetOutputDataRate+0x70>
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d10b      	bne.n	8008a8c <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3320      	adds	r3, #32
 8008a78:	2100      	movs	r1, #0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fa1e 	bl	8008ebc <stts751_resolution_set>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	e069      	b.n	8008b60 <STTS751_TEMP_SetOutputDataRate+0x15c>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008a8c:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8008a90:	6838      	ldr	r0, [r7, #0]
 8008a92:	f7f8 fb17 	bl	80010c4 <__aeabi_fcmple>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <STTS751_TEMP_SetOutputDataRate+0x9c>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e050      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008aa0:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8008aa4:	6838      	ldr	r0, [r7, #0]
 8008aa6:	f7f8 fb0d 	bl	80010c4 <__aeabi_fcmple>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <STTS751_TEMP_SetOutputDataRate+0xb0>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e046      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008ab4:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f7f8 fb03 	bl	80010c4 <__aeabi_fcmple>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <STTS751_TEMP_SetOutputDataRate+0xc4>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e03c      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008ac8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008acc:	6838      	ldr	r0, [r7, #0]
 8008ace:	f7f8 faf9 	bl	80010c4 <__aeabi_fcmple>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <STTS751_TEMP_SetOutputDataRate+0xd8>
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e032      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008adc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f7f8 faef 	bl	80010c4 <__aeabi_fcmple>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <STTS751_TEMP_SetOutputDataRate+0xec>
 8008aec:	2304      	movs	r3, #4
 8008aee:	e028      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008af0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008af4:	6838      	ldr	r0, [r7, #0]
 8008af6:	f7f8 fae5 	bl	80010c4 <__aeabi_fcmple>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <STTS751_TEMP_SetOutputDataRate+0x100>
 8008b00:	2305      	movs	r3, #5
 8008b02:	e01e      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008b04:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8008b08:	6838      	ldr	r0, [r7, #0]
 8008b0a:	f7f8 fadb 	bl	80010c4 <__aeabi_fcmple>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <STTS751_TEMP_SetOutputDataRate+0x114>
 8008b14:	2306      	movs	r3, #6
 8008b16:	e014      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008b18:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8008b1c:	6838      	ldr	r0, [r7, #0]
 8008b1e:	f7f8 fad1 	bl	80010c4 <__aeabi_fcmple>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <STTS751_TEMP_SetOutputDataRate+0x128>
 8008b28:	2307      	movs	r3, #7
 8008b2a:	e00a      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008b2c:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8008b30:	6838      	ldr	r0, [r7, #0]
 8008b32:	f7f8 fac7 	bl	80010c4 <__aeabi_fcmple>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <STTS751_TEMP_SetOutputDataRate+0x13c>
 8008b3c:	2308      	movs	r3, #8
 8008b3e:	e000      	b.n	8008b42 <STTS751_TEMP_SetOutputDataRate+0x13e>
 8008b40:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8008b42:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3320      	adds	r3, #32
 8008b48:	7bfa      	ldrb	r2, [r7, #15]
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8de 	bl	8008d0e <stts751_temp_data_rate_set>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <STTS751_TEMP_SetOutputDataRate+0x15a>
  {
    return STTS751_ERROR;
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	e000      	b.n	8008b60 <STTS751_TEMP_SetOutputDataRate+0x15c>
  }

  return STTS751_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3320      	adds	r3, #32
 8008b76:	f107 020e 	add.w	r2, r7, #14
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 f9fb 	bl	8008f78 <stts751_temperature_raw_get>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	e008      	b.n	8008ba0 <STTS751_TEMP_GetTemperature+0x38>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f8a6 	bl	8008ce4 <stts751_from_lsb_to_celsius>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ba8:	b590      	push	{r4, r7, lr}
 8008baa:	b089      	sub	sp, #36	@ 0x24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	72fb      	strb	r3, [r7, #11]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11f      	bne.n	8008c0c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	83fb      	strh	r3, [r7, #30]
 8008bd0:	e018      	b.n	8008c04 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	695c      	ldr	r4, [r3, #20]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	7b1b      	ldrb	r3, [r3, #12]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	8bfb      	ldrh	r3, [r7, #30]
 8008be2:	4413      	add	r3, r2
 8008be4:	b299      	uxth	r1, r3
 8008be6:	8bfb      	ldrh	r3, [r7, #30]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	441a      	add	r2, r3
 8008bec:	2301      	movs	r3, #1
 8008bee:	47a0      	blx	r4
 8008bf0:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d002      	beq.n	8008bfe <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfc:	e007      	b.n	8008c0e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008bfe:	8bfb      	ldrh	r3, [r7, #30]
 8008c00:	3301      	adds	r3, #1
 8008c02:	83fb      	strh	r3, [r7, #30]
 8008c04:	8bfa      	ldrh	r2, [r7, #30]
 8008c06:	893b      	ldrh	r3, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d3e2      	bcc.n	8008bd2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3724      	adds	r7, #36	@ 0x24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd90      	pop	{r4, r7, pc}

08008c16 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008c16:	b590      	push	{r4, r7, lr}
 8008c18:	b089      	sub	sp, #36	@ 0x24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	461a      	mov	r2, r3
 8008c22:	460b      	mov	r3, r1
 8008c24:	72fb      	strb	r3, [r7, #11]
 8008c26:	4613      	mov	r3, r2
 8008c28:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d11f      	bne.n	8008c7a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	83fb      	strh	r3, [r7, #30]
 8008c3e:	e018      	b.n	8008c72 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	691c      	ldr	r4, [r3, #16]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	7b1b      	ldrb	r3, [r3, #12]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	7afb      	ldrb	r3, [r7, #11]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	8bfb      	ldrh	r3, [r7, #30]
 8008c50:	4413      	add	r3, r2
 8008c52:	b299      	uxth	r1, r3
 8008c54:	8bfb      	ldrh	r3, [r7, #30]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	441a      	add	r2, r3
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	47a0      	blx	r4
 8008c5e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	e007      	b.n	8008c7c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008c6c:	8bfb      	ldrh	r3, [r7, #30]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	83fb      	strh	r3, [r7, #30]
 8008c72:	8bfa      	ldrh	r2, [r7, #30]
 8008c74:	893b      	ldrh	r3, [r7, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3e2      	bcc.n	8008c40 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3724      	adds	r7, #36	@ 0x24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}

08008c84 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	460b      	mov	r3, r1
 8008c92:	72fb      	strb	r3, [r7, #11]
 8008c94:	4613      	mov	r3, r2
 8008c96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685c      	ldr	r4, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	68d8      	ldr	r0, [r3, #12]
 8008ca0:	893b      	ldrh	r3, [r7, #8]
 8008ca2:	7af9      	ldrb	r1, [r7, #11]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	47a0      	blx	r4
 8008ca8:	6178      	str	r0, [r7, #20]

  return ret;
 8008caa:	697b      	ldr	r3, [r7, #20]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd90      	pop	{r4, r7, pc}

08008cb4 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	72fb      	strb	r3, [r7, #11]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681c      	ldr	r4, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68d8      	ldr	r0, [r3, #12]
 8008cd0:	893b      	ldrh	r3, [r7, #8]
 8008cd2:	7af9      	ldrb	r1, [r7, #11]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	47a0      	blx	r4
 8008cd8:	6178      	str	r0, [r7, #20]

  return ret;
 8008cda:	697b      	ldr	r3, [r7, #20]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd90      	pop	{r4, r7, pc}

08008ce4 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f7 ffea 	bl	8000ccc <__aeabi_i2f>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f8 f8ec 	bl	8000edc <__aeabi_fdiv>
 8008d04:	4603      	mov	r3, r0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b086      	sub	sp, #24
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008d1a:	23aa      	movs	r3, #170	@ 0xaa
 8008d1c:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008d1e:	f107 020c 	add.w	r2, r7, #12
 8008d22:	2301      	movs	r3, #1
 8008d24:	2104      	movs	r1, #4
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff ffac 	bl	8008c84 <stts751_read_reg>
 8008d2c:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10f      	bne.n	8008d54 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	f003 030f 	and.w	r3, r3, #15
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	7b3b      	ldrb	r3, [r7, #12]
 8008d3e:	f362 0303 	bfi	r3, r2, #0, #4
 8008d42:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008d44:	f107 020c 	add.w	r2, r7, #12
 8008d48:	2301      	movs	r3, #1
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff ffb1 	bl	8008cb4 <stts751_write_reg>
 8008d52:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d107      	bne.n	8008d6a <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008d5a:	f107 0210 	add.w	r2, r7, #16
 8008d5e:	2301      	movs	r3, #1
 8008d60:	2103      	movs	r1, #3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff ff8e 	bl	8008c84 <stts751_read_reg>
 8008d68:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d111      	bne.n	8008d94 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	09db      	lsrs	r3, r3, #7
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	7c3b      	ldrb	r3, [r7, #16]
 8008d7e:	f362 1386 	bfi	r3, r2, #6, #1
 8008d82:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008d84:	f107 0210 	add.w	r2, r7, #16
 8008d88:	2301      	movs	r3, #1
 8008d8a:	2103      	movs	r1, #3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff91 	bl	8008cb4 <stts751_write_reg>
 8008d92:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <stts751_temp_data_rate_set+0xa2>
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	2b90      	cmp	r3, #144	@ 0x90
 8008d9e:	d107      	bne.n	8008db0 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008da0:	f107 020b 	add.w	r2, r7, #11
 8008da4:	2301      	movs	r3, #1
 8008da6:	210f      	movs	r1, #15
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff83 	bl	8008cb4 <stts751_write_reg>
 8008dae:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008db0:	697b      	ldr	r3, [r7, #20]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008dc6:	f107 0210 	add.w	r2, r7, #16
 8008dca:	2301      	movs	r3, #1
 8008dcc:	2104      	movs	r1, #4
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ff58 	bl	8008c84 <stts751_read_reg>
 8008dd4:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008ddc:	f107 020c 	add.w	r2, r7, #12
 8008de0:	2301      	movs	r3, #1
 8008de2:	2103      	movs	r1, #3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff4d 	bl	8008c84 <stts751_read_reg>
 8008dea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008dec:	7b3b      	ldrb	r3, [r7, #12]
 8008dee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	01db      	lsls	r3, r3, #7
 8008df6:	7c3a      	ldrb	r2, [r7, #16]
 8008df8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008dfc:	b2d2      	uxtb	r2, r2
 8008dfe:	4413      	add	r3, r2
 8008e00:	2b90      	cmp	r3, #144	@ 0x90
 8008e02:	d025      	beq.n	8008e50 <stts751_temp_data_rate_get+0x94>
 8008e04:	2b90      	cmp	r3, #144	@ 0x90
 8008e06:	dc4f      	bgt.n	8008ea8 <stts751_temp_data_rate_get+0xec>
 8008e08:	2b09      	cmp	r3, #9
 8008e0a:	dc1b      	bgt.n	8008e44 <stts751_temp_data_rate_get+0x88>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	db4b      	blt.n	8008ea8 <stts751_temp_data_rate_get+0xec>
 8008e10:	2b09      	cmp	r3, #9
 8008e12:	d849      	bhi.n	8008ea8 <stts751_temp_data_rate_get+0xec>
 8008e14:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <stts751_temp_data_rate_get+0x60>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e59 	.word	0x08008e59
 8008e20:	08008e61 	.word	0x08008e61
 8008e24:	08008e69 	.word	0x08008e69
 8008e28:	08008e71 	.word	0x08008e71
 8008e2c:	08008e79 	.word	0x08008e79
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e89 	.word	0x08008e89
 8008e38:	08008e91 	.word	0x08008e91
 8008e3c:	08008e99 	.word	0x08008e99
 8008e40:	08008ea1 	.word	0x08008ea1
 8008e44:	2b80      	cmp	r3, #128	@ 0x80
 8008e46:	d12f      	bne.n	8008ea8 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2280      	movs	r2, #128	@ 0x80
 8008e4c:	701a      	strb	r2, [r3, #0]
      break;
 8008e4e:	e02f      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2290      	movs	r2, #144	@ 0x90
 8008e54:	701a      	strb	r2, [r3, #0]
      break;
 8008e56:	e02b      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	701a      	strb	r2, [r3, #0]
      break;
 8008e5e:	e027      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
      break;
 8008e66:	e023      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	701a      	strb	r2, [r3, #0]
      break;
 8008e6e:	e01f      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2203      	movs	r2, #3
 8008e74:	701a      	strb	r2, [r3, #0]
      break;
 8008e76:	e01b      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	701a      	strb	r2, [r3, #0]
      break;
 8008e7e:	e017      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2205      	movs	r2, #5
 8008e84:	701a      	strb	r2, [r3, #0]
      break;
 8008e86:	e013      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2206      	movs	r2, #6
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	e00f      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2207      	movs	r2, #7
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e00b      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	701a      	strb	r2, [r3, #0]
      break;
 8008e9e:	e007      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2209      	movs	r2, #9
 8008ea4:	701a      	strb	r2, [r3, #0]
      break;
 8008ea6:	e003      	b.n	8008eb0 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2280      	movs	r2, #128	@ 0x80
 8008eac:	701a      	strb	r2, [r3, #0]
      break;
 8008eae:	bf00      	nop
  }

  return ret;
 8008eb0:	697b      	ldr	r3, [r7, #20]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop

08008ebc <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008ec8:	f107 0208 	add.w	r2, r7, #8
 8008ecc:	2301      	movs	r3, #1
 8008ece:	2103      	movs	r1, #3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7ff fed7 	bl	8008c84 <stts751_read_reg>
 8008ed6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10f      	bne.n	8008efe <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	7a3b      	ldrb	r3, [r7, #8]
 8008ee8:	f362 0383 	bfi	r3, r2, #2, #2
 8008eec:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008eee:	f107 0208 	add.w	r2, r7, #8
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	2103      	movs	r1, #3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff fedc 	bl	8008cb4 <stts751_write_reg>
 8008efc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008efe:	68fb      	ldr	r3, [r7, #12]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008f12:	f107 0208 	add.w	r2, r7, #8
 8008f16:	2301      	movs	r3, #1
 8008f18:	2103      	movs	r1, #3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff feb2 	bl	8008c84 <stts751_read_reg>
 8008f20:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008f22:	7a3b      	ldrb	r3, [r7, #8]
 8008f24:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d81a      	bhi.n	8008f64 <stts751_resolution_get+0x5c>
 8008f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <stts751_resolution_get+0x2c>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f45 	.word	0x08008f45
 8008f40:	08008f5d 	.word	0x08008f5d
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2202      	movs	r2, #2
 8008f48:	701a      	strb	r2, [r3, #0]
      break;
 8008f4a:	e00f      	b.n	8008f6c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
      break;
 8008f52:	e00b      	b.n	8008f6c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2201      	movs	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
      break;
 8008f5a:	e007      	b.n	8008f6c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2203      	movs	r2, #3
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e003      	b.n	8008f6c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2202      	movs	r2, #2
 8008f68:	701a      	strb	r2, [r3, #0]
      break;
 8008f6a:	bf00      	nop
  }

  return ret;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop

08008f78 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	2301      	movs	r3, #1
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fe79 	bl	8008c84 <stts751_read_reg>
 8008f92:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d117      	bne.n	8008fca <stts751_temperature_raw_get+0x52>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8008f9a:	f107 0208 	add.w	r2, r7, #8
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	2102      	movs	r1, #2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fe6e 	bl	8008c84 <stts751_read_reg>
 8008fa8:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8008faa:	7a7b      	ldrb	r3, [r7, #9]
 8008fac:	b21a      	sxth	r2, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	7a3a      	ldrb	r2, [r7, #8]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	b21a      	sxth	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008fca:	68fb      	ldr	r3, [r7, #12]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008fe0:	f107 0208 	add.w	r2, r7, #8
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	2103      	movs	r1, #3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff fe4b 	bl	8008c84 <stts751_read_reg>
 8008fee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10f      	bne.n	8009016 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	7a3b      	ldrb	r3, [r7, #8]
 8009000:	f362 13c7 	bfi	r3, r2, #7, #1
 8009004:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8009006:	f107 0208 	add.w	r2, r7, #8
 800900a:	2301      	movs	r3, #1
 800900c:	2103      	movs	r1, #3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff fe50 	bl	8008cb4 <stts751_write_reg>
 8009014:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009016:	68fb      	ldr	r3, [r7, #12]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	2301      	movs	r3, #1
 800902e:	21fd      	movs	r1, #253	@ 0xfd
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fe27 	bl	8008c84 <stts751_read_reg>
 8009036:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d107      	bne.n	800904e <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	2301      	movs	r3, #1
 8009044:	21fe      	movs	r1, #254	@ 0xfe
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fe1c 	bl	8008c84 <stts751_read_reg>
 800904c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d107      	bne.n	8009064 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	1c9a      	adds	r2, r3, #2
 8009058:	2301      	movs	r3, #1
 800905a:	21ff      	movs	r1, #255	@ 0xff
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7ff fe11 	bl	8008c84 <stts751_read_reg>
 8009062:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8009064:	68fb      	ldr	r3, [r7, #12]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08c      	sub	sp, #48	@ 0x30
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
 800907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800907e:	2301      	movs	r3, #1
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d07c      	beq.n	8009186 <IKS01A3_ENV_SENSOR_Init+0x116>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b02      	cmp	r3, #2
 8009090:	f200 80b2 	bhi.w	80091f8 <IKS01A3_ENV_SENSOR_Init+0x188>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <IKS01A3_ENV_SENSOR_Init+0x32>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d039      	beq.n	8009114 <IKS01A3_ENV_SENSOR_Init+0xa4>
 80090a0:	e0aa      	b.n	80091f8 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80090a2:	6838      	ldr	r0, [r7, #0]
 80090a4:	f000 f934 	bl	8009310 <HTS221_0_Probe>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	e0df      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80090b4:	4a71      	ldr	r2, [pc, #452]	@ (800927c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	4970      	ldr	r1, [pc, #448]	@ (8009280 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80090c6:	f107 0108 	add.w	r1, r7, #8
 80090ca:	4610      	mov	r0, r2
 80090cc:	4798      	blx	r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80090d4:	f06f 0306 	mvn.w	r3, #6
 80090d8:	e0cc      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80090da:	7a3b      	ldrb	r3, [r7, #8]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d103      	bne.n	80090e8 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	f043 0301 	orr.w	r3, r3, #1
 80090e6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80090e8:	7abb      	ldrb	r3, [r7, #10]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d103      	bne.n	80090f6 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	f043 0304 	orr.w	r3, r3, #4
 80090f4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80090f6:	7a7b      	ldrb	r3, [r7, #9]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d103      	bne.n	8009104 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	f043 0302 	orr.w	r3, r3, #2
 8009102:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d17a      	bne.n	8009200 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	f043 0308 	orr.w	r3, r3, #8
 8009110:	623b      	str	r3, [r7, #32]
      }
      break;
 8009112:	e075      	b.n	8009200 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8009114:	6838      	ldr	r0, [r7, #0]
 8009116:	f000 f9c5 	bl	80094a4 <LPS22HH_0_Probe>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8009120:	f04f 33ff 	mov.w	r3, #4294967295
 8009124:	e0a6      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009126:	4a55      	ldr	r2, [pc, #340]	@ (800927c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4953      	ldr	r1, [pc, #332]	@ (8009280 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009146:	f06f 0306 	mvn.w	r3, #6
 800914a:	e093      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800914c:	7a3b      	ldrb	r3, [r7, #8]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d103      	bne.n	800915a <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800915a:	7abb      	ldrb	r3, [r7, #10]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d103      	bne.n	8009168 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	f043 0304 	orr.w	r3, r3, #4
 8009166:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8009168:	7a7b      	ldrb	r3, [r7, #9]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d103      	bne.n	8009176 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d143      	bne.n	8009204 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	f043 0308 	orr.w	r3, r3, #8
 8009182:	623b      	str	r3, [r7, #32]
      }
      break;
 8009184:	e03e      	b.n	8009204 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8009186:	6838      	ldr	r0, [r7, #0]
 8009188:	f000 fa58 	bl	800963c <STTS751_0_Probe>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8009192:	f04f 33ff 	mov.w	r3, #4294967295
 8009196:	e06d      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009198:	4a38      	ldr	r2, [pc, #224]	@ (800927c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	4937      	ldr	r1, [pc, #220]	@ (8009280 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80091aa:	f107 0108 	add.w	r1, r7, #8
 80091ae:	4610      	mov	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80091b8:	f06f 0306 	mvn.w	r3, #6
 80091bc:	e05a      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80091be:	7a3b      	ldrb	r3, [r7, #8]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d103      	bne.n	80091cc <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80091cc:	7abb      	ldrb	r3, [r7, #10]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d103      	bne.n	80091da <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	f043 0304 	orr.w	r3, r3, #4
 80091d8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 80091da:	7a7b      	ldrb	r3, [r7, #9]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d103      	bne.n	80091e8 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	f043 0302 	orr.w	r3, r3, #2
 80091e6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d10c      	bne.n	8009208 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	623b      	str	r3, [r7, #32]
      }
      break;
 80091f6:	e007      	b.n	8009208 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80091f8:	f06f 0301 	mvn.w	r3, #1
 80091fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80091fe:	e004      	b.n	800920a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009200:	bf00      	nop
 8009202:	e002      	b.n	800920a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009204:	bf00      	nop
 8009206:	e000      	b.n	800920a <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 8009208:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	e02f      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009214:	2300      	movs	r3, #0
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
 8009218:	e028      	b.n	800926c <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	4013      	ands	r3, r2
 8009220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009222:	429a      	cmp	r2, r3
 8009224:	d11c      	bne.n	8009260 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 8009226:	6a3a      	ldr	r2, [r7, #32]
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	4013      	ands	r3, r2
 800922c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800922e:	429a      	cmp	r2, r3
 8009230:	d116      	bne.n	8009260 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009232:	4a14      	ldr	r2, [pc, #80]	@ (8009284 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800923a:	4913      	ldr	r1, [pc, #76]	@ (8009288 <IKS01A3_ENV_SENSOR_Init+0x218>)
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	0092      	lsls	r2, r2, #2
 8009240:	4413      	add	r3, r2
 8009242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	490d      	ldr	r1, [pc, #52]	@ (8009280 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800925a:	f06f 0304 	mvn.w	r3, #4
 800925e:	e009      	b.n	8009274 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8009260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	3301      	adds	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	@ 0x24
 800926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926e:	2b03      	cmp	r3, #3
 8009270:	d9d3      	bls.n	800921a <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8009272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009274:	4618      	mov	r0, r3
 8009276:	3730      	adds	r7, #48	@ 0x30
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200006e0 	.word	0x200006e0
 8009280:	200006a4 	.word	0x200006a4
 8009284:	20000158 	.word	0x20000158
 8009288:	200006b0 	.word	0x200006b0

0800928c <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d903      	bls.n	80092a6 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800929e:	f06f 0301 	mvn.w	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	e027      	b.n	80092f6 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80092a6:	4a16      	ldr	r2, [pc, #88]	@ (8009300 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4013      	ands	r3, r2
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d11b      	bne.n	80092f0 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80092b8:	4a12      	ldr	r2, [pc, #72]	@ (8009304 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c0:	4911      	ldr	r1, [pc, #68]	@ (8009308 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	0092      	lsls	r2, r2, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	490f      	ldr	r1, [pc, #60]	@ (800930c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092e2:	f06f 0304 	mvn.w	r3, #4
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e005      	b.n	80092f6 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	617b      	str	r3, [r7, #20]
 80092ee:	e002      	b.n	80092f6 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092f0:	f06f 0301 	mvn.w	r3, #1
 80092f4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80092f6:	697b      	ldr	r3, [r7, #20]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	200006ec 	.word	0x200006ec
 8009304:	20000158 	.word	0x20000158
 8009308:	200006b0 	.word	0x200006b0
 800930c:	200006a4 	.word	0x200006a4

08009310 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b092      	sub	sp, #72	@ 0x48
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 8009318:	2300      	movs	r3, #0
 800931a:	647b      	str	r3, [r7, #68]	@ 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800931c:	2300      	movs	r3, #0
 800931e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8009320:	23bf      	movs	r3, #191	@ 0xbf
 8009322:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009326:	4b51      	ldr	r3, [pc, #324]	@ (800946c <HTS221_0_Probe+0x15c>)
 8009328:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800932a:	4b51      	ldr	r3, [pc, #324]	@ (8009470 <HTS221_0_Probe+0x160>)
 800932c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800932e:	4b51      	ldr	r3, [pc, #324]	@ (8009474 <HTS221_0_Probe+0x164>)
 8009330:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009332:	4b51      	ldr	r3, [pc, #324]	@ (8009478 <HTS221_0_Probe+0x168>)
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009336:	4b51      	ldr	r3, [pc, #324]	@ (800947c <HTS221_0_Probe+0x16c>)
 8009338:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800933a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800933e:	4619      	mov	r1, r3
 8009340:	484f      	ldr	r0, [pc, #316]	@ (8009480 <HTS221_0_Probe+0x170>)
 8009342:	f7f9 fb77 	bl	8002a34 <HTS221_RegisterBusIO>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800934c:	f06f 0306 	mvn.w	r3, #6
 8009350:	647b      	str	r3, [r7, #68]	@ 0x44
 8009352:	e085      	b.n	8009460 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8009354:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8009358:	4619      	mov	r1, r3
 800935a:	4849      	ldr	r0, [pc, #292]	@ (8009480 <HTS221_0_Probe+0x170>)
 800935c:	f7f9 fbf3 	bl	8002b46 <HTS221_ReadID>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009366:	f06f 0306 	mvn.w	r3, #6
 800936a:	647b      	str	r3, [r7, #68]	@ 0x44
 800936c:	e078      	b.n	8009460 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 800936e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009372:	2bbc      	cmp	r3, #188	@ 0xbc
 8009374:	d003      	beq.n	800937e <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009376:	f06f 0306 	mvn.w	r3, #6
 800937a:	647b      	str	r3, [r7, #68]	@ 0x44
 800937c:	e070      	b.n	8009460 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800937e:	f107 0308 	add.w	r3, r7, #8
 8009382:	4619      	mov	r1, r3
 8009384:	483e      	ldr	r0, [pc, #248]	@ (8009480 <HTS221_0_Probe+0x170>)
 8009386:	f7f9 fbf5 	bl	8002b74 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 800938a:	7a3b      	ldrb	r3, [r7, #8]
 800938c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800938e:	7a7b      	ldrb	r3, [r7, #9]
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8009394:	7abb      	ldrb	r3, [r7, #10]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 80093a0:	4a38      	ldr	r2, [pc, #224]	@ (8009484 <HTS221_0_Probe+0x174>)
 80093a2:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80093a4:	4b38      	ldr	r3, [pc, #224]	@ (8009488 <HTS221_0_Probe+0x178>)
 80093a6:	4a36      	ldr	r2, [pc, #216]	@ (8009480 <HTS221_0_Probe+0x170>)
 80093a8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80093aa:	4b38      	ldr	r3, [pc, #224]	@ (800948c <HTS221_0_Probe+0x17c>)
 80093ac:	4a38      	ldr	r2, [pc, #224]	@ (8009490 <HTS221_0_Probe+0x180>)
 80093ae:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80093b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d11d      	bne.n	80093f2 <HTS221_0_Probe+0xe2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d018      	beq.n	80093f2 <HTS221_0_Probe+0xe2>
 80093c0:	7a3b      	ldrb	r3, [r7, #8]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d115      	bne.n	80093f2 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80093c6:	4b33      	ldr	r3, [pc, #204]	@ (8009494 <HTS221_0_Probe+0x184>)
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4a33      	ldr	r2, [pc, #204]	@ (8009498 <HTS221_0_Probe+0x188>)
 80093cc:	4933      	ldr	r1, [pc, #204]	@ (800949c <HTS221_0_Probe+0x18c>)
 80093ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 80093d2:	4b2e      	ldr	r3, [pc, #184]	@ (800948c <HTS221_0_Probe+0x17c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a2b      	ldr	r2, [pc, #172]	@ (8009488 <HTS221_0_Probe+0x178>)
 80093da:	6812      	ldr	r2, [r2, #0]
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80093e6:	f06f 0304 	mvn.w	r3, #4
 80093ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80093ec:	e001      	b.n	80093f2 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 80093f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d11d      	bne.n	8009434 <HTS221_0_Probe+0x124>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <HTS221_0_Probe+0x124>
 8009402:	7abb      	ldrb	r3, [r7, #10]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d115      	bne.n	8009434 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009408:	4b22      	ldr	r3, [pc, #136]	@ (8009494 <HTS221_0_Probe+0x184>)
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	4a22      	ldr	r2, [pc, #136]	@ (8009498 <HTS221_0_Probe+0x188>)
 800940e:	4924      	ldr	r1, [pc, #144]	@ (80094a0 <HTS221_0_Probe+0x190>)
 8009410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009414:	4b1d      	ldr	r3, [pc, #116]	@ (800948c <HTS221_0_Probe+0x17c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a1b      	ldr	r2, [pc, #108]	@ (8009488 <HTS221_0_Probe+0x178>)
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	4610      	mov	r0, r2
 8009420:	4798      	blx	r3
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009428:	f06f 0304 	mvn.w	r3, #4
 800942c:	647b      	str	r3, [r7, #68]	@ 0x44
 800942e:	e001      	b.n	8009434 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009436:	2b00      	cmp	r3, #0
 8009438:	d107      	bne.n	800944a <HTS221_0_Probe+0x13a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009444:	f06f 0304 	mvn.w	r3, #4
 8009448:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800944a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800944c:	2b00      	cmp	r3, #0
 800944e:	d107      	bne.n	8009460 <HTS221_0_Probe+0x150>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f003 0308 	and.w	r3, r3, #8
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800945a:	f06f 0304 	mvn.w	r3, #4
 800945e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 8009460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009462:	4618      	mov	r0, r3
 8009464:	3748      	adds	r7, #72	@ 0x48
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	08002575 	.word	0x08002575
 8009470:	080025d9 	.word	0x080025d9
 8009474:	0800268d 	.word	0x0800268d
 8009478:	08002629 	.word	0x08002629
 800947c:	080026f1 	.word	0x080026f1
 8009480:	200006f8 	.word	0x200006f8
 8009484:	200006ec 	.word	0x200006ec
 8009488:	200006a4 	.word	0x200006a4
 800948c:	200006e0 	.word	0x200006e0
 8009490:	20000004 	.word	0x20000004
 8009494:	20000158 	.word	0x20000158
 8009498:	200006b0 	.word	0x200006b0
 800949c:	20000028 	.word	0x20000028
 80094a0:	20000014 	.word	0x20000014

080094a4 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b092      	sub	sp, #72	@ 0x48
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80094b0:	2300      	movs	r3, #0
 80094b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80094b4:	23bb      	movs	r3, #187	@ 0xbb
 80094b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80094ba:	4b52      	ldr	r3, [pc, #328]	@ (8009604 <LPS22HH_0_Probe+0x160>)
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80094be:	4b52      	ldr	r3, [pc, #328]	@ (8009608 <LPS22HH_0_Probe+0x164>)
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80094c2:	4b52      	ldr	r3, [pc, #328]	@ (800960c <LPS22HH_0_Probe+0x168>)
 80094c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80094c6:	4b52      	ldr	r3, [pc, #328]	@ (8009610 <LPS22HH_0_Probe+0x16c>)
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80094ca:	4b52      	ldr	r3, [pc, #328]	@ (8009614 <LPS22HH_0_Probe+0x170>)
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80094ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094d2:	4619      	mov	r1, r3
 80094d4:	4850      	ldr	r0, [pc, #320]	@ (8009618 <LPS22HH_0_Probe+0x174>)
 80094d6:	f7fc fb1f 	bl	8005b18 <LPS22HH_RegisterBusIO>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094e0:	f06f 0306 	mvn.w	r3, #6
 80094e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094e6:	e087      	b.n	80095f8 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 80094e8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 80094ec:	4619      	mov	r1, r3
 80094ee:	484a      	ldr	r0, [pc, #296]	@ (8009618 <LPS22HH_0_Probe+0x174>)
 80094f0:	f7fc fbbb 	bl	8005c6a <LPS22HH_ReadID>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094fa:	f06f 0306 	mvn.w	r3, #6
 80094fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009500:	e07a      	b.n	80095f8 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8009502:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009506:	2bb3      	cmp	r3, #179	@ 0xb3
 8009508:	d003      	beq.n	8009512 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800950a:	f06f 0306 	mvn.w	r3, #6
 800950e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009510:	e072      	b.n	80095f8 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4619      	mov	r1, r3
 8009518:	483f      	ldr	r0, [pc, #252]	@ (8009618 <LPS22HH_0_Probe+0x174>)
 800951a:	f7fc fbbd 	bl	8005c98 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 800951e:	7a3b      	ldrb	r3, [r7, #8]
 8009520:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8009522:	7a7b      	ldrb	r3, [r7, #9]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8009528:	7abb      	ldrb	r3, [r7, #10]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8009534:	4a39      	ldr	r2, [pc, #228]	@ (800961c <LPS22HH_0_Probe+0x178>)
 8009536:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8009538:	4b39      	ldr	r3, [pc, #228]	@ (8009620 <LPS22HH_0_Probe+0x17c>)
 800953a:	4a37      	ldr	r2, [pc, #220]	@ (8009618 <LPS22HH_0_Probe+0x174>)
 800953c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800953e:	4b39      	ldr	r3, [pc, #228]	@ (8009624 <LPS22HH_0_Probe+0x180>)
 8009540:	4a39      	ldr	r2, [pc, #228]	@ (8009628 <LPS22HH_0_Probe+0x184>)
 8009542:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009546:	2b00      	cmp	r3, #0
 8009548:	d11e      	bne.n	8009588 <LPS22HH_0_Probe+0xe4>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	d019      	beq.n	8009588 <LPS22HH_0_Probe+0xe4>
 8009554:	7a3b      	ldrb	r3, [r7, #8]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d116      	bne.n	8009588 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800955a:	4b34      	ldr	r3, [pc, #208]	@ (800962c <LPS22HH_0_Probe+0x188>)
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	4a34      	ldr	r2, [pc, #208]	@ (8009630 <LPS22HH_0_Probe+0x18c>)
 8009560:	3304      	adds	r3, #4
 8009562:	4934      	ldr	r1, [pc, #208]	@ (8009634 <LPS22HH_0_Probe+0x190>)
 8009564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009568:	4b2e      	ldr	r3, [pc, #184]	@ (8009624 <LPS22HH_0_Probe+0x180>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2c      	ldr	r2, [pc, #176]	@ (8009620 <LPS22HH_0_Probe+0x17c>)
 8009570:	6852      	ldr	r2, [r2, #4]
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800957c:	f06f 0304 	mvn.w	r3, #4
 8009580:	647b      	str	r3, [r7, #68]	@ 0x44
 8009582:	e001      	b.n	8009588 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009584:	2300      	movs	r3, #0
 8009586:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800958a:	2b00      	cmp	r3, #0
 800958c:	d11e      	bne.n	80095cc <LPS22HH_0_Probe+0x128>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d019      	beq.n	80095cc <LPS22HH_0_Probe+0x128>
 8009598:	7a7b      	ldrb	r3, [r7, #9]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d116      	bne.n	80095cc <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800959e:	4b23      	ldr	r3, [pc, #140]	@ (800962c <LPS22HH_0_Probe+0x188>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	4a23      	ldr	r2, [pc, #140]	@ (8009630 <LPS22HH_0_Probe+0x18c>)
 80095a4:	3304      	adds	r3, #4
 80095a6:	4924      	ldr	r1, [pc, #144]	@ (8009638 <LPS22HH_0_Probe+0x194>)
 80095a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80095ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009624 <LPS22HH_0_Probe+0x180>)
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009620 <LPS22HH_0_Probe+0x17c>)
 80095b4:	6852      	ldr	r2, [r2, #4]
 80095b6:	4610      	mov	r0, r2
 80095b8:	4798      	blx	r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80095c0:	f06f 0304 	mvn.w	r3, #4
 80095c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80095c6:	e001      	b.n	80095cc <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80095cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d107      	bne.n	80095e2 <LPS22HH_0_Probe+0x13e>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095dc:	f06f 0304 	mvn.w	r3, #4
 80095e0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 80095e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d107      	bne.n	80095f8 <LPS22HH_0_Probe+0x154>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095f2:	f06f 0304 	mvn.w	r3, #4
 80095f6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 80095f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3748      	adds	r7, #72	@ 0x48
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	08002575 	.word	0x08002575
 8009608:	080025d9 	.word	0x080025d9
 800960c:	0800268d 	.word	0x0800268d
 8009610:	08002629 	.word	0x08002629
 8009614:	080026f1 	.word	0x080026f1
 8009618:	2000072c 	.word	0x2000072c
 800961c:	200006ec 	.word	0x200006ec
 8009620:	200006a4 	.word	0x200006a4
 8009624:	200006e0 	.word	0x200006e0
 8009628:	200000a4 	.word	0x200000a4
 800962c:	20000158 	.word	0x20000158
 8009630:	200006b0 	.word	0x200006b0
 8009634:	200000c8 	.word	0x200000c8
 8009638:	200000b4 	.word	0x200000b4

0800963c <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b092      	sub	sp, #72	@ 0x48
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8009644:	2300      	movs	r3, #0
 8009646:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009648:	2300      	movs	r3, #0
 800964a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800964c:	2395      	movs	r3, #149	@ 0x95
 800964e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009652:	4b46      	ldr	r3, [pc, #280]	@ (800976c <STTS751_0_Probe+0x130>)
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009656:	4b46      	ldr	r3, [pc, #280]	@ (8009770 <STTS751_0_Probe+0x134>)
 8009658:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800965a:	4b46      	ldr	r3, [pc, #280]	@ (8009774 <STTS751_0_Probe+0x138>)
 800965c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800965e:	4b46      	ldr	r3, [pc, #280]	@ (8009778 <STTS751_0_Probe+0x13c>)
 8009660:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009662:	4b46      	ldr	r3, [pc, #280]	@ (800977c <STTS751_0_Probe+0x140>)
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8009666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800966a:	4619      	mov	r1, r3
 800966c:	4844      	ldr	r0, [pc, #272]	@ (8009780 <STTS751_0_Probe+0x144>)
 800966e:	f7ff f81f 	bl	80086b0 <STTS751_RegisterBusIO>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009678:	f06f 0306 	mvn.w	r3, #6
 800967c:	647b      	str	r3, [r7, #68]	@ 0x44
 800967e:	e070      	b.n	8009762 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009680:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8009684:	4619      	mov	r1, r3
 8009686:	483e      	ldr	r0, [pc, #248]	@ (8009780 <STTS751_0_Probe+0x144>)
 8009688:	f7ff f8b1 	bl	80087ee <STTS751_ReadID>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009692:	f06f 0306 	mvn.w	r3, #6
 8009696:	647b      	str	r3, [r7, #68]	@ 0x44
 8009698:	e063      	b.n	8009762 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 800969a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800969e:	2b53      	cmp	r3, #83	@ 0x53
 80096a0:	d003      	beq.n	80096aa <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80096a2:	f06f 0306 	mvn.w	r3, #6
 80096a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096a8:	e05b      	b.n	8009762 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	4619      	mov	r1, r3
 80096b0:	4833      	ldr	r0, [pc, #204]	@ (8009780 <STTS751_0_Probe+0x144>)
 80096b2:	f7ff f8b7 	bl	8008824 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80096b6:	7a3b      	ldrb	r3, [r7, #8]
 80096b8:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 80096ba:	7a7b      	ldrb	r3, [r7, #9]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 80096c0:	7abb      	ldrb	r3, [r7, #10]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 80096cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009784 <STTS751_0_Probe+0x148>)
 80096ce:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80096d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009788 <STTS751_0_Probe+0x14c>)
 80096d2:	4a2b      	ldr	r2, [pc, #172]	@ (8009780 <STTS751_0_Probe+0x144>)
 80096d4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80096d6:	4b2d      	ldr	r3, [pc, #180]	@ (800978c <STTS751_0_Probe+0x150>)
 80096d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009790 <STTS751_0_Probe+0x154>)
 80096da:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80096dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d11e      	bne.n	8009720 <STTS751_0_Probe+0xe4>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d019      	beq.n	8009720 <STTS751_0_Probe+0xe4>
 80096ec:	7a3b      	ldrb	r3, [r7, #8]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d116      	bne.n	8009720 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80096f2:	4b28      	ldr	r3, [pc, #160]	@ (8009794 <STTS751_0_Probe+0x158>)
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4a28      	ldr	r2, [pc, #160]	@ (8009798 <STTS751_0_Probe+0x15c>)
 80096f8:	3308      	adds	r3, #8
 80096fa:	4928      	ldr	r1, [pc, #160]	@ (800979c <STTS751_0_Probe+0x160>)
 80096fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8009700:	4b22      	ldr	r3, [pc, #136]	@ (800978c <STTS751_0_Probe+0x150>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a20      	ldr	r2, [pc, #128]	@ (8009788 <STTS751_0_Probe+0x14c>)
 8009708:	6892      	ldr	r2, [r2, #8]
 800970a:	4610      	mov	r0, r2
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009714:	f06f 0304 	mvn.w	r3, #4
 8009718:	647b      	str	r3, [r7, #68]	@ 0x44
 800971a:	e001      	b.n	8009720 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800971c:	2300      	movs	r3, #0
 800971e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009722:	2b00      	cmp	r3, #0
 8009724:	d107      	bne.n	8009736 <STTS751_0_Probe+0xfa>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f003 0304 	and.w	r3, r3, #4
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009730:	f06f 0304 	mvn.w	r3, #4
 8009734:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <STTS751_0_Probe+0x110>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009746:	f06f 0304 	mvn.w	r3, #4
 800974a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800974c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800974e:	2b00      	cmp	r3, #0
 8009750:	d107      	bne.n	8009762 <STTS751_0_Probe+0x126>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800975c:	f06f 0304 	mvn.w	r3, #4
 8009760:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 8009762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8009764:	4618      	mov	r0, r3
 8009766:	3748      	adds	r7, #72	@ 0x48
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	08002575 	.word	0x08002575
 8009770:	080025d9 	.word	0x080025d9
 8009774:	0800268d 	.word	0x0800268d
 8009778:	08002629 	.word	0x08002629
 800977c:	080026f1 	.word	0x080026f1
 8009780:	20000760 	.word	0x20000760
 8009784:	200006ec 	.word	0x200006ec
 8009788:	200006a4 	.word	0x200006a4
 800978c:	200006e0 	.word	0x200006e0
 8009790:	20000134 	.word	0x20000134
 8009794:	20000158 	.word	0x20000158
 8009798:	200006b0 	.word	0x200006b0
 800979c:	20000144 	.word	0x20000144

080097a0 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08e      	sub	sp, #56	@ 0x38
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 80097ae:	2301      	movs	r3, #1
 80097b0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d06e      	beq.n	800989a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	f200 809d 	bhi.w	80098fe <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d003      	beq.n	80097d2 <IKS01A3_MOTION_SENSOR_Init+0x32>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d032      	beq.n	8009836 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80097d0:	e095      	b.n	80098fe <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80097d2:	6838      	ldr	r0, [r7, #0]
 80097d4:	f000 f924 	bl	8009a20 <LSM6DSO_0_Probe>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80097de:	f04f 33ff 	mov.w	r3, #4294967295
 80097e2:	e0cc      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80097e4:	4a68      	ldr	r2, [pc, #416]	@ (8009988 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	4967      	ldr	r1, [pc, #412]	@ (800998c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097f6:	f107 010c 	add.w	r1, r7, #12
 80097fa:	4610      	mov	r0, r2
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009804:	f06f 0306 	mvn.w	r3, #6
 8009808:	e0b9      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800980a:	7b3b      	ldrb	r3, [r7, #12]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d103      	bne.n	8009818 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8009810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009812:	f043 0302 	orr.w	r3, r3, #2
 8009816:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8009818:	7b7b      	ldrb	r3, [r7, #13]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d103      	bne.n	8009826 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d16c      	bne.n	8009906 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800982c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982e:	f043 0304 	orr.w	r3, r3, #4
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8009834:	e067      	b.n	8009906 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009836:	6838      	ldr	r0, [r7, #0]
 8009838:	f000 f9b2 	bl	8009ba0 <LIS2DW12_0_Probe>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	e09a      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009848:	4a4f      	ldr	r2, [pc, #316]	@ (8009988 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	494e      	ldr	r1, [pc, #312]	@ (800998c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800985a:	f107 010c 	add.w	r1, r7, #12
 800985e:	4610      	mov	r0, r2
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009868:	f06f 0306 	mvn.w	r3, #6
 800986c:	e087      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800986e:	7b3b      	ldrb	r3, [r7, #12]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d103      	bne.n	800987c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	f043 0302 	orr.w	r3, r3, #2
 800987a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800987c:	7b7b      	ldrb	r3, [r7, #13]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d103      	bne.n	800988a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8009882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009884:	f043 0301 	orr.w	r3, r3, #1
 8009888:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d13c      	bne.n	800990a <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8009890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009892:	f043 0304 	orr.w	r3, r3, #4
 8009896:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8009898:	e037      	b.n	800990a <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800989a:	6838      	ldr	r0, [r7, #0]
 800989c:	f000 fa28 	bl	8009cf0 <LIS2MDL_0_Probe>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80098a6:	f04f 33ff 	mov.w	r3, #4294967295
 80098aa:	e068      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80098ac:	4a36      	ldr	r2, [pc, #216]	@ (8009988 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	4935      	ldr	r1, [pc, #212]	@ (800998c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80098be:	f107 010c 	add.w	r1, r7, #12
 80098c2:	4610      	mov	r0, r2
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80098cc:	f06f 0306 	mvn.w	r3, #6
 80098d0:	e055      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80098d2:	7b3b      	ldrb	r3, [r7, #12]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d103      	bne.n	80098e0 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80098d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098da:	f043 0302 	orr.w	r3, r3, #2
 80098de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 80098e0:	7b7b      	ldrb	r3, [r7, #13]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d103      	bne.n	80098ee <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80098e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e8:	f043 0301 	orr.w	r3, r3, #1
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d10c      	bne.n	800990e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80098f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f6:	f043 0304 	orr.w	r3, r3, #4
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 80098fc:	e007      	b.n	800990e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80098fe:	f06f 0301 	mvn.w	r3, #1
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8009904:	e004      	b.n	8009910 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8009906:	bf00      	nop
 8009908:	e002      	b.n	8009910 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800990a:	bf00      	nop
 800990c:	e000      	b.n	8009910 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800990e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8009916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009918:	e031      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800991a:	2300      	movs	r3, #0
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800991e:	e02a      	b.n	8009976 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	4013      	ands	r3, r2
 8009926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009928:	429a      	cmp	r2, r3
 800992a:	d11e      	bne.n	800996a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 800992c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	4013      	ands	r3, r2
 8009932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009934:	429a      	cmp	r2, r3
 8009936:	d118      	bne.n	800996a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009938:	4a15      	ldr	r2, [pc, #84]	@ (8009990 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009940:	4814      	ldr	r0, [pc, #80]	@ (8009994 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	4613      	mov	r3, r2
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	4413      	add	r3, r2
 800994a:	440b      	add	r3, r1
 800994c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	490e      	ldr	r1, [pc, #56]	@ (800998c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009964:	f06f 0304 	mvn.w	r3, #4
 8009968:	e009      	b.n	800997e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800996a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	3301      	adds	r3, #1
 8009974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	2b02      	cmp	r3, #2
 800997a:	d9d1      	bls.n	8009920 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800997c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800997e:	4618      	mov	r0, r3
 8009980:	3738      	adds	r7, #56	@ 0x38
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200007c8 	.word	0x200007c8
 800998c:	20000798 	.word	0x20000798
 8009990:	2000017c 	.word	0x2000017c
 8009994:	200007a4 	.word	0x200007a4

08009998 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d903      	bls.n	80099b2 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80099aa:	f06f 0301 	mvn.w	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	e029      	b.n	8009a06 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80099b2:	4a17      	ldr	r2, [pc, #92]	@ (8009a10 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4013      	ands	r3, r2
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d11d      	bne.n	8009a00 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80099c4:	4a13      	ldr	r2, [pc, #76]	@ (8009a14 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099cc:	4812      	ldr	r0, [pc, #72]	@ (8009a18 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	440b      	add	r3, r1
 80099d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	490f      	ldr	r1, [pc, #60]	@ (8009a1c <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099f2:	f06f 0304 	mvn.w	r3, #4
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e005      	b.n	8009a06 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e002      	b.n	8009a06 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009a00:	f06f 0301 	mvn.w	r3, #1
 8009a04:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009a06:	697b      	ldr	r3, [r7, #20]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	200007d4 	.word	0x200007d4
 8009a14:	2000017c 	.word	0x2000017c
 8009a18:	200007a4 	.word	0x200007a4
 8009a1c:	20000798 	.word	0x20000798

08009a20 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b094      	sub	sp, #80	@ 0x50
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8009a30:	23d7      	movs	r3, #215	@ 0xd7
 8009a32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009a36:	4b4b      	ldr	r3, [pc, #300]	@ (8009b64 <LSM6DSO_0_Probe+0x144>)
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b68 <LSM6DSO_0_Probe+0x148>)
 8009a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8009b6c <LSM6DSO_0_Probe+0x14c>)
 8009a40:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009a42:	4b4b      	ldr	r3, [pc, #300]	@ (8009b70 <LSM6DSO_0_Probe+0x150>)
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009a46:	4b4b      	ldr	r3, [pc, #300]	@ (8009b74 <LSM6DSO_0_Probe+0x154>)
 8009a48:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b78 <LSM6DSO_0_Probe+0x158>)
 8009a4c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009a4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a52:	4619      	mov	r1, r3
 8009a54:	4849      	ldr	r0, [pc, #292]	@ (8009b7c <LSM6DSO_0_Probe+0x15c>)
 8009a56:	f7fc fe9d 	bl	8006794 <LSM6DSO_RegisterBusIO>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a60:	f06f 0306 	mvn.w	r3, #6
 8009a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a66:	e077      	b.n	8009b58 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8009a68:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4843      	ldr	r0, [pc, #268]	@ (8009b7c <LSM6DSO_0_Probe+0x15c>)
 8009a70:	f7fc ff9a 	bl	80069a8 <LSM6DSO_ReadID>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a7a:	f06f 0306 	mvn.w	r3, #6
 8009a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a80:	e06a      	b.n	8009b58 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8009a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a86:	2b6c      	cmp	r3, #108	@ 0x6c
 8009a88:	d003      	beq.n	8009a92 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a8a:	f06f 0306 	mvn.w	r3, #6
 8009a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a90:	e062      	b.n	8009b58 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4619      	mov	r1, r3
 8009a98:	4838      	ldr	r0, [pc, #224]	@ (8009b7c <LSM6DSO_0_Probe+0x15c>)
 8009a9a:	f7fc ff9b 	bl	80069d4 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a9e:	7b7b      	ldrb	r3, [r7, #13]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	7b3b      	ldrb	r3, [r7, #12]
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4313      	orrs	r3, r2
 8009aae:	4a34      	ldr	r2, [pc, #208]	@ (8009b80 <LSM6DSO_0_Probe+0x160>)
 8009ab0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009ab2:	4b34      	ldr	r3, [pc, #208]	@ (8009b84 <LSM6DSO_0_Probe+0x164>)
 8009ab4:	4a31      	ldr	r2, [pc, #196]	@ (8009b7c <LSM6DSO_0_Probe+0x15c>)
 8009ab6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009ab8:	4b33      	ldr	r3, [pc, #204]	@ (8009b88 <LSM6DSO_0_Probe+0x168>)
 8009aba:	4a34      	ldr	r2, [pc, #208]	@ (8009b8c <LSM6DSO_0_Probe+0x16c>)
 8009abc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11d      	bne.n	8009b00 <LSM6DSO_0_Probe+0xe0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d018      	beq.n	8009b00 <LSM6DSO_0_Probe+0xe0>
 8009ace:	7b7b      	ldrb	r3, [r7, #13]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d115      	bne.n	8009b00 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8009b90 <LSM6DSO_0_Probe+0x170>)
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	4a2e      	ldr	r2, [pc, #184]	@ (8009b94 <LSM6DSO_0_Probe+0x174>)
 8009ada:	492f      	ldr	r1, [pc, #188]	@ (8009b98 <LSM6DSO_0_Probe+0x178>)
 8009adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009ae0:	4b29      	ldr	r3, [pc, #164]	@ (8009b88 <LSM6DSO_0_Probe+0x168>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a27      	ldr	r2, [pc, #156]	@ (8009b84 <LSM6DSO_0_Probe+0x164>)
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	4610      	mov	r0, r2
 8009aec:	4798      	blx	r3
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009af4:	f06f 0304 	mvn.w	r3, #4
 8009af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009afa:	e001      	b.n	8009b00 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009afc:	2300      	movs	r3, #0
 8009afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d11d      	bne.n	8009b42 <LSM6DSO_0_Probe+0x122>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d018      	beq.n	8009b42 <LSM6DSO_0_Probe+0x122>
 8009b10:	7b3b      	ldrb	r3, [r7, #12]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d115      	bne.n	8009b42 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009b16:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <LSM6DSO_0_Probe+0x170>)
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b94 <LSM6DSO_0_Probe+0x174>)
 8009b1c:	491f      	ldr	r1, [pc, #124]	@ (8009b9c <LSM6DSO_0_Probe+0x17c>)
 8009b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009b22:	4b19      	ldr	r3, [pc, #100]	@ (8009b88 <LSM6DSO_0_Probe+0x168>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a16      	ldr	r2, [pc, #88]	@ (8009b84 <LSM6DSO_0_Probe+0x164>)
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b36:	f06f 0304 	mvn.w	r3, #4
 8009b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b3c:	e001      	b.n	8009b42 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d107      	bne.n	8009b58 <LSM6DSO_0_Probe+0x138>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b52:	f06f 0304 	mvn.w	r3, #4
 8009b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8009b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3750      	adds	r7, #80	@ 0x50
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08002575 	.word	0x08002575
 8009b68:	080025d9 	.word	0x080025d9
 8009b6c:	0800268d 	.word	0x0800268d
 8009b70:	08002629 	.word	0x08002629
 8009b74:	080026f1 	.word	0x080026f1
 8009b78:	08009f1d 	.word	0x08009f1d
 8009b7c:	200007e0 	.word	0x200007e0
 8009b80:	200007d4 	.word	0x200007d4
 8009b84:	20000798 	.word	0x20000798
 8009b88:	200007c8 	.word	0x200007c8
 8009b8c:	200000dc 	.word	0x200000dc
 8009b90:	2000017c 	.word	0x2000017c
 8009b94:	200007a4 	.word	0x200007a4
 8009b98:	20000110 	.word	0x20000110
 8009b9c:	200000ec 	.word	0x200000ec

08009ba0 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b094      	sub	sp, #80	@ 0x50
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009bac:	2300      	movs	r3, #0
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009bb0:	2333      	movs	r3, #51	@ 0x33
 8009bb2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009bb6:	4b40      	ldr	r3, [pc, #256]	@ (8009cb8 <LIS2DW12_0_Probe+0x118>)
 8009bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009bba:	4b40      	ldr	r3, [pc, #256]	@ (8009cbc <LIS2DW12_0_Probe+0x11c>)
 8009bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009bbe:	4b40      	ldr	r3, [pc, #256]	@ (8009cc0 <LIS2DW12_0_Probe+0x120>)
 8009bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009bc2:	4b40      	ldr	r3, [pc, #256]	@ (8009cc4 <LIS2DW12_0_Probe+0x124>)
 8009bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009bc6:	4b40      	ldr	r3, [pc, #256]	@ (8009cc8 <LIS2DW12_0_Probe+0x128>)
 8009bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009bca:	4b40      	ldr	r3, [pc, #256]	@ (8009ccc <LIS2DW12_0_Probe+0x12c>)
 8009bcc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009bce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	483e      	ldr	r0, [pc, #248]	@ (8009cd0 <LIS2DW12_0_Probe+0x130>)
 8009bd6:	f7f9 fd4d 	bl	8003674 <LIS2DW12_RegisterBusIO>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009be0:	f06f 0306 	mvn.w	r3, #6
 8009be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009be6:	e062      	b.n	8009cae <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009be8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8009bec:	4619      	mov	r1, r3
 8009bee:	4838      	ldr	r0, [pc, #224]	@ (8009cd0 <LIS2DW12_0_Probe+0x130>)
 8009bf0:	f7f9 fe2e 	bl	8003850 <LIS2DW12_ReadID>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009bfa:	f06f 0306 	mvn.w	r3, #6
 8009bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c00:	e055      	b.n	8009cae <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8009c02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c06:	2b44      	cmp	r3, #68	@ 0x44
 8009c08:	d003      	beq.n	8009c12 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009c0a:	f06f 0306 	mvn.w	r3, #6
 8009c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c10:	e04d      	b.n	8009cae <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009c12:	f107 030c 	add.w	r3, r7, #12
 8009c16:	4619      	mov	r1, r3
 8009c18:	482d      	ldr	r0, [pc, #180]	@ (8009cd0 <LIS2DW12_0_Probe+0x130>)
 8009c1a:	f7f9 fe2f 	bl	800387c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009c1e:	7b7b      	ldrb	r3, [r7, #13]
 8009c20:	461a      	mov	r2, r3
 8009c22:	7b3b      	ldrb	r3, [r7, #12]
 8009c24:	005b      	lsls	r3, r3, #1
 8009c26:	431a      	orrs	r2, r3
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	4a29      	ldr	r2, [pc, #164]	@ (8009cd4 <LIS2DW12_0_Probe+0x134>)
 8009c30:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009c32:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <LIS2DW12_0_Probe+0x138>)
 8009c34:	4a26      	ldr	r2, [pc, #152]	@ (8009cd0 <LIS2DW12_0_Probe+0x130>)
 8009c36:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009c38:	4b28      	ldr	r3, [pc, #160]	@ (8009cdc <LIS2DW12_0_Probe+0x13c>)
 8009c3a:	4a29      	ldr	r2, [pc, #164]	@ (8009ce0 <LIS2DW12_0_Probe+0x140>)
 8009c3c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11e      	bne.n	8009c82 <LIS2DW12_0_Probe+0xe2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d019      	beq.n	8009c82 <LIS2DW12_0_Probe+0xe2>
 8009c4e:	7b3b      	ldrb	r3, [r7, #12]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d116      	bne.n	8009c82 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009c54:	4b23      	ldr	r3, [pc, #140]	@ (8009ce4 <LIS2DW12_0_Probe+0x144>)
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	4a23      	ldr	r2, [pc, #140]	@ (8009ce8 <LIS2DW12_0_Probe+0x148>)
 8009c5a:	3303      	adds	r3, #3
 8009c5c:	4923      	ldr	r1, [pc, #140]	@ (8009cec <LIS2DW12_0_Probe+0x14c>)
 8009c5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009c62:	4b1e      	ldr	r3, [pc, #120]	@ (8009cdc <LIS2DW12_0_Probe+0x13c>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd8 <LIS2DW12_0_Probe+0x138>)
 8009c6a:	6852      	ldr	r2, [r2, #4]
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c76:	f06f 0304 	mvn.w	r3, #4
 8009c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c7c:	e001      	b.n	8009c82 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <LIS2DW12_0_Probe+0xf8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c92:	f06f 0304 	mvn.w	r3, #4
 8009c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d107      	bne.n	8009cae <LIS2DW12_0_Probe+0x10e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ca8:	f06f 0304 	mvn.w	r3, #4
 8009cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8009cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3750      	adds	r7, #80	@ 0x50
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	08002575 	.word	0x08002575
 8009cbc:	080025d9 	.word	0x080025d9
 8009cc0:	0800268d 	.word	0x0800268d
 8009cc4:	08002629 	.word	0x08002629
 8009cc8:	080026f1 	.word	0x080026f1
 8009ccc:	08009f1d 	.word	0x08009f1d
 8009cd0:	20000818 	.word	0x20000818
 8009cd4:	200007d4 	.word	0x200007d4
 8009cd8:	20000798 	.word	0x20000798
 8009cdc:	200007c8 	.word	0x200007c8
 8009ce0:	2000003c 	.word	0x2000003c
 8009ce4:	2000017c 	.word	0x2000017c
 8009ce8:	200007a4 	.word	0x200007a4
 8009cec:	2000004c 	.word	0x2000004c

08009cf0 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b094      	sub	sp, #80	@ 0x50
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009d00:	233d      	movs	r3, #61	@ 0x3d
 8009d02:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009d06:	4b40      	ldr	r3, [pc, #256]	@ (8009e08 <LIS2MDL_0_Probe+0x118>)
 8009d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009d0a:	4b40      	ldr	r3, [pc, #256]	@ (8009e0c <LIS2MDL_0_Probe+0x11c>)
 8009d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009d0e:	4b40      	ldr	r3, [pc, #256]	@ (8009e10 <LIS2MDL_0_Probe+0x120>)
 8009d10:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009d12:	4b40      	ldr	r3, [pc, #256]	@ (8009e14 <LIS2MDL_0_Probe+0x124>)
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009d16:	4b40      	ldr	r3, [pc, #256]	@ (8009e18 <LIS2MDL_0_Probe+0x128>)
 8009d18:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009d1a:	4b40      	ldr	r3, [pc, #256]	@ (8009e1c <LIS2MDL_0_Probe+0x12c>)
 8009d1c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d22:	4619      	mov	r1, r3
 8009d24:	483e      	ldr	r0, [pc, #248]	@ (8009e20 <LIS2MDL_0_Probe+0x130>)
 8009d26:	f7fa fef9 	bl	8004b1c <LIS2MDL_RegisterBusIO>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009d30:	f06f 0306 	mvn.w	r3, #6
 8009d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d36:	e062      	b.n	8009dfe <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009d38:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4838      	ldr	r0, [pc, #224]	@ (8009e20 <LIS2MDL_0_Probe+0x130>)
 8009d40:	f7fb f808 	bl	8004d54 <LIS2MDL_ReadID>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009d4a:	f06f 0306 	mvn.w	r3, #6
 8009d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d50:	e055      	b.n	8009dfe <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009d52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d56:	2b40      	cmp	r3, #64	@ 0x40
 8009d58:	d003      	beq.n	8009d62 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009d5a:	f06f 0306 	mvn.w	r3, #6
 8009d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d60:	e04d      	b.n	8009dfe <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009d62:	f107 030c 	add.w	r3, r7, #12
 8009d66:	4619      	mov	r1, r3
 8009d68:	482d      	ldr	r0, [pc, #180]	@ (8009e20 <LIS2MDL_0_Probe+0x130>)
 8009d6a:	f7fb f819 	bl	8004da0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009d6e:	7b7b      	ldrb	r3, [r7, #13]
 8009d70:	461a      	mov	r2, r3
 8009d72:	7b3b      	ldrb	r3, [r7, #12]
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	431a      	orrs	r2, r3
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	4a29      	ldr	r2, [pc, #164]	@ (8009e24 <LIS2MDL_0_Probe+0x134>)
 8009d80:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009d82:	4b29      	ldr	r3, [pc, #164]	@ (8009e28 <LIS2MDL_0_Probe+0x138>)
 8009d84:	4a26      	ldr	r2, [pc, #152]	@ (8009e20 <LIS2MDL_0_Probe+0x130>)
 8009d86:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009d88:	4b28      	ldr	r3, [pc, #160]	@ (8009e2c <LIS2MDL_0_Probe+0x13c>)
 8009d8a:	4a29      	ldr	r2, [pc, #164]	@ (8009e30 <LIS2MDL_0_Probe+0x140>)
 8009d8c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11e      	bne.n	8009dd2 <LIS2MDL_0_Probe+0xe2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d019      	beq.n	8009dd2 <LIS2MDL_0_Probe+0xe2>
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d116      	bne.n	8009dd2 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009da4:	4b23      	ldr	r3, [pc, #140]	@ (8009e34 <LIS2MDL_0_Probe+0x144>)
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	4a23      	ldr	r2, [pc, #140]	@ (8009e38 <LIS2MDL_0_Probe+0x148>)
 8009daa:	3306      	adds	r3, #6
 8009dac:	4923      	ldr	r1, [pc, #140]	@ (8009e3c <LIS2MDL_0_Probe+0x14c>)
 8009dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009db2:	4b1e      	ldr	r3, [pc, #120]	@ (8009e2c <LIS2MDL_0_Probe+0x13c>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e28 <LIS2MDL_0_Probe+0x138>)
 8009dba:	6892      	ldr	r2, [r2, #8]
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d003      	beq.n	8009dce <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dc6:	f06f 0304 	mvn.w	r3, #4
 8009dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dcc:	e001      	b.n	8009dd2 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d107      	bne.n	8009de8 <LIS2MDL_0_Probe+0xf8>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009de2:	f06f 0304 	mvn.w	r3, #4
 8009de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <LIS2MDL_0_Probe+0x10e>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009df8:	f06f 0304 	mvn.w	r3, #4
 8009dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3750      	adds	r7, #80	@ 0x50
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	08002575 	.word	0x08002575
 8009e0c:	080025d9 	.word	0x080025d9
 8009e10:	0800268d 	.word	0x0800268d
 8009e14:	08002629 	.word	0x08002629
 8009e18:	080026f1 	.word	0x080026f1
 8009e1c:	08009f1d 	.word	0x08009f1d
 8009e20:	20000854 	.word	0x20000854
 8009e24:	200007d4 	.word	0x200007d4
 8009e28:	20000798 	.word	0x20000798
 8009e2c:	200007c8 	.word	0x200007c8
 8009e30:	20000070 	.word	0x20000070
 8009e34:	2000017c 	.word	0x2000017c
 8009e38:	200007a4 	.word	0x200007a4
 8009e3c:	20000080 	.word	0x20000080

08009e40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e4a:	2003      	movs	r0, #3
 8009e4c:	f000 ff66 	bl	800ad1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009e50:	2000      	movs	r0, #0
 8009e52:	f000 f80d 	bl	8009e70 <HAL_InitTick>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	71fb      	strb	r3, [r7, #7]
 8009e60:	e001      	b.n	8009e66 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009e62:	f7f8 f977 	bl	8002154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009e66:	79fb      	ldrb	r3, [r7, #7]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009e7c:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <HAL_InitTick+0x68>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d022      	beq.n	8009eca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009e84:	4b15      	ldr	r3, [pc, #84]	@ (8009edc <HAL_InitTick+0x6c>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	4b13      	ldr	r3, [pc, #76]	@ (8009ed8 <HAL_InitTick+0x68>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 ff82 	bl	800ada2 <HAL_SYSTICK_Config>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10f      	bne.n	8009ec4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b0f      	cmp	r3, #15
 8009ea8:	d809      	bhi.n	8009ebe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009eaa:	2200      	movs	r2, #0
 8009eac:	6879      	ldr	r1, [r7, #4]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	f000 ff3e 	bl	800ad32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ee0 <HAL_InitTick+0x70>)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	e007      	b.n	8009ece <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e004      	b.n	8009ece <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	73fb      	strb	r3, [r7, #15]
 8009ec8:	e001      	b.n	8009ece <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20000194 	.word	0x20000194
 8009edc:	20000000 	.word	0x20000000
 8009ee0:	20000190 	.word	0x20000190

08009ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ee8:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <HAL_IncTick+0x1c>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	4b05      	ldr	r3, [pc, #20]	@ (8009f04 <HAL_IncTick+0x20>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	4a03      	ldr	r2, [pc, #12]	@ (8009f00 <HAL_IncTick+0x1c>)
 8009ef4:	6013      	str	r3, [r2, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bc80      	pop	{r7}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000888 	.word	0x20000888
 8009f04:	20000194 	.word	0x20000194

08009f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8009f0c:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <HAL_GetTick+0x10>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr
 8009f18:	20000888 	.word	0x20000888

08009f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f24:	f7ff fff0 	bl	8009f08 <HAL_GetTick>
 8009f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d004      	beq.n	8009f40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f36:	4b09      	ldr	r3, [pc, #36]	@ (8009f5c <HAL_Delay+0x40>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f40:	bf00      	nop
 8009f42:	f7ff ffe1 	bl	8009f08 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d8f7      	bhi.n	8009f42 <HAL_Delay+0x26>
  {
  }
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20000194 	.word	0x20000194

08009f60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	@ 0x38
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e127      	b.n	800a1d0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d115      	bne.n	8009fba <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f9c:	4b8e      	ldr	r3, [pc, #568]	@ (800a1d8 <HAL_ADC_Init+0x278>)
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	4a8d      	ldr	r2, [pc, #564]	@ (800a1d8 <HAL_ADC_Init+0x278>)
 8009fa2:	f043 0301 	orr.w	r3, r3, #1
 8009fa6:	6213      	str	r3, [r2, #32]
 8009fa8:	4b8b      	ldr	r3, [pc, #556]	@ (800a1d8 <HAL_ADC_Init+0x278>)
 8009faa:	6a1b      	ldr	r3, [r3, #32]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	60bb      	str	r3, [r7, #8]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7f8 f8fd 	bl	80021b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fbe:	f003 0310 	and.w	r3, r3, #16
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f040 80ff 	bne.w	800a1c6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009fd0:	f023 0302 	bic.w	r3, r3, #2
 8009fd4:	f043 0202 	orr.w	r2, r3, #2
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8009fdc:	4b7f      	ldr	r3, [pc, #508]	@ (800a1dc <HAL_ADC_Init+0x27c>)
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	497c      	ldr	r1, [pc, #496]	@ (800a1dc <HAL_ADC_Init+0x27c>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8009ff6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ffe:	4619      	mov	r1, r3
 800a000:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a004:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	fa93 f3a3 	rbit	r3, r3
 800a00c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	fab3 f383 	clz	r3, r3
 800a014:	b2db      	uxtb	r3, r3
 800a016:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800a01a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a020:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a028:	4619      	mov	r1, r3
 800a02a:	2302      	movs	r3, #2
 800a02c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	fa93 f3a3 	rbit	r3, r3
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	fab3 f383 	clz	r3, r3
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800a042:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800a044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a046:	4313      	orrs	r3, r2
 800a048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d007      	beq.n	800a062 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800a05a:	4313      	orrs	r3, r2
 800a05c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a05e:	4313      	orrs	r3, r2
 800a060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a06c:	2b40      	cmp	r3, #64	@ 0x40
 800a06e:	d04f      	beq.n	800a110 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a076:	4313      	orrs	r3, r2
 800a078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a082:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	6912      	ldr	r2, [r2, #16]
 800a088:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800a08c:	d003      	beq.n	800a096 <HAL_ADC_Init+0x136>
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6912      	ldr	r2, [r2, #16]
 800a092:	2a01      	cmp	r2, #1
 800a094:	d102      	bne.n	800a09c <HAL_ADC_Init+0x13c>
 800a096:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a09a:	e000      	b.n	800a09e <HAL_ADC_Init+0x13e>
 800a09c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800a09e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d125      	bne.n	800a0fc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d114      	bne.n	800a0e4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800a0c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	fa92 f2a2 	rbit	r2, r2
 800a0cc:	617a      	str	r2, [r7, #20]
  return result;
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	fab2 f282 	clz	r2, r2
 800a0d4:	b2d2      	uxtb	r2, r2
 800a0d6:	4093      	lsls	r3, r2
 800a0d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a0dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0e2:	e00b      	b.n	800a0fc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0e8:	f043 0220 	orr.w	r2, r3, #32
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f4:	f043 0201 	orr.w	r2, r3, #1
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	651a      	str	r2, [r3, #80]	@ 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4b37      	ldr	r3, [pc, #220]	@ (800a1e0 <HAL_ADC_Init+0x280>)
 800a104:	4013      	ands	r3, r2
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6812      	ldr	r2, [r2, #0]
 800a10a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	4b33      	ldr	r3, [pc, #204]	@ (800a1e4 <HAL_ADC_Init+0x284>)
 800a118:	4013      	ands	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6812      	ldr	r2, [r2, #0]
 800a11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a120:	430b      	orrs	r3, r1
 800a122:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a12c:	d003      	beq.n	800a136 <HAL_ADC_Init+0x1d6>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d119      	bne.n	800a16a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13c:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a144:	3b01      	subs	r3, #1
 800a146:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 800a14a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	fa92 f2a2 	rbit	r2, r2
 800a152:	60fa      	str	r2, [r7, #12]
  return result;
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	fab2 f282 	clz	r2, r2
 800a15a:	b2d2      	uxtb	r2, r2
 800a15c:	fa03 f202 	lsl.w	r2, r3, r2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	631a      	str	r2, [r3, #48]	@ 0x30
 800a168:	e007      	b.n	800a17a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 800a178:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	4b19      	ldr	r3, [pc, #100]	@ (800a1e8 <HAL_ADC_Init+0x288>)
 800a182:	4013      	ands	r3, r2
 800a184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a186:	429a      	cmp	r2, r3
 800a188:	d10b      	bne.n	800a1a2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a194:	f023 0303 	bic.w	r3, r3, #3
 800a198:	f043 0201 	orr.w	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a1a0:	e014      	b.n	800a1cc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1a6:	f023 0312 	bic.w	r3, r3, #18
 800a1aa:	f043 0210 	orr.w	r2, r3, #16
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b6:	f043 0201 	orr.w	r2, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a1c4:	e002      	b.n	800a1cc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800a1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3738      	adds	r7, #56	@ 0x38
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40023800 	.word	0x40023800
 800a1dc:	40012700 	.word	0x40012700
 800a1e0:	fcfc16ff 	.word	0xfcfc16ff
 800a1e4:	c0fff189 	.word	0xc0fff189
 800a1e8:	bf80fffe 	.word	0xbf80fffe

0800a1ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_ADC_Start+0x1a>
 800a202:	2302      	movs	r3, #2
 800a204:	e04e      	b.n	800a2a4 <HAL_ADC_Start+0xb8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fbee 	bl	800a9f0 <ADC_Enable>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d141      	bne.n	800a2a2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a222:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a226:	f023 0301 	bic.w	r3, r3, #1
 800a22a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d007      	beq.n	800a250 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a244:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a248:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a25c:	d106      	bne.n	800a26c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a262:	f023 0206 	bic.w	r2, r3, #6
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	651a      	str	r2, [r3, #80]	@ 0x50
 800a26a:	e002      	b.n	800a272 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a282:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d107      	bne.n	800a2a2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a2a0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d101      	bne.n	800a2c6 <HAL_ADC_Stop+0x1a>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e01a      	b.n	800a2fc <HAL_ADC_Stop+0x50>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fbea 	bl	800aaa8 <ADC_ConversionStop_Disable>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	f043 0201 	orr.w	r2, r3, #1
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a31c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a320:	d113      	bne.n	800a34a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a32c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a330:	d10b      	bne.n	800a34a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a336:	f043 0220 	orr.w	r2, r3, #32
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e068      	b.n	800a41c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a34a:	f7ff fddd 	bl	8009f08 <HAL_GetTick>
 800a34e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a350:	e021      	b.n	800a396 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d01d      	beq.n	800a396 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <HAL_ADC_PollForConversion+0x6c>
 800a360:	f7ff fdd2 	bl	8009f08 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d212      	bcs.n	800a396 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10b      	bne.n	800a396 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a382:	f043 0204 	orr.w	r2, r3, #4
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e042      	b.n	800a41c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d0d6      	beq.n	800a352 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d104      	bne.n	800a3b6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f06f 0212 	mvn.w	r2, #18
 800a3b4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d124      	bne.n	800a41a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d11f      	bne.n	800a41a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e0:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d111      	bne.n	800a41a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a412:	f043 0201 	orr.w	r2, r3, #1
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	bc80      	pop	{r7}
 800a43a:	4770      	bx	lr

0800a43c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d04c      	beq.n	800a4f8 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d047      	beq.n	800a4f8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a46c:	f003 0310 	and.w	r3, r3, #16
 800a470:	2b00      	cmp	r3, #0
 800a472:	d105      	bne.n	800a480 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a478:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d12c      	bne.n	800a4e8 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a494:	2b00      	cmp	r3, #0
 800a496:	d127      	bne.n	800a4e8 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a49e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d006      	beq.n	800a4b4 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d119      	bne.n	800a4e8 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0220 	bic.w	r2, r2, #32
 800a4c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d105      	bne.n	800a4e8 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e0:	f043 0201 	orr.w	r2, r3, #1
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f89e 	bl	800a62a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f06f 0212 	mvn.w	r2, #18
 800a4f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d05a      	beq.n	800a5b8 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d055      	beq.n	800a5b8 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d13a      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a538:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d006      	beq.n	800a54e <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d12c      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d125      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800a566:	2b00      	cmp	r3, #0
 800a568:	d11e      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800a570:	2b00      	cmp	r3, #0
 800a572:	d119      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a582:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a588:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d105      	bne.n	800a5a8 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5a0:	f043 0201 	orr.w	r2, r3, #1
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fabe 	bl	800ab2a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f06f 020c 	mvn.w	r2, #12
 800a5b6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d012      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00d      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f82f 	bl	800a63c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f06f 0201 	mvn.w	r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d017      	beq.n	800a622 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d012      	beq.n	800a622 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a600:	f043 0202 	orr.w	r2, r3, #2
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f06f 0220 	mvn.w	r2, #32
 800a610:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f81b 	bl	800a64e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f06f 0220 	mvn.w	r2, #32
 800a620:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a632:	bf00      	nop
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	bc80      	pop	{r7}
 800a64c:	4770      	bx	lr

0800a64e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bc80      	pop	{r7}
 800a65e:	4770      	bx	lr

0800a660 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_ADC_ConfigChannel+0x20>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e14f      	b.n	800a920 <HAL_ADC_ConfigChannel+0x2c0>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b06      	cmp	r3, #6
 800a68e:	d81c      	bhi.n	800a6ca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	3b05      	subs	r3, #5
 800a6a2:	221f      	movs	r2, #31
 800a6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a8:	43db      	mvns	r3, r3
 800a6aa:	4019      	ands	r1, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	3b05      	subs	r3, #5
 800a6bc:	fa00 f203 	lsl.w	r2, r0, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	641a      	str	r2, [r3, #64]	@ 0x40
 800a6c8:	e07e      	b.n	800a7c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b0c      	cmp	r3, #12
 800a6d0:	d81c      	bhi.n	800a70c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3b23      	subs	r3, #35	@ 0x23
 800a6e4:	221f      	movs	r2, #31
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	4019      	ands	r1, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3b23      	subs	r3, #35	@ 0x23
 800a6fe:	fa00 f203 	lsl.w	r2, r0, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a70a:	e05d      	b.n	800a7c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	2b12      	cmp	r3, #18
 800a712:	d81c      	bhi.n	800a74e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	3b41      	subs	r3, #65	@ 0x41
 800a726:	221f      	movs	r2, #31
 800a728:	fa02 f303 	lsl.w	r3, r2, r3
 800a72c:	43db      	mvns	r3, r3
 800a72e:	4019      	ands	r1, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	3b41      	subs	r3, #65	@ 0x41
 800a740:	fa00 f203 	lsl.w	r2, r0, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a74c:	e03c      	b.n	800a7c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b18      	cmp	r3, #24
 800a754:	d81c      	bhi.n	800a790 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	3b5f      	subs	r3, #95	@ 0x5f
 800a768:	221f      	movs	r2, #31
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	43db      	mvns	r3, r3
 800a770:	4019      	ands	r1, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	3b5f      	subs	r3, #95	@ 0x5f
 800a782:	fa00 f203 	lsl.w	r2, r0, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a78e:	e01b      	b.n	800a7c8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	3b7d      	subs	r3, #125	@ 0x7d
 800a7a2:	221f      	movs	r2, #31
 800a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a8:	43db      	mvns	r3, r3
 800a7aa:	4019      	ands	r1, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6818      	ldr	r0, [r3, #0]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	3b7d      	subs	r3, #125	@ 0x7d
 800a7bc:	fa00 f203 	lsl.w	r2, r0, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b09      	cmp	r3, #9
 800a7ce:	d81a      	bhi.n	800a806 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6959      	ldr	r1, [r3, #20]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4413      	add	r3, r2
 800a7e0:	2207      	movs	r2, #7
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	4019      	ands	r1, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	6898      	ldr	r0, [r3, #8]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	fa00 f203 	lsl.w	r2, r0, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	430a      	orrs	r2, r1
 800a802:	615a      	str	r2, [r3, #20]
 800a804:	e05d      	b.n	800a8c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b13      	cmp	r3, #19
 800a80c:	d81c      	bhi.n	800a848 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6919      	ldr	r1, [r3, #16]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	3b1e      	subs	r3, #30
 800a820:	2207      	movs	r2, #7
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	43db      	mvns	r3, r3
 800a828:	4019      	ands	r1, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	6898      	ldr	r0, [r3, #8]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4613      	mov	r3, r2
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	4413      	add	r3, r2
 800a838:	3b1e      	subs	r3, #30
 800a83a:	fa00 f203 	lsl.w	r2, r0, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	611a      	str	r2, [r3, #16]
 800a846:	e03c      	b.n	800a8c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b1d      	cmp	r3, #29
 800a84e:	d81c      	bhi.n	800a88a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68d9      	ldr	r1, [r3, #12]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	4613      	mov	r3, r2
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	4413      	add	r3, r2
 800a860:	3b3c      	subs	r3, #60	@ 0x3c
 800a862:	2207      	movs	r2, #7
 800a864:	fa02 f303 	lsl.w	r3, r2, r3
 800a868:	43db      	mvns	r3, r3
 800a86a:	4019      	ands	r1, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	6898      	ldr	r0, [r3, #8]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4613      	mov	r3, r2
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	4413      	add	r3, r2
 800a87a:	3b3c      	subs	r3, #60	@ 0x3c
 800a87c:	fa00 f203 	lsl.w	r2, r0, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	60da      	str	r2, [r3, #12]
 800a888:	e01b      	b.n	800a8c2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	3b5a      	subs	r3, #90	@ 0x5a
 800a89c:	2207      	movs	r2, #7
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	43db      	mvns	r3, r3
 800a8a4:	4019      	ands	r1, r3
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6898      	ldr	r0, [r3, #8]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3b5a      	subs	r3, #90	@ 0x5a
 800a8b6:	fa00 f203 	lsl.w	r2, r0, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d003      	beq.n	800a8d2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800a8ce:	2b11      	cmp	r3, #17
 800a8d0:	d121      	bne.n	800a916 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800a8d2:	4b16      	ldr	r3, [pc, #88]	@ (800a92c <HAL_ADC_ConfigChannel+0x2cc>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d11b      	bne.n	800a916 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800a8de:	4b13      	ldr	r3, [pc, #76]	@ (800a92c <HAL_ADC_ConfigChannel+0x2cc>)
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	4a12      	ldr	r2, [pc, #72]	@ (800a92c <HAL_ADC_ConfigChannel+0x2cc>)
 800a8e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a8e8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b10      	cmp	r3, #16
 800a8f0:	d111      	bne.n	800a916 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <HAL_ADC_ConfigChannel+0x2d0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a934 <HAL_ADC_ConfigChannel+0x2d4>)
 800a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fc:	0c9a      	lsrs	r2, r3, #18
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800a908:	e002      	b.n	800a910 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1f9      	bne.n	800a90a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40012700 	.word	0x40012700
 800a930:	20000000 	.word	0x20000000
 800a934:	431bde83 	.word	0x431bde83

0800a938 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a27      	ldr	r2, [pc, #156]	@ (800a9e4 <HAL_ADC_AnalogWDGConfig+0xac>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d003      	beq.n	800a954 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800a950:	4a25      	ldr	r2, [pc, #148]	@ (800a9e8 <HAL_ADC_AnalogWDGConfig+0xb0>)
 800a952:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d101      	bne.n	800a962 <HAL_ADC_AnalogWDGConfig+0x2a>
 800a95e:	2302      	movs	r3, #2
 800a960:	e03b      	b.n	800a9da <HAL_ADC_AnalogWDGConfig+0xa2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	7a1b      	ldrb	r3, [r3, #8]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d108      	bne.n	800a984 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a980:	605a      	str	r2, [r3, #4]
 800a982:	e007      	b.n	800a994 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a992:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6859      	ldr	r1, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b13      	ldr	r3, [pc, #76]	@ (800a9ec <HAL_ADC_AnalogWDGConfig+0xb4>)
 800a9a0:	400b      	ands	r3, r1
 800a9a2:	6053      	str	r3, [r2, #4]
                            ADC_CR1_JAWDEN |
                            ADC_CR1_AWDEN  |
                            ADC_CR1_AWDCH   );
  
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6859      	ldr	r1, [r3, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
                           AnalogWDGConfig->Channel       );
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
      
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	68d2      	ldr	r2, [r2, #12]
 800a9c4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	6912      	ldr	r2, [r2, #16]
 800a9ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr
 800a9e4:	00800200 	.word	0x00800200
 800a9e8:	00400200 	.word	0x00400200
 800a9ec:	ff3ffde0 	.word	0xff3ffde0

0800a9f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa0a:	2b40      	cmp	r3, #64	@ 0x40
 800aa0c:	d043      	beq.n	800aa96 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f042 0201 	orr.w	r2, r2, #1
 800aa1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800aa1e:	4b20      	ldr	r3, [pc, #128]	@ (800aaa0 <ADC_Enable+0xb0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a20      	ldr	r2, [pc, #128]	@ (800aaa4 <ADC_Enable+0xb4>)
 800aa24:	fba2 2303 	umull	r2, r3, r2, r3
 800aa28:	0c9a      	lsrs	r2, r3, #18
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	005b      	lsls	r3, r3, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800aa32:	e002      	b.n	800aa3a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f9      	bne.n	800aa34 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800aa40:	f7ff fa62 	bl	8009f08 <HAL_GetTick>
 800aa44:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800aa46:	e01f      	b.n	800aa88 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800aa48:	f7ff fa5e 	bl	8009f08 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d918      	bls.n	800aa88 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa60:	2b40      	cmp	r3, #64	@ 0x40
 800aa62:	d011      	beq.n	800aa88 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa68:	f043 0210 	orr.w	r2, r3, #16
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa74:	f043 0201 	orr.w	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e007      	b.n	800aa98 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa92:	2b40      	cmp	r3, #64	@ 0x40
 800aa94:	d1d8      	bne.n	800aa48 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000000 	.word	0x20000000
 800aaa4:	431bde83 	.word	0x431bde83

0800aaa8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aabe:	2b40      	cmp	r3, #64	@ 0x40
 800aac0:	d12e      	bne.n	800ab20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	689a      	ldr	r2, [r3, #8]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0201 	bic.w	r2, r2, #1
 800aad0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800aad2:	f7ff fa19 	bl	8009f08 <HAL_GetTick>
 800aad6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800aad8:	e01b      	b.n	800ab12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800aada:	f7ff fa15 	bl	8009f08 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d914      	bls.n	800ab12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaf2:	2b40      	cmp	r3, #64	@ 0x40
 800aaf4:	d10d      	bne.n	800ab12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aafa:	f043 0210 	orr.w	r2, r3, #16
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab06:	f043 0201 	orr.w	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e007      	b.n	800ab22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1c:	2b40      	cmp	r3, #64	@ 0x40
 800ab1e:	d0dc      	beq.n	800aada <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bc80      	pop	{r7}
 800ab3a:	4770      	bx	lr

0800ab3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f003 0307 	and.w	r3, r3, #7
 800ab4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab80 <__NVIC_SetPriorityGrouping+0x44>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800ab58:	4013      	ands	r3, r2
 800ab5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ab64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800ab68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ab6e:	4a04      	ldr	r2, [pc, #16]	@ (800ab80 <__NVIC_SetPriorityGrouping+0x44>)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	60d3      	str	r3, [r2, #12]
}
 800ab74:	bf00      	nop
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bc80      	pop	{r7}
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	e000ed00 	.word	0xe000ed00

0800ab84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ab88:	4b04      	ldr	r3, [pc, #16]	@ (800ab9c <__NVIC_GetPriorityGrouping+0x18>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	0a1b      	lsrs	r3, r3, #8
 800ab8e:	f003 0307 	and.w	r3, r3, #7
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bc80      	pop	{r7}
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	e000ed00 	.word	0xe000ed00

0800aba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	db0b      	blt.n	800abca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	f003 021f 	and.w	r2, r3, #31
 800abb8:	4906      	ldr	r1, [pc, #24]	@ (800abd4 <__NVIC_EnableIRQ+0x34>)
 800abba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abbe:	095b      	lsrs	r3, r3, #5
 800abc0:	2001      	movs	r0, #1
 800abc2:	fa00 f202 	lsl.w	r2, r0, r2
 800abc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	bc80      	pop	{r7}
 800abd2:	4770      	bx	lr
 800abd4:	e000e100 	.word	0xe000e100

0800abd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	4603      	mov	r3, r0
 800abe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	db12      	blt.n	800ac10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f003 021f 	and.w	r2, r3, #31
 800abf0:	490a      	ldr	r1, [pc, #40]	@ (800ac1c <__NVIC_DisableIRQ+0x44>)
 800abf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	2001      	movs	r0, #1
 800abfa:	fa00 f202 	lsl.w	r2, r0, r2
 800abfe:	3320      	adds	r3, #32
 800ac00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac04:	f3bf 8f4f 	dsb	sy
}
 800ac08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac0a:	f3bf 8f6f 	isb	sy
}
 800ac0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	e000e100 	.word	0xe000e100

0800ac20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	6039      	str	r1, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	db0a      	blt.n	800ac4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	490c      	ldr	r1, [pc, #48]	@ (800ac6c <__NVIC_SetPriority+0x4c>)
 800ac3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac3e:	0112      	lsls	r2, r2, #4
 800ac40:	b2d2      	uxtb	r2, r2
 800ac42:	440b      	add	r3, r1
 800ac44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ac48:	e00a      	b.n	800ac60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	4908      	ldr	r1, [pc, #32]	@ (800ac70 <__NVIC_SetPriority+0x50>)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	f003 030f 	and.w	r3, r3, #15
 800ac56:	3b04      	subs	r3, #4
 800ac58:	0112      	lsls	r2, r2, #4
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	440b      	add	r3, r1
 800ac5e:	761a      	strb	r2, [r3, #24]
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bc80      	pop	{r7}
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	e000e100 	.word	0xe000e100
 800ac70:	e000ed00 	.word	0xe000ed00

0800ac74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b089      	sub	sp, #36	@ 0x24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f1c3 0307 	rsb	r3, r3, #7
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	bf28      	it	cs
 800ac92:	2304      	movcs	r3, #4
 800ac94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	2b06      	cmp	r3, #6
 800ac9c:	d902      	bls.n	800aca4 <NVIC_EncodePriority+0x30>
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	3b03      	subs	r3, #3
 800aca2:	e000      	b.n	800aca6 <NVIC_EncodePriority+0x32>
 800aca4:	2300      	movs	r3, #0
 800aca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aca8:	f04f 32ff 	mov.w	r2, #4294967295
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	fa02 f303 	lsl.w	r3, r2, r3
 800acb2:	43da      	mvns	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	401a      	ands	r2, r3
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acbc:	f04f 31ff 	mov.w	r1, #4294967295
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	fa01 f303 	lsl.w	r3, r1, r3
 800acc6:	43d9      	mvns	r1, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800accc:	4313      	orrs	r3, r2
         );
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3724      	adds	r7, #36	@ 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bc80      	pop	{r7}
 800acd6:	4770      	bx	lr

0800acd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ace8:	d301      	bcc.n	800acee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800acea:	2301      	movs	r3, #1
 800acec:	e00f      	b.n	800ad0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800acee:	4a0a      	ldr	r2, [pc, #40]	@ (800ad18 <SysTick_Config+0x40>)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800acf6:	210f      	movs	r1, #15
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	f7ff ff90 	bl	800ac20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad00:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <SysTick_Config+0x40>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad06:	4b04      	ldr	r3, [pc, #16]	@ (800ad18 <SysTick_Config+0x40>)
 800ad08:	2207      	movs	r2, #7
 800ad0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	e000e010 	.word	0xe000e010

0800ad1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ff09 	bl	800ab3c <__NVIC_SetPriorityGrouping>
}
 800ad2a:	bf00      	nop
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	4603      	mov	r3, r0
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
 800ad3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ad44:	f7ff ff1e 	bl	800ab84 <__NVIC_GetPriorityGrouping>
 800ad48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	6978      	ldr	r0, [r7, #20]
 800ad50:	f7ff ff90 	bl	800ac74 <NVIC_EncodePriority>
 800ad54:	4602      	mov	r2, r0
 800ad56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff ff5f 	bl	800ac20 <__NVIC_SetPriority>
}
 800ad62:	bf00      	nop
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	4603      	mov	r3, r0
 800ad72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff ff11 	bl	800aba0 <__NVIC_EnableIRQ>
}
 800ad7e:	bf00      	nop
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800ad90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff ff1f 	bl	800abd8 <__NVIC_DisableIRQ>
}
 800ad9a:	bf00      	nop
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff ff94 	bl	800acd8 <SysTick_Config>
 800adb0:	4603      	mov	r3, r0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d005      	beq.n	800adde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2204      	movs	r2, #4
 800add6:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e029      	b.n	800ae32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f022 020e 	bic.w	r2, r2, #14
 800adec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0201 	bic.w	r2, r2, #1
 800adfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae02:	f003 021c 	and.w	r2, r3, #28
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	fa01 f202 	lsl.w	r2, r1, r2
 800ae10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	4798      	blx	r3
    }
  }
  return status;
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ae4a:	b2db      	uxtb	r3, r3
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr
	...

0800ae58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ae6e:	e160      	b.n	800b132 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	2101      	movs	r1, #1
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8152 	beq.w	800b12c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d005      	beq.n	800aea0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d130      	bne.n	800af02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	2203      	movs	r2, #3
 800aeac:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb0:	43db      	mvns	r3, r3
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	68da      	ldr	r2, [r3, #12]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	005b      	lsls	r3, r3, #1
 800aec0:	fa02 f303 	lsl.w	r3, r2, r3
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800aed6:	2201      	movs	r2, #1
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	fa02 f303 	lsl.w	r3, r2, r3
 800aede:	43db      	mvns	r3, r3
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	4013      	ands	r3, r2
 800aee4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	091b      	lsrs	r3, r3, #4
 800aeec:	f003 0201 	and.w	r2, r3, #1
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	fa02 f303 	lsl.w	r3, r2, r3
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f003 0303 	and.w	r3, r3, #3
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d017      	beq.n	800af3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	2203      	movs	r2, #3
 800af1a:	fa02 f303 	lsl.w	r3, r2, r3
 800af1e:	43db      	mvns	r3, r3
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4013      	ands	r3, r2
 800af24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	fa02 f303 	lsl.w	r3, r2, r3
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f003 0303 	and.w	r3, r3, #3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d123      	bne.n	800af92 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	08da      	lsrs	r2, r3, #3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3208      	adds	r2, #8
 800af52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	220f      	movs	r2, #15
 800af62:	fa02 f303 	lsl.w	r3, r2, r3
 800af66:	43db      	mvns	r3, r3
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4013      	ands	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f003 0307 	and.w	r3, r3, #7
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	4313      	orrs	r3, r2
 800af82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	08da      	lsrs	r2, r3, #3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3208      	adds	r2, #8
 800af8c:	6939      	ldr	r1, [r7, #16]
 800af8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	2203      	movs	r2, #3
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	43db      	mvns	r3, r3
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	4013      	ands	r3, r2
 800afa8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f003 0203 	and.w	r2, r3, #3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	fa02 f303 	lsl.w	r3, r2, r3
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 80ac 	beq.w	800b12c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afd4:	4b5e      	ldr	r3, [pc, #376]	@ (800b150 <HAL_GPIO_Init+0x2f8>)
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	4a5d      	ldr	r2, [pc, #372]	@ (800b150 <HAL_GPIO_Init+0x2f8>)
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	6213      	str	r3, [r2, #32]
 800afe0:	4b5b      	ldr	r3, [pc, #364]	@ (800b150 <HAL_GPIO_Init+0x2f8>)
 800afe2:	6a1b      	ldr	r3, [r3, #32]
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	60bb      	str	r3, [r7, #8]
 800afea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800afec:	4a59      	ldr	r2, [pc, #356]	@ (800b154 <HAL_GPIO_Init+0x2fc>)
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	089b      	lsrs	r3, r3, #2
 800aff2:	3302      	adds	r3, #2
 800aff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	220f      	movs	r2, #15
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	43db      	mvns	r3, r3
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	4013      	ands	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a51      	ldr	r2, [pc, #324]	@ (800b158 <HAL_GPIO_Init+0x300>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d025      	beq.n	800b064 <HAL_GPIO_Init+0x20c>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a50      	ldr	r2, [pc, #320]	@ (800b15c <HAL_GPIO_Init+0x304>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d01f      	beq.n	800b060 <HAL_GPIO_Init+0x208>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a4f      	ldr	r2, [pc, #316]	@ (800b160 <HAL_GPIO_Init+0x308>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d019      	beq.n	800b05c <HAL_GPIO_Init+0x204>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a4e      	ldr	r2, [pc, #312]	@ (800b164 <HAL_GPIO_Init+0x30c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <HAL_GPIO_Init+0x200>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a4d      	ldr	r2, [pc, #308]	@ (800b168 <HAL_GPIO_Init+0x310>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00d      	beq.n	800b054 <HAL_GPIO_Init+0x1fc>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a4c      	ldr	r2, [pc, #304]	@ (800b16c <HAL_GPIO_Init+0x314>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d007      	beq.n	800b050 <HAL_GPIO_Init+0x1f8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a4b      	ldr	r2, [pc, #300]	@ (800b170 <HAL_GPIO_Init+0x318>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d101      	bne.n	800b04c <HAL_GPIO_Init+0x1f4>
 800b048:	2306      	movs	r3, #6
 800b04a:	e00c      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b04c:	2307      	movs	r3, #7
 800b04e:	e00a      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b050:	2305      	movs	r3, #5
 800b052:	e008      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b054:	2304      	movs	r3, #4
 800b056:	e006      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b058:	2303      	movs	r3, #3
 800b05a:	e004      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b05c:	2302      	movs	r3, #2
 800b05e:	e002      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <HAL_GPIO_Init+0x20e>
 800b064:	2300      	movs	r3, #0
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	f002 0203 	and.w	r2, r2, #3
 800b06c:	0092      	lsls	r2, r2, #2
 800b06e:	4093      	lsls	r3, r2
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	4313      	orrs	r3, r2
 800b074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b076:	4937      	ldr	r1, [pc, #220]	@ (800b154 <HAL_GPIO_Init+0x2fc>)
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	089b      	lsrs	r3, r3, #2
 800b07c:	3302      	adds	r3, #2
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b084:	4b3b      	ldr	r3, [pc, #236]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	43db      	mvns	r3, r3
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4013      	ands	r3, r2
 800b092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b0a8:	4a32      	ldr	r2, [pc, #200]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0ae:	4b31      	ldr	r3, [pc, #196]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	43db      	mvns	r3, r3
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b0d2:	4a28      	ldr	r2, [pc, #160]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b0d8:	4b26      	ldr	r3, [pc, #152]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	43db      	mvns	r3, r3
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d003      	beq.n	800b0fc <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b0fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b102:	4b1c      	ldr	r3, [pc, #112]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	43db      	mvns	r3, r3
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	4013      	ands	r3, r2
 800b110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d003      	beq.n	800b126 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b126:	4a13      	ldr	r2, [pc, #76]	@ (800b174 <HAL_GPIO_Init+0x31c>)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3301      	adds	r3, #1
 800b130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	fa22 f303 	lsr.w	r3, r2, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f47f ae97 	bne.w	800ae70 <HAL_GPIO_Init+0x18>
  }
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	371c      	adds	r7, #28
 800b148:	46bd      	mov	sp, r7
 800b14a:	bc80      	pop	{r7}
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	40023800 	.word	0x40023800
 800b154:	40010000 	.word	0x40010000
 800b158:	40020000 	.word	0x40020000
 800b15c:	40020400 	.word	0x40020400
 800b160:	40020800 	.word	0x40020800
 800b164:	40020c00 	.word	0x40020c00
 800b168:	40021000 	.word	0x40021000
 800b16c:	40021400 	.word	0x40021400
 800b170:	40021800 	.word	0x40021800
 800b174:	40010400 	.word	0x40010400

0800b178 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b18e:	e0c4      	b.n	800b31a <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b190:	2201      	movs	r2, #1
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	4013      	ands	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 80b7 	beq.w	800b314 <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 800b1a6:	4a63      	ldr	r2, [pc, #396]	@ (800b334 <HAL_GPIO_DeInit+0x1bc>)
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	089b      	lsrs	r3, r3, #2
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b2:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	220f      	movs	r2, #15
 800b1be:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a5b      	ldr	r2, [pc, #364]	@ (800b338 <HAL_GPIO_DeInit+0x1c0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d025      	beq.n	800b21c <HAL_GPIO_DeInit+0xa4>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a5a      	ldr	r2, [pc, #360]	@ (800b33c <HAL_GPIO_DeInit+0x1c4>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d01f      	beq.n	800b218 <HAL_GPIO_DeInit+0xa0>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a59      	ldr	r2, [pc, #356]	@ (800b340 <HAL_GPIO_DeInit+0x1c8>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d019      	beq.n	800b214 <HAL_GPIO_DeInit+0x9c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a58      	ldr	r2, [pc, #352]	@ (800b344 <HAL_GPIO_DeInit+0x1cc>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d013      	beq.n	800b210 <HAL_GPIO_DeInit+0x98>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a57      	ldr	r2, [pc, #348]	@ (800b348 <HAL_GPIO_DeInit+0x1d0>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d00d      	beq.n	800b20c <HAL_GPIO_DeInit+0x94>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a56      	ldr	r2, [pc, #344]	@ (800b34c <HAL_GPIO_DeInit+0x1d4>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d007      	beq.n	800b208 <HAL_GPIO_DeInit+0x90>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a55      	ldr	r2, [pc, #340]	@ (800b350 <HAL_GPIO_DeInit+0x1d8>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d101      	bne.n	800b204 <HAL_GPIO_DeInit+0x8c>
 800b200:	2306      	movs	r3, #6
 800b202:	e00c      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b204:	2307      	movs	r3, #7
 800b206:	e00a      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b208:	2305      	movs	r3, #5
 800b20a:	e008      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b20c:	2304      	movs	r3, #4
 800b20e:	e006      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b210:	2303      	movs	r3, #3
 800b212:	e004      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b214:	2302      	movs	r3, #2
 800b216:	e002      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b218:	2301      	movs	r3, #1
 800b21a:	e000      	b.n	800b21e <HAL_GPIO_DeInit+0xa6>
 800b21c:	2300      	movs	r3, #0
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	f002 0203 	and.w	r2, r2, #3
 800b224:	0092      	lsls	r2, r2, #2
 800b226:	4093      	lsls	r3, r2
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d132      	bne.n	800b294 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b22e:	4b49      	ldr	r3, [pc, #292]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	43db      	mvns	r3, r3
 800b236:	4947      	ldr	r1, [pc, #284]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b238:	4013      	ands	r3, r2
 800b23a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b23c:	4b45      	ldr	r3, [pc, #276]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	43db      	mvns	r3, r3
 800b244:	4943      	ldr	r1, [pc, #268]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b246:	4013      	ands	r3, r2
 800b248:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b24a:	4b42      	ldr	r3, [pc, #264]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	43db      	mvns	r3, r3
 800b252:	4940      	ldr	r1, [pc, #256]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b254:	4013      	ands	r3, r2
 800b256:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b258:	4b3e      	ldr	r3, [pc, #248]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	43db      	mvns	r3, r3
 800b260:	493c      	ldr	r1, [pc, #240]	@ (800b354 <HAL_GPIO_DeInit+0x1dc>)
 800b262:	4013      	ands	r3, r2
 800b264:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	220f      	movs	r2, #15
 800b270:	fa02 f303 	lsl.w	r3, r2, r3
 800b274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800b276:	4a2f      	ldr	r2, [pc, #188]	@ (800b334 <HAL_GPIO_DeInit+0x1bc>)
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	089b      	lsrs	r3, r3, #2
 800b27c:	3302      	adds	r3, #2
 800b27e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	43da      	mvns	r2, r3
 800b286:	482b      	ldr	r0, [pc, #172]	@ (800b334 <HAL_GPIO_DeInit+0x1bc>)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	089b      	lsrs	r3, r3, #2
 800b28c:	400a      	ands	r2, r1
 800b28e:	3302      	adds	r3, #2
 800b290:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	2103      	movs	r1, #3
 800b29e:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a2:	43db      	mvns	r3, r3
 800b2a4:	401a      	ands	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	08da      	lsrs	r2, r3, #3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3208      	adds	r2, #8
 800b2b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	220f      	movs	r2, #15
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	08d2      	lsrs	r2, r2, #3
 800b2ca:	4019      	ands	r1, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3208      	adds	r2, #8
 800b2d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68da      	ldr	r2, [r3, #12]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	005b      	lsls	r3, r3, #1
 800b2dc:	2103      	movs	r1, #3
 800b2de:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e2:	43db      	mvns	r3, r3
 800b2e4:	401a      	ands	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f6:	43db      	mvns	r3, r3
 800b2f8:	401a      	ands	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	2103      	movs	r1, #3
 800b308:	fa01 f303 	lsl.w	r3, r1, r3
 800b30c:	43db      	mvns	r3, r3
 800b30e:	401a      	ands	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	3301      	adds	r3, #1
 800b318:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	fa22 f303 	lsr.w	r3, r2, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	f47f af34 	bne.w	800b190 <HAL_GPIO_DeInit+0x18>
  }
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	bc80      	pop	{r7}
 800b332:	4770      	bx	lr
 800b334:	40010000 	.word	0x40010000
 800b338:	40020000 	.word	0x40020000
 800b33c:	40020400 	.word	0x40020400
 800b340:	40020800 	.word	0x40020800
 800b344:	40020c00 	.word	0x40020c00
 800b348:	40021000 	.word	0x40021000
 800b34c:	40021400 	.word	0x40021400
 800b350:	40021800 	.word	0x40021800
 800b354:	40010400 	.word	0x40010400

0800b358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	807b      	strh	r3, [r7, #2]
 800b364:	4613      	mov	r3, r2
 800b366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b368:	787b      	ldrb	r3, [r7, #1]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800b374:	e003      	b.n	800b37e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800b376:	887b      	ldrh	r3, [r7, #2]
 800b378:	041a      	lsls	r2, r3, #16
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	619a      	str	r2, [r3, #24]
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr

0800b388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e12b      	b.n	800b5f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f95d 	bl	800b66e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2224      	movs	r2, #36	@ 0x24
 800b3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0201 	bic.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b3da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b3ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b3ec:	f003 fa6c 	bl	800e8c8 <HAL_RCC_GetPCLK1Freq>
 800b3f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	4a81      	ldr	r2, [pc, #516]	@ (800b5fc <HAL_I2C_Init+0x274>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d807      	bhi.n	800b40c <HAL_I2C_Init+0x84>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4a80      	ldr	r2, [pc, #512]	@ (800b600 <HAL_I2C_Init+0x278>)
 800b400:	4293      	cmp	r3, r2
 800b402:	bf94      	ite	ls
 800b404:	2301      	movls	r3, #1
 800b406:	2300      	movhi	r3, #0
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	e006      	b.n	800b41a <HAL_I2C_Init+0x92>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4a7d      	ldr	r2, [pc, #500]	@ (800b604 <HAL_I2C_Init+0x27c>)
 800b410:	4293      	cmp	r3, r2
 800b412:	bf94      	ite	ls
 800b414:	2301      	movls	r3, #1
 800b416:	2300      	movhi	r3, #0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e0e7      	b.n	800b5f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4a78      	ldr	r2, [pc, #480]	@ (800b608 <HAL_I2C_Init+0x280>)
 800b426:	fba2 2303 	umull	r2, r3, r2, r3
 800b42a:	0c9b      	lsrs	r3, r3, #18
 800b42c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	430a      	orrs	r2, r1
 800b440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	4a6a      	ldr	r2, [pc, #424]	@ (800b5fc <HAL_I2C_Init+0x274>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d802      	bhi.n	800b45c <HAL_I2C_Init+0xd4>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	3301      	adds	r3, #1
 800b45a:	e009      	b.n	800b470 <HAL_I2C_Init+0xe8>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b462:	fb02 f303 	mul.w	r3, r2, r3
 800b466:	4a69      	ldr	r2, [pc, #420]	@ (800b60c <HAL_I2C_Init+0x284>)
 800b468:	fba2 2303 	umull	r2, r3, r2, r3
 800b46c:	099b      	lsrs	r3, r3, #6
 800b46e:	3301      	adds	r3, #1
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6812      	ldr	r2, [r2, #0]
 800b474:	430b      	orrs	r3, r1
 800b476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b482:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	495c      	ldr	r1, [pc, #368]	@ (800b5fc <HAL_I2C_Init+0x274>)
 800b48c:	428b      	cmp	r3, r1
 800b48e:	d819      	bhi.n	800b4c4 <HAL_I2C_Init+0x13c>
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	1e59      	subs	r1, r3, #1
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b49e:	1c59      	adds	r1, r3, #1
 800b4a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b4a4:	400b      	ands	r3, r1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <HAL_I2C_Init+0x138>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	1e59      	subs	r1, r3, #1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4be:	e051      	b.n	800b564 <HAL_I2C_Init+0x1dc>
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	e04f      	b.n	800b564 <HAL_I2C_Init+0x1dc>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d111      	bne.n	800b4f0 <HAL_I2C_Init+0x168>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1e58      	subs	r0, r3, #1
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6859      	ldr	r1, [r3, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	440b      	add	r3, r1
 800b4da:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4de:	3301      	adds	r3, #1
 800b4e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	bf0c      	ite	eq
 800b4e8:	2301      	moveq	r3, #1
 800b4ea:	2300      	movne	r3, #0
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	e012      	b.n	800b516 <HAL_I2C_Init+0x18e>
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	1e58      	subs	r0, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6859      	ldr	r1, [r3, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	0099      	lsls	r1, r3, #2
 800b500:	440b      	add	r3, r1
 800b502:	fbb0 f3f3 	udiv	r3, r0, r3
 800b506:	3301      	adds	r3, #1
 800b508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bf0c      	ite	eq
 800b510:	2301      	moveq	r3, #1
 800b512:	2300      	movne	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <HAL_I2C_Init+0x196>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e022      	b.n	800b564 <HAL_I2C_Init+0x1dc>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10e      	bne.n	800b544 <HAL_I2C_Init+0x1bc>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	1e58      	subs	r0, r3, #1
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6859      	ldr	r1, [r3, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	440b      	add	r3, r1
 800b534:	fbb0 f3f3 	udiv	r3, r0, r3
 800b538:	3301      	adds	r3, #1
 800b53a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b542:	e00f      	b.n	800b564 <HAL_I2C_Init+0x1dc>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	1e58      	subs	r0, r3, #1
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6859      	ldr	r1, [r3, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	440b      	add	r3, r1
 800b552:	0099      	lsls	r1, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	fbb0 f3f3 	udiv	r3, r0, r3
 800b55a:	3301      	adds	r3, #1
 800b55c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b560:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b564:	6879      	ldr	r1, [r7, #4]
 800b566:	6809      	ldr	r1, [r1, #0]
 800b568:	4313      	orrs	r3, r2
 800b56a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69da      	ldr	r2, [r3, #28]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b592:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6911      	ldr	r1, [r2, #16]
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	68d2      	ldr	r2, [r2, #12]
 800b59e:	4311      	orrs	r1, r2
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	6812      	ldr	r2, [r2, #0]
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	695a      	ldr	r2, [r3, #20]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	431a      	orrs	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f042 0201 	orr.w	r2, r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2220      	movs	r2, #32
 800b5de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	000186a0 	.word	0x000186a0
 800b600:	001e847f 	.word	0x001e847f
 800b604:	003d08ff 	.word	0x003d08ff
 800b608:	431bde83 	.word	0x431bde83
 800b60c:	10624dd3 	.word	0x10624dd3

0800b610 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e021      	b.n	800b666 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2224      	movs	r2, #36	@ 0x24
 800b626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f820 	bl	800b680 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bc80      	pop	{r7}
 800b67e:	4770      	bx	lr

0800b680 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc80      	pop	{r7}
 800b690:	4770      	bx	lr

0800b692 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6a4:	2b80      	cmp	r3, #128	@ 0x80
 800b6a6:	d103      	bne.n	800b6b0 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	611a      	str	r2, [r3, #16]
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bc80      	pop	{r7}
 800b6b8:	4770      	bx	lr
	...

0800b6bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	817b      	strh	r3, [r7, #10]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	813b      	strh	r3, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6d6:	f7fe fc17 	bl	8009f08 <HAL_GetTick>
 800b6da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b20      	cmp	r3, #32
 800b6e6:	f040 80d9 	bne.w	800b89c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	2319      	movs	r3, #25
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	496d      	ldr	r1, [pc, #436]	@ (800b8a8 <HAL_I2C_Mem_Write+0x1ec>)
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f002 f8f7 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b700:	2302      	movs	r3, #2
 800b702:	e0cc      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <HAL_I2C_Mem_Write+0x56>
 800b70e:	2302      	movs	r3, #2
 800b710:	e0c5      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b01      	cmp	r3, #1
 800b726:	d007      	beq.n	800b738 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2221      	movs	r2, #33	@ 0x21
 800b74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2240      	movs	r2, #64	@ 0x40
 800b754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a3a      	ldr	r2, [r7, #32]
 800b762:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a4d      	ldr	r2, [pc, #308]	@ (800b8ac <HAL_I2C_Mem_Write+0x1f0>)
 800b778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b77a:	88f8      	ldrh	r0, [r7, #6]
 800b77c:	893a      	ldrh	r2, [r7, #8]
 800b77e:	8979      	ldrh	r1, [r7, #10]
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	9301      	str	r3, [sp, #4]
 800b784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4603      	mov	r3, r0
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f001 fe86 	bl	800d49c <I2C_RequestMemoryWrite>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d052      	beq.n	800b83c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e081      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f002 f9bc 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00d      	beq.n	800b7c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d107      	bne.n	800b7c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e06b      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ca:	781a      	ldrb	r2, [r3, #0]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	f003 0304 	and.w	r3, r3, #4
 800b800:	2b04      	cmp	r3, #4
 800b802:	d11b      	bne.n	800b83c <HAL_I2C_Mem_Write+0x180>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d017      	beq.n	800b83c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b810:	781a      	ldrb	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b832:	b29b      	uxth	r3, r3
 800b834:	3b01      	subs	r3, #1
 800b836:	b29a      	uxth	r2, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1aa      	bne.n	800b79a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f002 f9af 	bl	800dbac <I2C_WaitOnBTFFlagUntilTimeout>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00d      	beq.n	800b870 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d107      	bne.n	800b86c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b86a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e016      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b87e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2220      	movs	r2, #32
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	e000      	b.n	800b89e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b89c:	2302      	movs	r3, #2
  }
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	00100002 	.word	0x00100002
 800b8ac:	ffff0000 	.word	0xffff0000

0800b8b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08c      	sub	sp, #48	@ 0x30
 800b8b4:	af02      	add	r7, sp, #8
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4603      	mov	r3, r0
 800b8c0:	817b      	strh	r3, [r7, #10]
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	813b      	strh	r3, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b8ca:	f7fe fb1d 	bl	8009f08 <HAL_GetTick>
 800b8ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	f040 8208 	bne.w	800bcee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	2319      	movs	r3, #25
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	497b      	ldr	r1, [pc, #492]	@ (800bad4 <HAL_I2C_Mem_Read+0x224>)
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f001 fffd 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	e1fb      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d101      	bne.n	800b906 <HAL_I2C_Mem_Read+0x56>
 800b902:	2302      	movs	r3, #2
 800b904:	e1f4      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d007      	beq.n	800b92c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f042 0201 	orr.w	r2, r2, #1
 800b92a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b93a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2222      	movs	r2, #34	@ 0x22
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2240      	movs	r2, #64	@ 0x40
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b956:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b95c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4a5b      	ldr	r2, [pc, #364]	@ (800bad8 <HAL_I2C_Mem_Read+0x228>)
 800b96c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b96e:	88f8      	ldrh	r0, [r7, #6]
 800b970:	893a      	ldrh	r2, [r7, #8]
 800b972:	8979      	ldrh	r1, [r7, #10]
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	4603      	mov	r3, r0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f001 fe22 	bl	800d5c8 <I2C_RequestMemoryRead>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e1b0      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b992:	2b00      	cmp	r3, #0
 800b994:	d113      	bne.n	800b9be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b996:	2300      	movs	r3, #0
 800b998:	623b      	str	r3, [r7, #32]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	623b      	str	r3, [r7, #32]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	623b      	str	r3, [r7, #32]
 800b9aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	e184      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d11b      	bne.n	800b9fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	61fb      	str	r3, [r7, #28]
 800b9ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9fa:	601a      	str	r2, [r3, #0]
 800b9fc:	e164      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d11b      	bne.n	800ba3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba26:	2300      	movs	r3, #0
 800ba28:	61bb      	str	r3, [r7, #24]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	61bb      	str	r3, [r7, #24]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	61bb      	str	r3, [r7, #24]
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	e144      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	617b      	str	r3, [r7, #20]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba54:	e138      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	f200 80f1 	bhi.w	800bc42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d123      	bne.n	800bab0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f002 f917 	bl	800dca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e139      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	691a      	ldr	r2, [r3, #16]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800baae:	e10b      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d14e      	bne.n	800bb56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	2200      	movs	r2, #0
 800bac0:	4906      	ldr	r1, [pc, #24]	@ (800badc <HAL_I2C_Mem_Read+0x22c>)
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f001 ff10 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d008      	beq.n	800bae0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e10e      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
 800bad2:	bf00      	nop
 800bad4:	00100002 	.word	0x00100002
 800bad8:	ffff0000 	.word	0xffff0000
 800badc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691a      	ldr	r2, [r3, #16]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafa:	b2d2      	uxtb	r2, r2
 800bafc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	691a      	ldr	r2, [r3, #16]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bb54:	e0b8      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4966      	ldr	r1, [pc, #408]	@ (800bcf8 <HAL_I2C_Mem_Read+0x448>)
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	f001 fec1 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e0bf      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	691a      	ldr	r2, [r3, #16]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8a:	b2d2      	uxtb	r2, r2
 800bb8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	2200      	movs	r2, #0
 800bbba:	494f      	ldr	r1, [pc, #316]	@ (800bcf8 <HAL_I2C_Mem_Read+0x448>)
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f001 fe93 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e091      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	691a      	ldr	r2, [r3, #16]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc40:	e042      	b.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f002 f82a 	bl	800dca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e04c      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	691a      	ldr	r2, [r3, #16]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc60:	b2d2      	uxtb	r2, r2
 800bc62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc72:	3b01      	subs	r3, #1
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	3b01      	subs	r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	f003 0304 	and.w	r3, r3, #4
 800bc92:	2b04      	cmp	r3, #4
 800bc94:	d118      	bne.n	800bcc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca0:	b2d2      	uxtb	r2, r2
 800bca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f47f aec2 	bne.w	800ba56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	e000      	b.n	800bcf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bcee:	2302      	movs	r3, #2
  }
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3728      	adds	r7, #40	@ 0x28
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	00010004 	.word	0x00010004

0800bcfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd14:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd1c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd24:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bd26:	7bfb      	ldrb	r3, [r7, #15]
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d003      	beq.n	800bd34 <HAL_I2C_EV_IRQHandler+0x38>
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	2b40      	cmp	r3, #64	@ 0x40
 800bd30:	f040 80b1 	bne.w	800be96 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	699b      	ldr	r3, [r3, #24]
 800bd3a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10d      	bne.n	800bd6a <HAL_I2C_EV_IRQHandler+0x6e>
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800bd54:	d003      	beq.n	800bd5e <HAL_I2C_EV_IRQHandler+0x62>
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800bd5c:	d101      	bne.n	800bd62 <HAL_I2C_EV_IRQHandler+0x66>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <HAL_I2C_EV_IRQHandler+0x68>
 800bd62:	2300      	movs	r3, #0
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	f000 8114 	beq.w	800bf92 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <HAL_I2C_EV_IRQHandler+0x90>
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d006      	beq.n	800bd8c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f002 f819 	bl	800ddb6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fd70 	bl	800c86a <I2C_Master_SB>
 800bd8a:	e083      	b.n	800be94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	f003 0308 	and.w	r3, r3, #8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d008      	beq.n	800bda8 <HAL_I2C_EV_IRQHandler+0xac>
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 fde7 	bl	800c974 <I2C_Master_ADD10>
 800bda6:	e075      	b.n	800be94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d008      	beq.n	800bdc4 <HAL_I2C_EV_IRQHandler+0xc8>
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fe02 	bl	800c9c6 <I2C_Master_ADDR>
 800bdc2:	e067      	b.n	800be94 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	f003 0304 	and.w	r3, r3, #4
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d036      	beq.n	800be3c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bddc:	f000 80db 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00d      	beq.n	800be06 <HAL_I2C_EV_IRQHandler+0x10a>
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d008      	beq.n	800be06 <HAL_I2C_EV_IRQHandler+0x10a>
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f003 0304 	and.w	r3, r3, #4
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d103      	bne.n	800be06 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f9e4 	bl	800c1cc <I2C_MasterTransmit_TXE>
 800be04:	e046      	b.n	800be94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80c2 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 80bc 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b21      	cmp	r3, #33	@ 0x21
 800be22:	d103      	bne.n	800be2c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fa6d 	bl	800c304 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be2a:	e0b4      	b.n	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b40      	cmp	r3, #64	@ 0x40
 800be30:	f040 80b1 	bne.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fadb 	bl	800c3f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be3a:	e0ac      	b.n	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be4a:	f000 80a4 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00d      	beq.n	800be74 <HAL_I2C_EV_IRQHandler+0x178>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <HAL_I2C_EV_IRQHandler+0x178>
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d103      	bne.n	800be74 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fb57 	bl	800c520 <I2C_MasterReceive_RXNE>
 800be72:	e00f      	b.n	800be94 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 808b 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be86:	2b00      	cmp	r3, #0
 800be88:	f000 8085 	beq.w	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fc02 	bl	800c696 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800be92:	e080      	b.n	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
 800be94:	e07f      	b.n	800bf96 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d004      	beq.n	800bea8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	61fb      	str	r3, [r7, #28]
 800bea6:	e007      	b.n	800beb8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d011      	beq.n	800bee6 <HAL_I2C_EV_IRQHandler+0x1ea>
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00c      	beq.n	800bee6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d003      	beq.n	800bedc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800bedc:	69b9      	ldr	r1, [r7, #24]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 ffbd 	bl	800ce5e <I2C_Slave_ADDR>
 800bee4:	e05a      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	f003 0310 	and.w	r3, r3, #16
 800beec:	2b00      	cmp	r3, #0
 800beee:	d008      	beq.n	800bf02 <HAL_I2C_EV_IRQHandler+0x206>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d003      	beq.n	800bf02 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fff8 	bl	800cef0 <I2C_Slave_STOPF>
 800bf00:	e04c      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bf02:	7bbb      	ldrb	r3, [r7, #14]
 800bf04:	2b21      	cmp	r3, #33	@ 0x21
 800bf06:	d002      	beq.n	800bf0e <HAL_I2C_EV_IRQHandler+0x212>
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	2b29      	cmp	r3, #41	@ 0x29
 800bf0c:	d120      	bne.n	800bf50 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00d      	beq.n	800bf34 <HAL_I2C_EV_IRQHandler+0x238>
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <HAL_I2C_EV_IRQHandler+0x238>
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d103      	bne.n	800bf34 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 feda 	bl	800cce6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf32:	e032      	b.n	800bf9a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	f003 0304 	and.w	r3, r3, #4
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d02d      	beq.n	800bf9a <HAL_I2C_EV_IRQHandler+0x29e>
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d028      	beq.n	800bf9a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 ff09 	bl	800cd60 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf4e:	e024      	b.n	800bf9a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00d      	beq.n	800bf76 <HAL_I2C_EV_IRQHandler+0x27a>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <HAL_I2C_EV_IRQHandler+0x27a>
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	f003 0304 	and.w	r3, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 ff16 	bl	800cda0 <I2C_SlaveReceive_RXNE>
 800bf74:	e012      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	f003 0304 	and.w	r3, r3, #4
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00d      	beq.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d008      	beq.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 ff46 	bl	800ce1c <I2C_SlaveReceive_BTF>
 800bf90:	e004      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800bf92:	bf00      	nop
 800bf94:	e002      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bf96:	bf00      	nop
 800bf98:	e000      	b.n	800bf9c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bf9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b08a      	sub	sp, #40	@ 0x28
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bfc4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00d      	beq.n	800bfec <HAL_I2C_ER_IRQHandler+0x4a>
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d008      	beq.n	800bfec <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	f043 0301 	orr.w	r3, r3, #1
 800bfe0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bfea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00d      	beq.n	800c012 <HAL_I2C_ER_IRQHandler+0x70>
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c002:	f043 0302 	orr.w	r3, r3, #2
 800c006:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800c010:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d03e      	beq.n	800c09a <HAL_I2C_ER_IRQHandler+0xf8>
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c022:	2b00      	cmp	r3, #0
 800c024:	d039      	beq.n	800c09a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800c026:	7efb      	ldrb	r3, [r7, #27]
 800c028:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c02e:	b29b      	uxth	r3, r3
 800c030:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c038:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c03e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800c040:	7ebb      	ldrb	r3, [r7, #26]
 800c042:	2b20      	cmp	r3, #32
 800c044:	d112      	bne.n	800c06c <HAL_I2C_ER_IRQHandler+0xca>
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10f      	bne.n	800c06c <HAL_I2C_ER_IRQHandler+0xca>
 800c04c:	7cfb      	ldrb	r3, [r7, #19]
 800c04e:	2b21      	cmp	r3, #33	@ 0x21
 800c050:	d008      	beq.n	800c064 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800c052:	7cfb      	ldrb	r3, [r7, #19]
 800c054:	2b29      	cmp	r3, #41	@ 0x29
 800c056:	d005      	beq.n	800c064 <HAL_I2C_ER_IRQHandler+0xc2>
 800c058:	7cfb      	ldrb	r3, [r7, #19]
 800c05a:	2b28      	cmp	r3, #40	@ 0x28
 800c05c:	d106      	bne.n	800c06c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b21      	cmp	r3, #33	@ 0x21
 800c062:	d103      	bne.n	800c06c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 f873 	bl	800d150 <I2C_Slave_AF>
 800c06a:	e016      	b.n	800c09a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c074:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800c076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c078:	f043 0304 	orr.w	r3, r3, #4
 800c07c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800c07e:	7efb      	ldrb	r3, [r7, #27]
 800c080:	2b10      	cmp	r3, #16
 800c082:	d002      	beq.n	800c08a <HAL_I2C_ER_IRQHandler+0xe8>
 800c084:	7efb      	ldrb	r3, [r7, #27]
 800c086:	2b40      	cmp	r3, #64	@ 0x40
 800c088:	d107      	bne.n	800c09a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c098:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00d      	beq.n	800c0c0 <HAL_I2C_ER_IRQHandler+0x11e>
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d008      	beq.n	800c0c0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	f043 0308 	orr.w	r3, r3, #8
 800c0b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800c0be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	431a      	orrs	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f001 f8b0 	bl	800d238 <I2C_ITError>
  }
}
 800c0d8:	bf00      	nop
 800c0da:	3728      	adds	r7, #40	@ 0x28
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bc80      	pop	{r7}
 800c0f0:	4770      	bx	lr

0800c0f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c0fa:	bf00      	nop
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bc80      	pop	{r7}
 800c102:	4770      	bx	lr

0800c104 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	bc80      	pop	{r7}
 800c114:	4770      	bx	lr

0800c116 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c11e:	bf00      	nop
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	bc80      	pop	{r7}
 800c126:	4770      	bx	lr

0800c128 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
 800c134:	4613      	mov	r3, r2
 800c136:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bc80      	pop	{r7}
 800c140:	4770      	bx	lr

0800c142 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800c14a:	bf00      	nop
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	bc80      	pop	{r7}
 800c152:	4770      	bx	lr

0800c154 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	bc80      	pop	{r7}
 800c164:	4770      	bx	lr

0800c166 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	bc80      	pop	{r7}
 800c176:	4770      	bx	lr

0800c178 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	bc80      	pop	{r7}
 800c188:	4770      	bx	lr

0800c18a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b083      	sub	sp, #12
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c192:	bf00      	nop
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	bc80      	pop	{r7}
 800c19a:	4770      	bx	lr

0800c19c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1aa:	b2db      	uxtb	r3, r3
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bc80      	pop	{r7}
 800c1b4:	4770      	bx	lr

0800c1b6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b083      	sub	sp, #12
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bc80      	pop	{r7}
 800c1ca:	4770      	bx	lr

0800c1cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c1e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d150      	bne.n	800c294 <I2C_MasterTransmit_TXE+0xc8>
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b21      	cmp	r3, #33	@ 0x21
 800c1f6:	d14d      	bne.n	800c294 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2b08      	cmp	r3, #8
 800c1fc:	d01d      	beq.n	800c23a <I2C_MasterTransmit_TXE+0x6e>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	2b20      	cmp	r3, #32
 800c202:	d01a      	beq.n	800c23a <I2C_MasterTransmit_TXE+0x6e>
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c20a:	d016      	beq.n	800c23a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c21a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2211      	movs	r2, #17
 800c220:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff ff54 	bl	800c0e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c238:	e060      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c248:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c258:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b40      	cmp	r3, #64	@ 0x40
 800c272:	d107      	bne.n	800c284 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff ff69 	bl	800c154 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c282:	e03b      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff ff27 	bl	800c0e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c292:	e033      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	2b21      	cmp	r3, #33	@ 0x21
 800c298:	d005      	beq.n	800c2a6 <I2C_MasterTransmit_TXE+0xda>
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	2b40      	cmp	r3, #64	@ 0x40
 800c29e:	d12d      	bne.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	2b22      	cmp	r3, #34	@ 0x22
 800c2a4:	d12a      	bne.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d108      	bne.n	800c2c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c2be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c2c0:	e01c      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b40      	cmp	r3, #64	@ 0x40
 800c2cc:	d103      	bne.n	800c2d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f88e 	bl	800c3f0 <I2C_MemoryTransmit_TXE_BTF>
}
 800c2d4:	e012      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2da:	781a      	ldrb	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e6:	1c5a      	adds	r2, r3, #1
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800c2fa:	e7ff      	b.n	800c2fc <I2C_MasterTransmit_TXE+0x130>
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c310:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b21      	cmp	r3, #33	@ 0x21
 800c31c:	d164      	bne.n	800c3e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c322:	b29b      	uxth	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d012      	beq.n	800c34e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c32c:	781a      	ldrb	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c342:	b29b      	uxth	r3, r3
 800c344:	3b01      	subs	r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800c34c:	e04c      	b.n	800c3e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b08      	cmp	r3, #8
 800c352:	d01d      	beq.n	800c390 <I2C_MasterTransmit_BTF+0x8c>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b20      	cmp	r3, #32
 800c358:	d01a      	beq.n	800c390 <I2C_MasterTransmit_BTF+0x8c>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c360:	d016      	beq.n	800c390 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c370:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2211      	movs	r2, #17
 800c376:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff fea9 	bl	800c0e0 <HAL_I2C_MasterTxCpltCallback>
}
 800c38e:	e02b      	b.n	800c3e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c39e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b40      	cmp	r3, #64	@ 0x40
 800c3c8:	d107      	bne.n	800c3da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff febe 	bl	800c154 <HAL_I2C_MemTxCpltCallback>
}
 800c3d8:	e006      	b.n	800c3e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff fe7c 	bl	800c0e0 <HAL_I2C_MasterTxCpltCallback>
}
 800c3e8:	bf00      	nop
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11d      	bne.n	800c444 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d10b      	bne.n	800c428 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c414:	b2da      	uxtb	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c420:	1c9a      	adds	r2, r3, #2
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800c426:	e077      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	121b      	asrs	r3, r3, #8
 800c430:	b2da      	uxtb	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c442:	e069      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d10b      	bne.n	800c464 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c450:	b2da      	uxtb	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c462:	e059      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d152      	bne.n	800c512 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	2b22      	cmp	r3, #34	@ 0x22
 800c470:	d10d      	bne.n	800c48e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c480:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c48c:	e044      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c492:	b29b      	uxth	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	d015      	beq.n	800c4c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	2b21      	cmp	r3, #33	@ 0x21
 800c49c:	d112      	bne.n	800c4c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800c4c2:	e029      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d124      	bne.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b21      	cmp	r3, #33	@ 0x21
 800c4d2:	d121      	bne.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c4e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff fe22 	bl	800c154 <HAL_I2C_MemTxCpltCallback>
}
 800c510:	e002      	b.n	800c518 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff f8bd 	bl	800b692 <I2C_Flush_DR>
}
 800c518:	bf00      	nop
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b22      	cmp	r3, #34	@ 0x22
 800c532:	f040 80ac 	bne.w	800c68e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b03      	cmp	r3, #3
 800c542:	d921      	bls.n	800c588 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c560:	b29b      	uxth	r3, r3
 800c562:	3b01      	subs	r3, #1
 800c564:	b29a      	uxth	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c56e:	b29b      	uxth	r3, r3
 800c570:	2b03      	cmp	r3, #3
 800c572:	f040 808c 	bne.w	800c68e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c584:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800c586:	e082      	b.n	800c68e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d075      	beq.n	800c67c <I2C_MasterReceive_RXNE+0x15c>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d002      	beq.n	800c59c <I2C_MasterReceive_RXNE+0x7c>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d16f      	bne.n	800c67c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 fb4d 	bl	800dc3c <I2C_WaitOnSTOPRequestThroughIT>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d142      	bne.n	800c62e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c5c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	691a      	ldr	r2, [r3, #16]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	b2d2      	uxtb	r2, r2
 800c5d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5da:	1c5a      	adds	r2, r3, #1
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	2b40      	cmp	r3, #64	@ 0x40
 800c600:	d10a      	bne.n	800c618 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff fda8 	bl	800c166 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c616:	e03a      	b.n	800c68e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2212      	movs	r2, #18
 800c624:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fd63 	bl	800c0f2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c62c:	e02f      	b.n	800c68e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c63c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	691a      	ldr	r2, [r3, #16]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c648:	b2d2      	uxtb	r2, r2
 800c64a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c650:	1c5a      	adds	r2, r3, #1
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	3b01      	subs	r3, #1
 800c65e:	b29a      	uxth	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2220      	movs	r2, #32
 800c668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f7ff fd7f 	bl	800c178 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c67a:	e008      	b.n	800c68e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c68a:	605a      	str	r2, [r3, #4]
}
 800c68c:	e7ff      	b.n	800c68e <I2C_MasterReceive_RXNE+0x16e>
 800c68e:	bf00      	nop
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	d11b      	bne.n	800c6e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	691a      	ldr	r2, [r3, #16]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c8:	b2d2      	uxtb	r2, r2
 800c6ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c6e4:	e0bd      	b.n	800c862 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	2b03      	cmp	r3, #3
 800c6ee:	d129      	bne.n	800c744 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b04      	cmp	r3, #4
 800c704:	d00a      	beq.n	800c71c <I2C_MasterReceive_BTF+0x86>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d007      	beq.n	800c71c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c71a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	691a      	ldr	r2, [r3, #16]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c738:	b29b      	uxth	r3, r3
 800c73a:	3b01      	subs	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800c742:	e08e      	b.n	800c862 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d176      	bne.n	800c83c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d002      	beq.n	800c75a <I2C_MasterReceive_BTF+0xc4>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b10      	cmp	r3, #16
 800c758:	d108      	bne.n	800c76c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	e019      	b.n	800c7a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d002      	beq.n	800c778 <I2C_MasterReceive_BTF+0xe2>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d108      	bne.n	800c78a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	e00a      	b.n	800c7a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b10      	cmp	r3, #16
 800c78e:	d007      	beq.n	800c7a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c79e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7aa:	b2d2      	uxtb	r2, r2
 800c7ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b2:	1c5a      	adds	r2, r3, #1
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	691a      	ldr	r2, [r3, #16]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d0:	b2d2      	uxtb	r2, r2
 800c7d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c7fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2220      	movs	r2, #32
 800c800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b40      	cmp	r3, #64	@ 0x40
 800c80e:	d10a      	bne.n	800c826 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff fca1 	bl	800c166 <HAL_I2C_MemRxCpltCallback>
}
 800c824:	e01d      	b.n	800c862 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2212      	movs	r2, #18
 800c832:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fc5c 	bl	800c0f2 <HAL_I2C_MasterRxCpltCallback>
}
 800c83a:	e012      	b.n	800c862 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	691a      	ldr	r2, [r3, #16]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c846:	b2d2      	uxtb	r2, r2
 800c848:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b40      	cmp	r3, #64	@ 0x40
 800c87c:	d117      	bne.n	800c8ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c882:	2b00      	cmp	r3, #0
 800c884:	d109      	bne.n	800c89a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	461a      	mov	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c896:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c898:	e067      	b.n	800c96a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	f043 0301 	orr.w	r3, r3, #1
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	611a      	str	r2, [r3, #16]
}
 800c8ac:	e05d      	b.n	800c96a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c8b6:	d133      	bne.n	800c920 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b21      	cmp	r3, #33	@ 0x21
 800c8c2:	d109      	bne.n	800c8d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c8d4:	611a      	str	r2, [r3, #16]
 800c8d6:	e008      	b.n	800c8ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f043 0301 	orr.w	r3, r3, #1
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d004      	beq.n	800c8fc <I2C_Master_SB+0x92>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d108      	bne.n	800c90e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d032      	beq.n	800c96a <I2C_Master_SB+0x100>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d02d      	beq.n	800c96a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c91c:	605a      	str	r2, [r3, #4]
}
 800c91e:	e024      	b.n	800c96a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10e      	bne.n	800c946 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	11db      	asrs	r3, r3, #7
 800c930:	b2db      	uxtb	r3, r3
 800c932:	f003 0306 	and.w	r3, r3, #6
 800c936:	b2db      	uxtb	r3, r3
 800c938:	f063 030f 	orn	r3, r3, #15
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	611a      	str	r2, [r3, #16]
}
 800c944:	e011      	b.n	800c96a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d10d      	bne.n	800c96a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c952:	b29b      	uxth	r3, r3
 800c954:	11db      	asrs	r3, r3, #7
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0306 	and.w	r3, r3, #6
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	f063 030e 	orn	r3, r3, #14
 800c962:	b2da      	uxtb	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	611a      	str	r2, [r3, #16]
}
 800c96a:	bf00      	nop
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	bc80      	pop	{r7}
 800c972:	4770      	bx	lr

0800c974 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c980:	b2da      	uxtb	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d004      	beq.n	800c99a <I2C_Master_ADD10+0x26>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c996:	2b00      	cmp	r3, #0
 800c998:	d108      	bne.n	800c9ac <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <I2C_Master_ADD10+0x48>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d007      	beq.n	800c9bc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9ba:	605a      	str	r2, [r3, #4]
  }
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr

0800c9c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b091      	sub	sp, #68	@ 0x44
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c9d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b22      	cmp	r3, #34	@ 0x22
 800c9ee:	f040 8169 	bne.w	800ccc4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10f      	bne.n	800ca1a <I2C_Master_ADDR+0x54>
 800c9fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9fe:	2b40      	cmp	r3, #64	@ 0x40
 800ca00:	d10b      	bne.n	800ca1a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca02:	2300      	movs	r3, #0
 800ca04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca18:	e160      	b.n	800ccdc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d11d      	bne.n	800ca5e <I2C_Master_ADDR+0x98>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ca2a:	d118      	bne.n	800ca5e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	699b      	ldr	r3, [r3, #24]
 800ca3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca50:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ca5c:	e13e      	b.n	800ccdc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d113      	bne.n	800ca90 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ca68:	2300      	movs	r3, #0
 800ca6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	e115      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	f040 808a 	bne.w	800cbb0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800caa2:	d137      	bne.n	800cb14 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cab2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cabe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cac2:	d113      	bne.n	800caec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cad2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cad4:	2300      	movs	r3, #0
 800cad6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	695b      	ldr	r3, [r3, #20]
 800cade:	627b      	str	r3, [r7, #36]	@ 0x24
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caea:	e0e7      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800caec:	2300      	movs	r3, #0
 800caee:	623b      	str	r3, [r7, #32]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	623b      	str	r3, [r7, #32]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	623b      	str	r3, [r7, #32]
 800cb00:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	e0d3      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb16:	2b08      	cmp	r3, #8
 800cb18:	d02e      	beq.n	800cb78 <I2C_Master_ADDR+0x1b2>
 800cb1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d02b      	beq.n	800cb78 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800cb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb22:	2b12      	cmp	r3, #18
 800cb24:	d102      	bne.n	800cb2c <I2C_Master_ADDR+0x166>
 800cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d125      	bne.n	800cb78 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d00e      	beq.n	800cb50 <I2C_Master_ADDR+0x18a>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d00b      	beq.n	800cb50 <I2C_Master_ADDR+0x18a>
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	2b10      	cmp	r3, #16
 800cb3c:	d008      	beq.n	800cb50 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	e007      	b.n	800cb60 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cb5e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb60:	2300      	movs	r3, #0
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	61fb      	str	r3, [r7, #28]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	61fb      	str	r3, [r7, #28]
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	e0a1      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb86:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61bb      	str	r3, [r7, #24]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	61bb      	str	r3, [r7, #24]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	61bb      	str	r3, [r7, #24]
 800cb9c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	e085      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d14d      	bne.n	800cc56 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbc:	2b04      	cmp	r3, #4
 800cbbe:	d016      	beq.n	800cbee <I2C_Master_ADDR+0x228>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d013      	beq.n	800cbee <I2C_Master_ADDR+0x228>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc8:	2b10      	cmp	r3, #16
 800cbca:	d010      	beq.n	800cbee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbda:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	e007      	b.n	800cbfe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cbfc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc0c:	d117      	bne.n	800cc3e <I2C_Master_ADDR+0x278>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cc14:	d00b      	beq.n	800cc2e <I2C_Master_ADDR+0x268>
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d008      	beq.n	800cc2e <I2C_Master_ADDR+0x268>
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1e:	2b08      	cmp	r3, #8
 800cc20:	d005      	beq.n	800cc2e <I2C_Master_ADDR+0x268>
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	2b10      	cmp	r3, #16
 800cc26:	d002      	beq.n	800cc2e <I2C_Master_ADDR+0x268>
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	2b20      	cmp	r3, #32
 800cc2c:	d107      	bne.n	800cc3e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	617b      	str	r3, [r7, #20]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	e032      	b.n	800ccbc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cc64:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc74:	d117      	bne.n	800cca6 <I2C_Master_ADDR+0x2e0>
 800cc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800cc7c:	d00b      	beq.n	800cc96 <I2C_Master_ADDR+0x2d0>
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d008      	beq.n	800cc96 <I2C_Master_ADDR+0x2d0>
 800cc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc86:	2b08      	cmp	r3, #8
 800cc88:	d005      	beq.n	800cc96 <I2C_Master_ADDR+0x2d0>
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	2b10      	cmp	r3, #16
 800cc8e:	d002      	beq.n	800cc96 <I2C_Master_ADDR+0x2d0>
 800cc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc92:	2b20      	cmp	r3, #32
 800cc94:	d107      	bne.n	800cca6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cca4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cca6:	2300      	movs	r3, #0
 800cca8:	613b      	str	r3, [r7, #16]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	613b      	str	r3, [r7, #16]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	613b      	str	r3, [r7, #16]
 800ccba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ccc2:	e00b      	b.n	800ccdc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
}
 800ccda:	e7ff      	b.n	800ccdc <I2C_Master_ADDR+0x316>
 800ccdc:	bf00      	nop
 800ccde:	3744      	adds	r7, #68	@ 0x44
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bc80      	pop	{r7}
 800cce4:	4770      	bx	lr

0800cce6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ccf4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d02b      	beq.n	800cd58 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd04:	781a      	ldrb	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	1c5a      	adds	r2, r3, #1
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d114      	bne.n	800cd58 <I2C_SlaveTransmit_TXE+0x72>
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b29      	cmp	r3, #41	@ 0x29
 800cd32:	d111      	bne.n	800cd58 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd42:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2221      	movs	r2, #33	@ 0x21
 800cd48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2228      	movs	r2, #40	@ 0x28
 800cd4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7ff f9d6 	bl	800c104 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800cd58:	bf00      	nop
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d011      	beq.n	800cd96 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd76:	781a      	ldrb	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bc80      	pop	{r7}
 800cd9e:	4770      	bx	lr

0800cda0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d02c      	beq.n	800ce14 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	691a      	ldr	r2, [r3, #16]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc4:	b2d2      	uxtb	r2, r2
 800cdc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d114      	bne.n	800ce14 <I2C_SlaveReceive_RXNE+0x74>
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdee:	d111      	bne.n	800ce14 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2222      	movs	r2, #34	@ 0x22
 800ce04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2228      	movs	r2, #40	@ 0x28
 800ce0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff f981 	bl	800c116 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800ce14:	bf00      	nop
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d012      	beq.n	800ce54 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	691a      	ldr	r2, [r3, #16]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce38:	b2d2      	uxtb	r2, r2
 800ce3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bc80      	pop	{r7}
 800ce5c:	4770      	bx	lr

0800ce5e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ce78:	2b28      	cmp	r3, #40	@ 0x28
 800ce7a:	d125      	bne.n	800cec8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce8a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	f003 0304 	and.w	r3, r3, #4
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800ce96:	2301      	movs	r3, #1
 800ce98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	81bb      	strh	r3, [r7, #12]
 800ceaa:	e002      	b.n	800ceb2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ceba:	89ba      	ldrh	r2, [r7, #12]
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff f931 	bl	800c128 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cec6:	e00e      	b.n	800cee6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cec8:	2300      	movs	r3, #0
 800ceca:	60bb      	str	r3, [r7, #8]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	695b      	ldr	r3, [r3, #20]
 800ced2:	60bb      	str	r3, [r7, #8]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	60bb      	str	r3, [r7, #8]
 800cedc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
	...

0800cef0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cefe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800cf0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800cf10:	2300      	movs	r3, #0
 800cf12:	60bb      	str	r3, [r7, #8]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	60bb      	str	r3, [r7, #8]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f042 0201 	orr.w	r2, r2, #1
 800cf2a:	601a      	str	r2, [r3, #0]
 800cf2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cf3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf4c:	d172      	bne.n	800d034 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
 800cf50:	2b22      	cmp	r3, #34	@ 0x22
 800cf52:	d002      	beq.n	800cf5a <I2C_Slave_STOPF+0x6a>
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf58:	d135      	bne.n	800cfc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf76:	f043 0204 	orr.w	r2, r3, #4
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cf8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fd ff52 	bl	800ae3c <HAL_DMA_GetState>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d049      	beq.n	800d032 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa2:	4a69      	ldr	r2, [pc, #420]	@ (800d148 <I2C_Slave_STOPF+0x258>)
 800cfa4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fd ff05 	bl	800adba <HAL_DMA_Abort_IT>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d03d      	beq.n	800d032 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cfc4:	e035      	b.n	800d032 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfe2:	f043 0204 	orr.w	r2, r3, #4
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fd ff1c 	bl	800ae3c <HAL_DMA_GetState>
 800d004:	4603      	mov	r3, r0
 800d006:	2b01      	cmp	r3, #1
 800d008:	d014      	beq.n	800d034 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d00e:	4a4e      	ldr	r2, [pc, #312]	@ (800d148 <I2C_Slave_STOPF+0x258>)
 800d010:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d016:	4618      	mov	r0, r3
 800d018:	f7fd fecf 	bl	800adba <HAL_DMA_Abort_IT>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d008      	beq.n	800d034 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d02c:	4610      	mov	r0, r2
 800d02e:	4798      	blx	r3
 800d030:	e000      	b.n	800d034 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d032:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d038:	b29b      	uxth	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d03e      	beq.n	800d0bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b04      	cmp	r3, #4
 800d04a:	d112      	bne.n	800d072 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	691a      	ldr	r2, [r3, #16]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d068:	b29b      	uxth	r3, r3
 800d06a:	3b01      	subs	r3, #1
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d07c:	2b40      	cmp	r3, #64	@ 0x40
 800d07e:	d112      	bne.n	800d0a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	691a      	ldr	r2, [r3, #16]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08a:	b2d2      	uxtb	r2, r2
 800d08c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	3b01      	subs	r3, #1
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0b4:	f043 0204 	orr.w	r2, r3, #4
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d003      	beq.n	800d0cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f8b7 	bl	800d238 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800d0ca:	e039      	b.n	800d140 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0d0:	d109      	bne.n	800d0e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2228      	movs	r2, #40	@ 0x28
 800d0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff f818 	bl	800c116 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	2b28      	cmp	r3, #40	@ 0x28
 800d0f0:	d111      	bne.n	800d116 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a15      	ldr	r2, [pc, #84]	@ (800d14c <I2C_Slave_STOPF+0x25c>)
 800d0f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2220      	movs	r2, #32
 800d102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff f817 	bl	800c142 <HAL_I2C_ListenCpltCallback>
}
 800d114:	e014      	b.n	800d140 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d11a:	2b22      	cmp	r3, #34	@ 0x22
 800d11c:	d002      	beq.n	800d124 <I2C_Slave_STOPF+0x234>
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	2b22      	cmp	r3, #34	@ 0x22
 800d122:	d10d      	bne.n	800d140 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2220      	movs	r2, #32
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7fe ffeb 	bl	800c116 <HAL_I2C_SlaveRxCpltCallback>
}
 800d140:	bf00      	nop
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	0800d799 	.word	0x0800d799
 800d14c:	ffff0000 	.word	0xffff0000

0800d150 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d15e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d164:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b08      	cmp	r3, #8
 800d16a:	d002      	beq.n	800d172 <I2C_Slave_AF+0x22>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b20      	cmp	r3, #32
 800d170:	d129      	bne.n	800d1c6 <I2C_Slave_AF+0x76>
 800d172:	7bfb      	ldrb	r3, [r7, #15]
 800d174:	2b28      	cmp	r3, #40	@ 0x28
 800d176:	d126      	bne.n	800d1c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a2e      	ldr	r2, [pc, #184]	@ (800d234 <I2C_Slave_AF+0xe4>)
 800d17c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685a      	ldr	r2, [r3, #4]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d18c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d196:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d1a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7fe ffbf 	bl	800c142 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800d1c4:	e031      	b.n	800d22a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	2b21      	cmp	r3, #33	@ 0x21
 800d1ca:	d129      	bne.n	800d220 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a19      	ldr	r2, [pc, #100]	@ (800d234 <I2C_Slave_AF+0xe4>)
 800d1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2221      	movs	r2, #33	@ 0x21
 800d1d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2220      	movs	r2, #32
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d1f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d200:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d210:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f7fe fa3d 	bl	800b692 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7fe ff73 	bl	800c104 <HAL_I2C_SlaveTxCpltCallback>
}
 800d21e:	e004      	b.n	800d22a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d228:	615a      	str	r2, [r3, #20]
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	ffff0000 	.word	0xffff0000

0800d238 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d246:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d24e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b10      	cmp	r3, #16
 800d254:	d002      	beq.n	800d25c <I2C_ITError+0x24>
 800d256:	7bbb      	ldrb	r3, [r7, #14]
 800d258:	2b40      	cmp	r3, #64	@ 0x40
 800d25a:	d10a      	bne.n	800d272 <I2C_ITError+0x3a>
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b22      	cmp	r3, #34	@ 0x22
 800d260:	d107      	bne.n	800d272 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d270:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d272:	7bfb      	ldrb	r3, [r7, #15]
 800d274:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d278:	2b28      	cmp	r3, #40	@ 0x28
 800d27a:	d107      	bne.n	800d28c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2228      	movs	r2, #40	@ 0x28
 800d286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d28a:	e015      	b.n	800d2b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d29a:	d00a      	beq.n	800d2b2 <I2C_ITError+0x7a>
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	2b60      	cmp	r3, #96	@ 0x60
 800d2a0:	d007      	beq.n	800d2b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2220      	movs	r2, #32
 800d2a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d2c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d2c6:	d162      	bne.n	800d38e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d2d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d020      	beq.n	800d328 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ea:	4a6a      	ldr	r2, [pc, #424]	@ (800d494 <I2C_ITError+0x25c>)
 800d2ec:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fd fd61 	bl	800adba <HAL_DMA_Abort_IT>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	f000 8089 	beq.w	800d412 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f022 0201 	bic.w	r2, r2, #1
 800d30e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2220      	movs	r2, #32
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d322:	4610      	mov	r0, r2
 800d324:	4798      	blx	r3
 800d326:	e074      	b.n	800d412 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32c:	4a59      	ldr	r2, [pc, #356]	@ (800d494 <I2C_ITError+0x25c>)
 800d32e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d334:	4618      	mov	r0, r3
 800d336:	f7fd fd40 	bl	800adba <HAL_DMA_Abort_IT>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d068      	beq.n	800d412 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	695b      	ldr	r3, [r3, #20]
 800d346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d34a:	2b40      	cmp	r3, #64	@ 0x40
 800d34c:	d10b      	bne.n	800d366 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	691a      	ldr	r2, [r3, #16]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	1c5a      	adds	r2, r3, #1
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f022 0201 	bic.w	r2, r2, #1
 800d374:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2220      	movs	r2, #32
 800d37a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d388:	4610      	mov	r0, r2
 800d38a:	4798      	blx	r3
 800d38c:	e041      	b.n	800d412 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b60      	cmp	r3, #96	@ 0x60
 800d398:	d125      	bne.n	800d3e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2220      	movs	r2, #32
 800d39e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b2:	2b40      	cmp	r3, #64	@ 0x40
 800d3b4:	d10b      	bne.n	800d3ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	691a      	ldr	r2, [r3, #16]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c0:	b2d2      	uxtb	r2, r2
 800d3c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f022 0201 	bic.w	r2, r2, #1
 800d3dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f7fe fed3 	bl	800c18a <HAL_I2C_AbortCpltCallback>
 800d3e4:	e015      	b.n	800d412 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f0:	2b40      	cmp	r3, #64	@ 0x40
 800d3f2:	d10b      	bne.n	800d40c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691a      	ldr	r2, [r3, #16]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fe:	b2d2      	uxtb	r2, r2
 800d400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fe feb3 	bl	800c178 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d416:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10e      	bne.n	800d440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d109      	bne.n	800d440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800d432:	2b00      	cmp	r3, #0
 800d434:	d104      	bne.n	800d440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d007      	beq.n	800d450 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800d44e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d456:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d45c:	f003 0304 	and.w	r3, r3, #4
 800d460:	2b04      	cmp	r3, #4
 800d462:	d113      	bne.n	800d48c <I2C_ITError+0x254>
 800d464:	7bfb      	ldrb	r3, [r7, #15]
 800d466:	2b28      	cmp	r3, #40	@ 0x28
 800d468:	d110      	bne.n	800d48c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a0a      	ldr	r2, [pc, #40]	@ (800d498 <I2C_ITError+0x260>)
 800d46e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2220      	movs	r2, #32
 800d47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7fe fe5b 	bl	800c142 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	0800d799 	.word	0x0800d799
 800d498:	ffff0000 	.word	0xffff0000

0800d49c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af02      	add	r7, sp, #8
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	4608      	mov	r0, r1
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	817b      	strh	r3, [r7, #10]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	813b      	strh	r3, [r7, #8]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	6a3b      	ldr	r3, [r7, #32]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f000 fa08 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00d      	beq.n	800d4fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4ec:	d103      	bne.n	800d4f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e05f      	b.n	800d5ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d4fa:	897b      	ldrh	r3, [r7, #10]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	461a      	mov	r2, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d50c:	6a3a      	ldr	r2, [r7, #32]
 800d50e:	492d      	ldr	r1, [pc, #180]	@ (800d5c4 <I2C_RequestMemoryWrite+0x128>)
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fa63 	bl	800d9dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e04c      	b.n	800d5ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d520:	2300      	movs	r3, #0
 800d522:	617b      	str	r3, [r7, #20]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	617b      	str	r3, [r7, #20]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d538:	6a39      	ldr	r1, [r7, #32]
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f000 faee 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00d      	beq.n	800d562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d54a:	2b04      	cmp	r3, #4
 800d54c:	d107      	bne.n	800d55e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d55c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	e02b      	b.n	800d5ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d562:	88fb      	ldrh	r3, [r7, #6]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d105      	bne.n	800d574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d568:	893b      	ldrh	r3, [r7, #8]
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	611a      	str	r2, [r3, #16]
 800d572:	e021      	b.n	800d5b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d574:	893b      	ldrh	r3, [r7, #8]
 800d576:	0a1b      	lsrs	r3, r3, #8
 800d578:	b29b      	uxth	r3, r3
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d584:	6a39      	ldr	r1, [r7, #32]
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f000 fac8 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00d      	beq.n	800d5ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d596:	2b04      	cmp	r3, #4
 800d598:	d107      	bne.n	800d5aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e005      	b.n	800d5ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d5ae:	893b      	ldrh	r3, [r7, #8]
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3718      	adds	r7, #24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	00010002 	.word	0x00010002

0800d5c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b088      	sub	sp, #32
 800d5cc:	af02      	add	r7, sp, #8
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	4608      	mov	r0, r1
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	817b      	strh	r3, [r7, #10]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	813b      	strh	r3, [r7, #8]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d5f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d600:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	2200      	movs	r2, #0
 800d60a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	f000 f96a 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00d      	beq.n	800d636 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d628:	d103      	bne.n	800d632 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d630:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d632:	2303      	movs	r3, #3
 800d634:	e0aa      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d636:	897b      	ldrh	r3, [r7, #10]
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	461a      	mov	r2, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d644:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	6a3a      	ldr	r2, [r7, #32]
 800d64a:	4952      	ldr	r1, [pc, #328]	@ (800d794 <I2C_RequestMemoryRead+0x1cc>)
 800d64c:	68f8      	ldr	r0, [r7, #12]
 800d64e:	f000 f9c5 	bl	800d9dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d658:	2301      	movs	r3, #1
 800d65a:	e097      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d65c:	2300      	movs	r3, #0
 800d65e:	617b      	str	r3, [r7, #20]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	699b      	ldr	r3, [r3, #24]
 800d66e:	617b      	str	r3, [r7, #20]
 800d670:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d674:	6a39      	ldr	r1, [r7, #32]
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 fa50 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00d      	beq.n	800d69e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d686:	2b04      	cmp	r3, #4
 800d688:	d107      	bne.n	800d69a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	681a      	ldr	r2, [r3, #0]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d698:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e076      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d105      	bne.n	800d6b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d6a4:	893b      	ldrh	r3, [r7, #8]
 800d6a6:	b2da      	uxtb	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	611a      	str	r2, [r3, #16]
 800d6ae:	e021      	b.n	800d6f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d6b0:	893b      	ldrh	r3, [r7, #8]
 800d6b2:	0a1b      	lsrs	r3, r3, #8
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6c0:	6a39      	ldr	r1, [r7, #32]
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 fa2a 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00d      	beq.n	800d6ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d2:	2b04      	cmp	r3, #4
 800d6d4:	d107      	bne.n	800d6e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e050      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d6ea:	893b      	ldrh	r3, [r7, #8]
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6f6:	6a39      	ldr	r1, [r7, #32]
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f000 fa0f 	bl	800db1c <I2C_WaitOnTXEFlagUntilTimeout>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00d      	beq.n	800d720 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d708:	2b04      	cmp	r3, #4
 800d70a:	d107      	bne.n	800d71c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d71a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e035      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d72e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	6a3b      	ldr	r3, [r7, #32]
 800d736:	2200      	movs	r2, #0
 800d738:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f000 f8d3 	bl	800d8e8 <I2C_WaitOnFlagUntilTimeout>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00d      	beq.n	800d764 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d756:	d103      	bne.n	800d760 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d75e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d760:	2303      	movs	r3, #3
 800d762:	e013      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d764:	897b      	ldrh	r3, [r7, #10]
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f043 0301 	orr.w	r3, r3, #1
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	6a3a      	ldr	r2, [r7, #32]
 800d778:	4906      	ldr	r1, [pc, #24]	@ (800d794 <I2C_RequestMemoryRead+0x1cc>)
 800d77a:	68f8      	ldr	r0, [r7, #12]
 800d77c:	f000 f92e 	bl	800d9dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e000      	b.n	800d78c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	00010002 	.word	0x00010002

0800d798 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d7b2:	4b4b      	ldr	r3, [pc, #300]	@ (800d8e0 <I2C_DMAAbort+0x148>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	08db      	lsrs	r3, r3, #3
 800d7b8:	4a4a      	ldr	r2, [pc, #296]	@ (800d8e4 <I2C_DMAAbort+0x14c>)
 800d7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d7be:	0a1a      	lsrs	r2, r3, #8
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	00da      	lsls	r2, r3, #3
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d6:	f043 0220 	orr.w	r2, r3, #32
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800d7de:	e00a      	b.n	800d7f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d7f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7f4:	d0ea      	beq.n	800d7cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d003      	beq.n	800d806 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d802:	2200      	movs	r2, #0
 800d804:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d812:	2200      	movs	r2, #0
 800d814:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d824:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	2200      	movs	r2, #0
 800d82a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d830:	2b00      	cmp	r3, #0
 800d832:	d003      	beq.n	800d83c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d838:	2200      	movs	r2, #0
 800d83a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d840:	2b00      	cmp	r3, #0
 800d842:	d003      	beq.n	800d84c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d848:	2200      	movs	r2, #0
 800d84a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f022 0201 	bic.w	r2, r2, #1
 800d85a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b60      	cmp	r3, #96	@ 0x60
 800d866:	d10e      	bne.n	800d886 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2220      	movs	r2, #32
 800d86c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2200      	movs	r2, #0
 800d87c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d87e:	6978      	ldr	r0, [r7, #20]
 800d880:	f7fe fc83 	bl	800c18a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d884:	e027      	b.n	800d8d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d886:	7cfb      	ldrb	r3, [r7, #19]
 800d888:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d88c:	2b28      	cmp	r3, #40	@ 0x28
 800d88e:	d117      	bne.n	800d8c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0201 	orr.w	r2, r2, #1
 800d89e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d8ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2228      	movs	r2, #40	@ 0x28
 800d8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d8be:	e007      	b.n	800d8d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	2220      	movs	r2, #32
 800d8c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d8d0:	6978      	ldr	r0, [r7, #20]
 800d8d2:	f7fe fc51 	bl	800c178 <HAL_I2C_ErrorCallback>
}
 800d8d6:	bf00      	nop
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000000 	.word	0x20000000
 800d8e4:	14f8b589 	.word	0x14f8b589

0800d8e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8f8:	e048      	b.n	800d98c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d900:	d044      	beq.n	800d98c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d902:	f7fc fb01 	bl	8009f08 <HAL_GetTick>
 800d906:	4602      	mov	r2, r0
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	683a      	ldr	r2, [r7, #0]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d302      	bcc.n	800d918 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d139      	bne.n	800d98c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	0c1b      	lsrs	r3, r3, #16
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d10d      	bne.n	800d93e <I2C_WaitOnFlagUntilTimeout+0x56>
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	695b      	ldr	r3, [r3, #20]
 800d928:	43da      	mvns	r2, r3
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	4013      	ands	r3, r2
 800d92e:	b29b      	uxth	r3, r3
 800d930:	2b00      	cmp	r3, #0
 800d932:	bf0c      	ite	eq
 800d934:	2301      	moveq	r3, #1
 800d936:	2300      	movne	r3, #0
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	e00c      	b.n	800d958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	43da      	mvns	r2, r3
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	4013      	ands	r3, r2
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bf0c      	ite	eq
 800d950:	2301      	moveq	r3, #1
 800d952:	2300      	movne	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	461a      	mov	r2, r3
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d116      	bne.n	800d98c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2220      	movs	r2, #32
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d978:	f043 0220 	orr.w	r2, r3, #32
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e023      	b.n	800d9d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	0c1b      	lsrs	r3, r3, #16
 800d990:	b2db      	uxtb	r3, r3
 800d992:	2b01      	cmp	r3, #1
 800d994:	d10d      	bne.n	800d9b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	43da      	mvns	r2, r3
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2301      	moveq	r3, #1
 800d9aa:	2300      	movne	r3, #0
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	e00c      	b.n	800d9cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	43da      	mvns	r2, r3
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	4013      	ands	r3, r2
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	bf0c      	ite	eq
 800d9c4:	2301      	moveq	r3, #1
 800d9c6:	2300      	movne	r3, #0
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	79fb      	ldrb	r3, [r7, #7]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d093      	beq.n	800d8fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d9ea:	e071      	b.n	800dad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9fa:	d123      	bne.n	800da44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800da14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2220      	movs	r2, #32
 800da20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da30:	f043 0204 	orr.w	r2, r3, #4
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e067      	b.n	800db14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4a:	d041      	beq.n	800dad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da4c:	f7fc fa5c 	bl	8009f08 <HAL_GetTick>
 800da50:	4602      	mov	r2, r0
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d302      	bcc.n	800da62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d136      	bne.n	800dad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	0c1b      	lsrs	r3, r3, #16
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d10c      	bne.n	800da86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	695b      	ldr	r3, [r3, #20]
 800da72:	43da      	mvns	r2, r3
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	4013      	ands	r3, r2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bf14      	ite	ne
 800da7e:	2301      	movne	r3, #1
 800da80:	2300      	moveq	r3, #0
 800da82:	b2db      	uxtb	r3, r3
 800da84:	e00b      	b.n	800da9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	43da      	mvns	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	4013      	ands	r3, r2
 800da92:	b29b      	uxth	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	bf14      	ite	ne
 800da98:	2301      	movne	r3, #1
 800da9a:	2300      	moveq	r3, #0
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d016      	beq.n	800dad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2220      	movs	r2, #32
 800daac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	f043 0220 	orr.w	r2, r3, #32
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e021      	b.n	800db14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	0c1b      	lsrs	r3, r3, #16
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d10c      	bne.n	800daf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	43da      	mvns	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	4013      	ands	r3, r2
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bf14      	ite	ne
 800daec:	2301      	movne	r3, #1
 800daee:	2300      	moveq	r3, #0
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	e00b      	b.n	800db0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	43da      	mvns	r2, r3
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	4013      	ands	r3, r2
 800db00:	b29b      	uxth	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	bf14      	ite	ne
 800db06:	2301      	movne	r3, #1
 800db08:	2300      	moveq	r3, #0
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f47f af6d 	bne.w	800d9ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db28:	e034      	b.n	800db94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	f000 f915 	bl	800dd5a <I2C_IsAcknowledgeFailed>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e034      	b.n	800dba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db40:	d028      	beq.n	800db94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db42:	f7fc f9e1 	bl	8009f08 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d302      	bcc.n	800db58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d11d      	bne.n	800db94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db62:	2b80      	cmp	r3, #128	@ 0x80
 800db64:	d016      	beq.n	800db94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2220      	movs	r2, #32
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db80:	f043 0220 	orr.w	r2, r3, #32
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e007      	b.n	800dba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db9e:	2b80      	cmp	r3, #128	@ 0x80
 800dba0:	d1c3      	bne.n	800db2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dbb8:	e034      	b.n	800dc24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f000 f8cd 	bl	800dd5a <I2C_IsAcknowledgeFailed>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e034      	b.n	800dc34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd0:	d028      	beq.n	800dc24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbd2:	f7fc f999 	bl	8009f08 <HAL_GetTick>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d302      	bcc.n	800dbe8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d11d      	bne.n	800dc24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	695b      	ldr	r3, [r3, #20]
 800dbee:	f003 0304 	and.w	r3, r3, #4
 800dbf2:	2b04      	cmp	r3, #4
 800dbf4:	d016      	beq.n	800dc24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc10:	f043 0220 	orr.w	r2, r3, #32
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	e007      	b.n	800dc34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	695b      	ldr	r3, [r3, #20]
 800dc2a:	f003 0304 	and.w	r3, r3, #4
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	d1c3      	bne.n	800dbba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc48:	4b13      	ldr	r3, [pc, #76]	@ (800dc98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	08db      	lsrs	r3, r3, #3
 800dc4e:	4a13      	ldr	r2, [pc, #76]	@ (800dc9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800dc50:	fba2 2303 	umull	r2, r3, r2, r3
 800dc54:	0a1a      	lsrs	r2, r3, #8
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d107      	bne.n	800dc7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc6e:	f043 0220 	orr.w	r2, r3, #32
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e008      	b.n	800dc8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc88:	d0e9      	beq.n	800dc5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bc80      	pop	{r7}
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	20000000 	.word	0x20000000
 800dc9c:	14f8b589 	.word	0x14f8b589

0800dca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dcac:	e049      	b.n	800dd42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	f003 0310 	and.w	r3, r3, #16
 800dcb8:	2b10      	cmp	r3, #16
 800dcba:	d119      	bne.n	800dcf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f06f 0210 	mvn.w	r2, #16
 800dcc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2220      	movs	r2, #32
 800dcd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	e030      	b.n	800dd52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcf0:	f7fc f90a 	bl	8009f08 <HAL_GetTick>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d302      	bcc.n	800dd06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d11d      	bne.n	800dd42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd10:	2b40      	cmp	r3, #64	@ 0x40
 800dd12:	d016      	beq.n	800dd42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2220      	movs	r2, #32
 800dd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd2e:	f043 0220 	orr.w	r2, r3, #32
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e007      	b.n	800dd52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd4c:	2b40      	cmp	r3, #64	@ 0x40
 800dd4e:	d1ae      	bne.n	800dcae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b083      	sub	sp, #12
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd70:	d11b      	bne.n	800ddaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800dd7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2220      	movs	r2, #32
 800dd86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd96:	f043 0204 	orr.w	r2, r3, #4
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e000      	b.n	800ddac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bc80      	pop	{r7}
 800ddb4:	4770      	bx	lr

0800ddb6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b083      	sub	sp, #12
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ddc6:	d103      	bne.n	800ddd0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ddce:	e007      	b.n	800dde0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800ddd8:	d102      	bne.n	800dde0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2208      	movs	r2, #8
 800ddde:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bc80      	pop	{r7}
 800dde8:	4770      	bx	lr
	...

0800ddec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b088      	sub	sp, #32
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e31d      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ddfe:	4b94      	ldr	r3, [pc, #592]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	f003 030c 	and.w	r3, r3, #12
 800de06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de08:	4b91      	ldr	r3, [pc, #580]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de10:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d07b      	beq.n	800df16 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	2b08      	cmp	r3, #8
 800de22:	d006      	beq.n	800de32 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b0c      	cmp	r3, #12
 800de28:	d10f      	bne.n	800de4a <HAL_RCC_OscConfig+0x5e>
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de30:	d10b      	bne.n	800de4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de32:	4b87      	ldr	r3, [pc, #540]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d06a      	beq.n	800df14 <HAL_RCC_OscConfig+0x128>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d166      	bne.n	800df14 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e2f7      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d106      	bne.n	800de60 <HAL_RCC_OscConfig+0x74>
 800de52:	4b7f      	ldr	r3, [pc, #508]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a7e      	ldr	r2, [pc, #504]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800de5c:	6013      	str	r3, [r2, #0]
 800de5e:	e02d      	b.n	800debc <HAL_RCC_OscConfig+0xd0>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10c      	bne.n	800de82 <HAL_RCC_OscConfig+0x96>
 800de68:	4b79      	ldr	r3, [pc, #484]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a78      	ldr	r2, [pc, #480]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800de72:	6013      	str	r3, [r2, #0]
 800de74:	4b76      	ldr	r3, [pc, #472]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a75      	ldr	r2, [pc, #468]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	e01c      	b.n	800debc <HAL_RCC_OscConfig+0xd0>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	2b05      	cmp	r3, #5
 800de88:	d10c      	bne.n	800dea4 <HAL_RCC_OscConfig+0xb8>
 800de8a:	4b71      	ldr	r3, [pc, #452]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a70      	ldr	r2, [pc, #448]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	4b6e      	ldr	r3, [pc, #440]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a6d      	ldr	r2, [pc, #436]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800de9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dea0:	6013      	str	r3, [r2, #0]
 800dea2:	e00b      	b.n	800debc <HAL_RCC_OscConfig+0xd0>
 800dea4:	4b6a      	ldr	r3, [pc, #424]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a69      	ldr	r2, [pc, #420]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800deaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	4b67      	ldr	r3, [pc, #412]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a66      	ldr	r2, [pc, #408]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800deb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800deba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d013      	beq.n	800deec <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dec4:	f7fc f820 	bl	8009f08 <HAL_GetTick>
 800dec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800deca:	e008      	b.n	800dede <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800decc:	f7fc f81c 	bl	8009f08 <HAL_GetTick>
 800ded0:	4602      	mov	r2, r0
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	2b64      	cmp	r3, #100	@ 0x64
 800ded8:	d901      	bls.n	800dede <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800deda:	2303      	movs	r3, #3
 800dedc:	e2ad      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dede:	4b5c      	ldr	r3, [pc, #368]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0f0      	beq.n	800decc <HAL_RCC_OscConfig+0xe0>
 800deea:	e014      	b.n	800df16 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800deec:	f7fc f80c 	bl	8009f08 <HAL_GetTick>
 800def0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800def2:	e008      	b.n	800df06 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800def4:	f7fc f808 	bl	8009f08 <HAL_GetTick>
 800def8:	4602      	mov	r2, r0
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	2b64      	cmp	r3, #100	@ 0x64
 800df00:	d901      	bls.n	800df06 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800df02:	2303      	movs	r3, #3
 800df04:	e299      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df06:	4b52      	ldr	r3, [pc, #328]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1f0      	bne.n	800def4 <HAL_RCC_OscConfig+0x108>
 800df12:	e000      	b.n	800df16 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800df14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 0302 	and.w	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d05a      	beq.n	800dfd8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	2b04      	cmp	r3, #4
 800df26:	d005      	beq.n	800df34 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	2b0c      	cmp	r3, #12
 800df2c:	d119      	bne.n	800df62 <HAL_RCC_OscConfig+0x176>
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d116      	bne.n	800df62 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800df34:	4b46      	ldr	r3, [pc, #280]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d005      	beq.n	800df4c <HAL_RCC_OscConfig+0x160>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d001      	beq.n	800df4c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e276      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df4c:	4b40      	ldr	r3, [pc, #256]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	493d      	ldr	r1, [pc, #244]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df5c:	4313      	orrs	r3, r2
 800df5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800df60:	e03a      	b.n	800dfd8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d020      	beq.n	800dfac <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800df6a:	4b3a      	ldr	r3, [pc, #232]	@ (800e054 <HAL_RCC_OscConfig+0x268>)
 800df6c:	2201      	movs	r2, #1
 800df6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df70:	f7fb ffca 	bl	8009f08 <HAL_GetTick>
 800df74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df76:	e008      	b.n	800df8a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800df78:	f7fb ffc6 	bl	8009f08 <HAL_GetTick>
 800df7c:	4602      	mov	r2, r0
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	2b02      	cmp	r3, #2
 800df84:	d901      	bls.n	800df8a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800df86:	2303      	movs	r3, #3
 800df88:	e257      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800df8a:	4b31      	ldr	r3, [pc, #196]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f003 0302 	and.w	r3, r3, #2
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0f0      	beq.n	800df78 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df96:	4b2e      	ldr	r3, [pc, #184]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	492a      	ldr	r1, [pc, #168]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	604b      	str	r3, [r1, #4]
 800dfaa:	e015      	b.n	800dfd8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dfac:	4b29      	ldr	r3, [pc, #164]	@ (800e054 <HAL_RCC_OscConfig+0x268>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfb2:	f7fb ffa9 	bl	8009f08 <HAL_GetTick>
 800dfb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dfb8:	e008      	b.n	800dfcc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dfba:	f7fb ffa5 	bl	8009f08 <HAL_GetTick>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d901      	bls.n	800dfcc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	e236      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dfcc:	4b20      	ldr	r3, [pc, #128]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0302 	and.w	r3, r3, #2
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1f0      	bne.n	800dfba <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 0310 	and.w	r3, r3, #16
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 80b8 	beq.w	800e156 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d170      	bne.n	800e0ce <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800dfec:	4b18      	ldr	r3, [pc, #96]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d005      	beq.n	800e004 <HAL_RCC_OscConfig+0x218>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	699b      	ldr	r3, [r3, #24]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d101      	bne.n	800e004 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e21a      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a1a      	ldr	r2, [r3, #32]
 800e008:	4b11      	ldr	r3, [pc, #68]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800e010:	429a      	cmp	r2, r3
 800e012:	d921      	bls.n	800e058 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fc7d 	bl	800e918 <RCC_SetFlashLatencyFromMSIRange>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d001      	beq.n	800e028 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	e208      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e028:	4b09      	ldr	r3, [pc, #36]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a1b      	ldr	r3, [r3, #32]
 800e034:	4906      	ldr	r1, [pc, #24]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800e036:	4313      	orrs	r3, r2
 800e038:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e03a:	4b05      	ldr	r3, [pc, #20]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	69db      	ldr	r3, [r3, #28]
 800e046:	061b      	lsls	r3, r3, #24
 800e048:	4901      	ldr	r1, [pc, #4]	@ (800e050 <HAL_RCC_OscConfig+0x264>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	604b      	str	r3, [r1, #4]
 800e04e:	e020      	b.n	800e092 <HAL_RCC_OscConfig+0x2a6>
 800e050:	40023800 	.word	0x40023800
 800e054:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e058:	4b99      	ldr	r3, [pc, #612]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a1b      	ldr	r3, [r3, #32]
 800e064:	4996      	ldr	r1, [pc, #600]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e066:	4313      	orrs	r3, r2
 800e068:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e06a:	4b95      	ldr	r3, [pc, #596]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	69db      	ldr	r3, [r3, #28]
 800e076:	061b      	lsls	r3, r3, #24
 800e078:	4991      	ldr	r1, [pc, #580]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	4618      	mov	r0, r3
 800e084:	f000 fc48 	bl	800e918 <RCC_SetFlashLatencyFromMSIRange>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e1d3      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	0b5b      	lsrs	r3, r3, #13
 800e098:	3301      	adds	r3, #1
 800e09a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e09e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e0a2:	4a87      	ldr	r2, [pc, #540]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e0a4:	6892      	ldr	r2, [r2, #8]
 800e0a6:	0912      	lsrs	r2, r2, #4
 800e0a8:	f002 020f 	and.w	r2, r2, #15
 800e0ac:	4985      	ldr	r1, [pc, #532]	@ (800e2c4 <HAL_RCC_OscConfig+0x4d8>)
 800e0ae:	5c8a      	ldrb	r2, [r1, r2]
 800e0b0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e0b2:	4a85      	ldr	r2, [pc, #532]	@ (800e2c8 <HAL_RCC_OscConfig+0x4dc>)
 800e0b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e0b6:	4b85      	ldr	r3, [pc, #532]	@ (800e2cc <HAL_RCC_OscConfig+0x4e0>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fb fed8 	bl	8009e70 <HAL_InitTick>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d045      	beq.n	800e156 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	e1b5      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d029      	beq.n	800e12a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e0d6:	4b7e      	ldr	r3, [pc, #504]	@ (800e2d0 <HAL_RCC_OscConfig+0x4e4>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0dc:	f7fb ff14 	bl	8009f08 <HAL_GetTick>
 800e0e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e0e2:	e008      	b.n	800e0f6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e0e4:	f7fb ff10 	bl	8009f08 <HAL_GetTick>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d901      	bls.n	800e0f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	e1a1      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e0f6:	4b72      	ldr	r3, [pc, #456]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d0f0      	beq.n	800e0e4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e102:	4b6f      	ldr	r3, [pc, #444]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	496c      	ldr	r1, [pc, #432]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e110:	4313      	orrs	r3, r2
 800e112:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e114:	4b6a      	ldr	r3, [pc, #424]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	061b      	lsls	r3, r3, #24
 800e122:	4967      	ldr	r1, [pc, #412]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e124:	4313      	orrs	r3, r2
 800e126:	604b      	str	r3, [r1, #4]
 800e128:	e015      	b.n	800e156 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e12a:	4b69      	ldr	r3, [pc, #420]	@ (800e2d0 <HAL_RCC_OscConfig+0x4e4>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e130:	f7fb feea 	bl	8009f08 <HAL_GetTick>
 800e134:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e136:	e008      	b.n	800e14a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e138:	f7fb fee6 	bl	8009f08 <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	2b02      	cmp	r3, #2
 800e144:	d901      	bls.n	800e14a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e146:	2303      	movs	r3, #3
 800e148:	e177      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800e14a:	4b5d      	ldr	r3, [pc, #372]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1f0      	bne.n	800e138 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f003 0308 	and.w	r3, r3, #8
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d030      	beq.n	800e1c4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	695b      	ldr	r3, [r3, #20]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d016      	beq.n	800e198 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e16a:	4b5a      	ldr	r3, [pc, #360]	@ (800e2d4 <HAL_RCC_OscConfig+0x4e8>)
 800e16c:	2201      	movs	r2, #1
 800e16e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e170:	f7fb feca 	bl	8009f08 <HAL_GetTick>
 800e174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e176:	e008      	b.n	800e18a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e178:	f7fb fec6 	bl	8009f08 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	2b02      	cmp	r3, #2
 800e184:	d901      	bls.n	800e18a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800e186:	2303      	movs	r3, #3
 800e188:	e157      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e18a:	4b4d      	ldr	r3, [pc, #308]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e18e:	f003 0302 	and.w	r3, r3, #2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0f0      	beq.n	800e178 <HAL_RCC_OscConfig+0x38c>
 800e196:	e015      	b.n	800e1c4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e198:	4b4e      	ldr	r3, [pc, #312]	@ (800e2d4 <HAL_RCC_OscConfig+0x4e8>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e19e:	f7fb feb3 	bl	8009f08 <HAL_GetTick>
 800e1a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e1a4:	e008      	b.n	800e1b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1a6:	f7fb feaf 	bl	8009f08 <HAL_GetTick>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	2b02      	cmp	r3, #2
 800e1b2:	d901      	bls.n	800e1b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	e140      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e1b8:	4b41      	ldr	r3, [pc, #260]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1bc:	f003 0302 	and.w	r3, r3, #2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1f0      	bne.n	800e1a6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 0304 	and.w	r3, r3, #4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 80b5 	beq.w	800e33c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e1d6:	4b3a      	ldr	r3, [pc, #232]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d10d      	bne.n	800e1fe <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e1e2:	4b37      	ldr	r3, [pc, #220]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1e6:	4a36      	ldr	r2, [pc, #216]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e1e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e1ec:	6253      	str	r3, [r2, #36]	@ 0x24
 800e1ee:	4b34      	ldr	r3, [pc, #208]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1f6:	60bb      	str	r3, [r7, #8]
 800e1f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e1fe:	4b36      	ldr	r3, [pc, #216]	@ (800e2d8 <HAL_RCC_OscConfig+0x4ec>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e206:	2b00      	cmp	r3, #0
 800e208:	d118      	bne.n	800e23c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e20a:	4b33      	ldr	r3, [pc, #204]	@ (800e2d8 <HAL_RCC_OscConfig+0x4ec>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a32      	ldr	r2, [pc, #200]	@ (800e2d8 <HAL_RCC_OscConfig+0x4ec>)
 800e210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e216:	f7fb fe77 	bl	8009f08 <HAL_GetTick>
 800e21a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e21c:	e008      	b.n	800e230 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e21e:	f7fb fe73 	bl	8009f08 <HAL_GetTick>
 800e222:	4602      	mov	r2, r0
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	2b64      	cmp	r3, #100	@ 0x64
 800e22a:	d901      	bls.n	800e230 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800e22c:	2303      	movs	r3, #3
 800e22e:	e104      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e230:	4b29      	ldr	r3, [pc, #164]	@ (800e2d8 <HAL_RCC_OscConfig+0x4ec>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d0f0      	beq.n	800e21e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d106      	bne.n	800e252 <HAL_RCC_OscConfig+0x466>
 800e244:	4b1e      	ldr	r3, [pc, #120]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e248:	4a1d      	ldr	r2, [pc, #116]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e24a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e24e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e250:	e02d      	b.n	800e2ae <HAL_RCC_OscConfig+0x4c2>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10c      	bne.n	800e274 <HAL_RCC_OscConfig+0x488>
 800e25a:	4b19      	ldr	r3, [pc, #100]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e25c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e25e:	4a18      	ldr	r2, [pc, #96]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e264:	6353      	str	r3, [r2, #52]	@ 0x34
 800e266:	4b16      	ldr	r3, [pc, #88]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e26a:	4a15      	ldr	r2, [pc, #84]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e26c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e270:	6353      	str	r3, [r2, #52]	@ 0x34
 800e272:	e01c      	b.n	800e2ae <HAL_RCC_OscConfig+0x4c2>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	2b05      	cmp	r3, #5
 800e27a:	d10c      	bne.n	800e296 <HAL_RCC_OscConfig+0x4aa>
 800e27c:	4b10      	ldr	r3, [pc, #64]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e280:	4a0f      	ldr	r2, [pc, #60]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e286:	6353      	str	r3, [r2, #52]	@ 0x34
 800e288:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e28a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e28c:	4a0c      	ldr	r2, [pc, #48]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e28e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e292:	6353      	str	r3, [r2, #52]	@ 0x34
 800e294:	e00b      	b.n	800e2ae <HAL_RCC_OscConfig+0x4c2>
 800e296:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e29a:	4a09      	ldr	r2, [pc, #36]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e29c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2a0:	6353      	str	r3, [r2, #52]	@ 0x34
 800e2a2:	4b07      	ldr	r3, [pc, #28]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e2a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2a6:	4a06      	ldr	r2, [pc, #24]	@ (800e2c0 <HAL_RCC_OscConfig+0x4d4>)
 800e2a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2ac:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d024      	beq.n	800e300 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e2b6:	f7fb fe27 	bl	8009f08 <HAL_GetTick>
 800e2ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2bc:	e019      	b.n	800e2f2 <HAL_RCC_OscConfig+0x506>
 800e2be:	bf00      	nop
 800e2c0:	40023800 	.word	0x40023800
 800e2c4:	08014134 	.word	0x08014134
 800e2c8:	20000000 	.word	0x20000000
 800e2cc:	20000190 	.word	0x20000190
 800e2d0:	42470020 	.word	0x42470020
 800e2d4:	42470680 	.word	0x42470680
 800e2d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e2dc:	f7fb fe14 	bl	8009f08 <HAL_GetTick>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d901      	bls.n	800e2f2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e0a3      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2f2:	4b54      	ldr	r3, [pc, #336]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0ee      	beq.n	800e2dc <HAL_RCC_OscConfig+0x4f0>
 800e2fe:	e014      	b.n	800e32a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e300:	f7fb fe02 	bl	8009f08 <HAL_GetTick>
 800e304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e306:	e00a      	b.n	800e31e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e308:	f7fb fdfe 	bl	8009f08 <HAL_GetTick>
 800e30c:	4602      	mov	r2, r0
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e316:	4293      	cmp	r3, r2
 800e318:	d901      	bls.n	800e31e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800e31a:	2303      	movs	r3, #3
 800e31c:	e08d      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e31e:	4b49      	ldr	r3, [pc, #292]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1ee      	bne.n	800e308 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e32a:	7ffb      	ldrb	r3, [r7, #31]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d105      	bne.n	800e33c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e330:	4b44      	ldr	r3, [pc, #272]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e334:	4a43      	ldr	r2, [pc, #268]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e336:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e33a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e340:	2b00      	cmp	r3, #0
 800e342:	d079      	beq.n	800e438 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	2b0c      	cmp	r3, #12
 800e348:	d056      	beq.n	800e3f8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d13b      	bne.n	800e3ca <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e352:	4b3d      	ldr	r3, [pc, #244]	@ (800e448 <HAL_RCC_OscConfig+0x65c>)
 800e354:	2200      	movs	r2, #0
 800e356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e358:	f7fb fdd6 	bl	8009f08 <HAL_GetTick>
 800e35c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e35e:	e008      	b.n	800e372 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e360:	f7fb fdd2 	bl	8009f08 <HAL_GetTick>
 800e364:	4602      	mov	r2, r0
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d901      	bls.n	800e372 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800e36e:	2303      	movs	r3, #3
 800e370:	e063      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e372:	4b34      	ldr	r3, [pc, #208]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1f0      	bne.n	800e360 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e37e:	4b31      	ldr	r3, [pc, #196]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	4319      	orrs	r1, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e394:	430b      	orrs	r3, r1
 800e396:	492b      	ldr	r1, [pc, #172]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e398:	4313      	orrs	r3, r2
 800e39a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e39c:	4b2a      	ldr	r3, [pc, #168]	@ (800e448 <HAL_RCC_OscConfig+0x65c>)
 800e39e:	2201      	movs	r2, #1
 800e3a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3a2:	f7fb fdb1 	bl	8009f08 <HAL_GetTick>
 800e3a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e3a8:	e008      	b.n	800e3bc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e3aa:	f7fb fdad 	bl	8009f08 <HAL_GetTick>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	1ad3      	subs	r3, r2, r3
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d901      	bls.n	800e3bc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800e3b8:	2303      	movs	r3, #3
 800e3ba:	e03e      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e3bc:	4b21      	ldr	r3, [pc, #132]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d0f0      	beq.n	800e3aa <HAL_RCC_OscConfig+0x5be>
 800e3c8:	e036      	b.n	800e438 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e3ca:	4b1f      	ldr	r3, [pc, #124]	@ (800e448 <HAL_RCC_OscConfig+0x65c>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3d0:	f7fb fd9a 	bl	8009f08 <HAL_GetTick>
 800e3d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e3d6:	e008      	b.n	800e3ea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e3d8:	f7fb fd96 	bl	8009f08 <HAL_GetTick>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	1ad3      	subs	r3, r2, r3
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d901      	bls.n	800e3ea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e027      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e3ea:	4b16      	ldr	r3, [pc, #88]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1f0      	bne.n	800e3d8 <HAL_RCC_OscConfig+0x5ec>
 800e3f6:	e01f      	b.n	800e438 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d101      	bne.n	800e404 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	e01a      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e404:	4b0f      	ldr	r3, [pc, #60]	@ (800e444 <HAL_RCC_OscConfig+0x658>)
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e414:	429a      	cmp	r2, r3
 800e416:	d10d      	bne.n	800e434 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e422:	429a      	cmp	r2, r3
 800e424:	d106      	bne.n	800e434 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e430:	429a      	cmp	r2, r3
 800e432:	d001      	beq.n	800e438 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	e000      	b.n	800e43a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3720      	adds	r7, #32
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	40023800 	.word	0x40023800
 800e448:	42470060 	.word	0x42470060

0800e44c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e11a      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e460:	4b8f      	ldr	r3, [pc, #572]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d919      	bls.n	800e4a2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d105      	bne.n	800e480 <HAL_RCC_ClockConfig+0x34>
 800e474:	4b8a      	ldr	r3, [pc, #552]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a89      	ldr	r2, [pc, #548]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e47a:	f043 0304 	orr.w	r3, r3, #4
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	4b87      	ldr	r3, [pc, #540]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f023 0201 	bic.w	r2, r3, #1
 800e488:	4985      	ldr	r1, [pc, #532]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e490:	4b83      	ldr	r3, [pc, #524]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0301 	and.w	r3, r3, #1
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d001      	beq.n	800e4a2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e0f9      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f003 0302 	and.w	r3, r3, #2
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d008      	beq.n	800e4c0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e4ae:	4b7d      	ldr	r3, [pc, #500]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	497a      	ldr	r1, [pc, #488]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f003 0301 	and.w	r3, r3, #1
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 808e 	beq.w	800e5ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d107      	bne.n	800e4e6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e4d6:	4b73      	ldr	r3, [pc, #460]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d121      	bne.n	800e526 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e0d7      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d107      	bne.n	800e4fe <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e4ee:	4b6d      	ldr	r3, [pc, #436]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d115      	bne.n	800e526 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e0cb      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	2b01      	cmp	r3, #1
 800e504:	d107      	bne.n	800e516 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e506:	4b67      	ldr	r3, [pc, #412]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d109      	bne.n	800e526 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	e0bf      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e516:	4b63      	ldr	r3, [pc, #396]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e0b7      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e526:	4b5f      	ldr	r3, [pc, #380]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f023 0203 	bic.w	r2, r3, #3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	495c      	ldr	r1, [pc, #368]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e534:	4313      	orrs	r3, r2
 800e536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e538:	f7fb fce6 	bl	8009f08 <HAL_GetTick>
 800e53c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	2b02      	cmp	r3, #2
 800e544:	d112      	bne.n	800e56c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e546:	e00a      	b.n	800e55e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e548:	f7fb fcde 	bl	8009f08 <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e556:	4293      	cmp	r3, r2
 800e558:	d901      	bls.n	800e55e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800e55a:	2303      	movs	r3, #3
 800e55c:	e09b      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e55e:	4b51      	ldr	r3, [pc, #324]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f003 030c 	and.w	r3, r3, #12
 800e566:	2b08      	cmp	r3, #8
 800e568:	d1ee      	bne.n	800e548 <HAL_RCC_ClockConfig+0xfc>
 800e56a:	e03e      	b.n	800e5ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	2b03      	cmp	r3, #3
 800e572:	d112      	bne.n	800e59a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e574:	e00a      	b.n	800e58c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e576:	f7fb fcc7 	bl	8009f08 <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e584:	4293      	cmp	r3, r2
 800e586:	d901      	bls.n	800e58c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800e588:	2303      	movs	r3, #3
 800e58a:	e084      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e58c:	4b45      	ldr	r3, [pc, #276]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	f003 030c 	and.w	r3, r3, #12
 800e594:	2b0c      	cmp	r3, #12
 800e596:	d1ee      	bne.n	800e576 <HAL_RCC_ClockConfig+0x12a>
 800e598:	e027      	b.n	800e5ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d11d      	bne.n	800e5de <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e5a2:	e00a      	b.n	800e5ba <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5a4:	f7fb fcb0 	bl	8009f08 <HAL_GetTick>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d901      	bls.n	800e5ba <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	e06d      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e5ba:	4b3a      	ldr	r3, [pc, #232]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	f003 030c 	and.w	r3, r3, #12
 800e5c2:	2b04      	cmp	r3, #4
 800e5c4:	d1ee      	bne.n	800e5a4 <HAL_RCC_ClockConfig+0x158>
 800e5c6:	e010      	b.n	800e5ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5c8:	f7fb fc9e 	bl	8009f08 <HAL_GetTick>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d901      	bls.n	800e5de <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	e05b      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800e5de:	4b31      	ldr	r3, [pc, #196]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	f003 030c 	and.w	r3, r3, #12
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1ee      	bne.n	800e5c8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e5ea:	4b2d      	ldr	r3, [pc, #180]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d219      	bcs.n	800e62c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d105      	bne.n	800e60a <HAL_RCC_ClockConfig+0x1be>
 800e5fe:	4b28      	ldr	r3, [pc, #160]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a27      	ldr	r2, [pc, #156]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e604:	f043 0304 	orr.w	r3, r3, #4
 800e608:	6013      	str	r3, [r2, #0]
 800e60a:	4b25      	ldr	r3, [pc, #148]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f023 0201 	bic.w	r2, r3, #1
 800e612:	4923      	ldr	r1, [pc, #140]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	4313      	orrs	r3, r2
 800e618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e61a:	4b21      	ldr	r3, [pc, #132]	@ (800e6a0 <HAL_RCC_ClockConfig+0x254>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	429a      	cmp	r2, r3
 800e626:	d001      	beq.n	800e62c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	e034      	b.n	800e696 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 0304 	and.w	r3, r3, #4
 800e634:	2b00      	cmp	r3, #0
 800e636:	d008      	beq.n	800e64a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e638:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	4917      	ldr	r1, [pc, #92]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e646:	4313      	orrs	r3, r2
 800e648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 0308 	and.w	r3, r3, #8
 800e652:	2b00      	cmp	r3, #0
 800e654:	d009      	beq.n	800e66a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e656:	4b13      	ldr	r3, [pc, #76]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	490f      	ldr	r1, [pc, #60]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e666:	4313      	orrs	r3, r2
 800e668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e66a:	f000 f823 	bl	800e6b4 <HAL_RCC_GetSysClockFreq>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a4 <HAL_RCC_ClockConfig+0x258>)
 800e672:	689b      	ldr	r3, [r3, #8]
 800e674:	091b      	lsrs	r3, r3, #4
 800e676:	f003 030f 	and.w	r3, r3, #15
 800e67a:	490b      	ldr	r1, [pc, #44]	@ (800e6a8 <HAL_RCC_ClockConfig+0x25c>)
 800e67c:	5ccb      	ldrb	r3, [r1, r3]
 800e67e:	fa22 f303 	lsr.w	r3, r2, r3
 800e682:	4a0a      	ldr	r2, [pc, #40]	@ (800e6ac <HAL_RCC_ClockConfig+0x260>)
 800e684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800e686:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b0 <HAL_RCC_ClockConfig+0x264>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fb fbf0 	bl	8009e70 <HAL_InitTick>
 800e690:	4603      	mov	r3, r0
 800e692:	72fb      	strb	r3, [r7, #11]

  return status;
 800e694:	7afb      	ldrb	r3, [r7, #11]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	40023c00 	.word	0x40023c00
 800e6a4:	40023800 	.word	0x40023800
 800e6a8:	08014134 	.word	0x08014134
 800e6ac:	20000000 	.word	0x20000000
 800e6b0:	20000190 	.word	0x20000190

0800e6b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6b8:	b092      	sub	sp, #72	@ 0x48
 800e6ba:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800e6bc:	4b79      	ldr	r3, [pc, #484]	@ (800e8a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c4:	f003 030c 	and.w	r3, r3, #12
 800e6c8:	2b0c      	cmp	r3, #12
 800e6ca:	d00d      	beq.n	800e6e8 <HAL_RCC_GetSysClockFreq+0x34>
 800e6cc:	2b0c      	cmp	r3, #12
 800e6ce:	f200 80d5 	bhi.w	800e87c <HAL_RCC_GetSysClockFreq+0x1c8>
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d002      	beq.n	800e6dc <HAL_RCC_GetSysClockFreq+0x28>
 800e6d6:	2b08      	cmp	r3, #8
 800e6d8:	d003      	beq.n	800e6e2 <HAL_RCC_GetSysClockFreq+0x2e>
 800e6da:	e0cf      	b.n	800e87c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e6dc:	4b72      	ldr	r3, [pc, #456]	@ (800e8a8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800e6de:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800e6e0:	e0da      	b.n	800e898 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800e6e2:	4b72      	ldr	r3, [pc, #456]	@ (800e8ac <HAL_RCC_GetSysClockFreq+0x1f8>)
 800e6e4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800e6e6:	e0d7      	b.n	800e898 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ea:	0c9b      	lsrs	r3, r3, #18
 800e6ec:	f003 020f 	and.w	r2, r3, #15
 800e6f0:	4b6f      	ldr	r3, [pc, #444]	@ (800e8b0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800e6f2:	5c9b      	ldrb	r3, [r3, r2]
 800e6f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6f8:	0d9b      	lsrs	r3, r3, #22
 800e6fa:	f003 0303 	and.w	r3, r3, #3
 800e6fe:	3301      	adds	r3, #1
 800e700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e702:	4b68      	ldr	r3, [pc, #416]	@ (800e8a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d05d      	beq.n	800e7ca <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e710:	2200      	movs	r2, #0
 800e712:	4618      	mov	r0, r3
 800e714:	4611      	mov	r1, r2
 800e716:	4604      	mov	r4, r0
 800e718:	460d      	mov	r5, r1
 800e71a:	4622      	mov	r2, r4
 800e71c:	462b      	mov	r3, r5
 800e71e:	f04f 0000 	mov.w	r0, #0
 800e722:	f04f 0100 	mov.w	r1, #0
 800e726:	0159      	lsls	r1, r3, #5
 800e728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e72c:	0150      	lsls	r0, r2, #5
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4621      	mov	r1, r4
 800e734:	1a51      	subs	r1, r2, r1
 800e736:	6139      	str	r1, [r7, #16]
 800e738:	4629      	mov	r1, r5
 800e73a:	eb63 0301 	sbc.w	r3, r3, r1
 800e73e:	617b      	str	r3, [r7, #20]
 800e740:	f04f 0200 	mov.w	r2, #0
 800e744:	f04f 0300 	mov.w	r3, #0
 800e748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e74c:	4659      	mov	r1, fp
 800e74e:	018b      	lsls	r3, r1, #6
 800e750:	4651      	mov	r1, sl
 800e752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e756:	4651      	mov	r1, sl
 800e758:	018a      	lsls	r2, r1, #6
 800e75a:	46d4      	mov	ip, sl
 800e75c:	ebb2 080c 	subs.w	r8, r2, ip
 800e760:	4659      	mov	r1, fp
 800e762:	eb63 0901 	sbc.w	r9, r3, r1
 800e766:	f04f 0200 	mov.w	r2, #0
 800e76a:	f04f 0300 	mov.w	r3, #0
 800e76e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e77a:	4690      	mov	r8, r2
 800e77c:	4699      	mov	r9, r3
 800e77e:	4623      	mov	r3, r4
 800e780:	eb18 0303 	adds.w	r3, r8, r3
 800e784:	60bb      	str	r3, [r7, #8]
 800e786:	462b      	mov	r3, r5
 800e788:	eb49 0303 	adc.w	r3, r9, r3
 800e78c:	60fb      	str	r3, [r7, #12]
 800e78e:	f04f 0200 	mov.w	r2, #0
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e79a:	4629      	mov	r1, r5
 800e79c:	024b      	lsls	r3, r1, #9
 800e79e:	4620      	mov	r0, r4
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800e7a8:	4601      	mov	r1, r0
 800e7aa:	024a      	lsls	r2, r1, #9
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e7bc:	f7f2 fce6 	bl	800118c <__aeabi_uldivmod>
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7c8:	e055      	b.n	800e876 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	623b      	str	r3, [r7, #32]
 800e7d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7d2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e7d6:	4642      	mov	r2, r8
 800e7d8:	464b      	mov	r3, r9
 800e7da:	f04f 0000 	mov.w	r0, #0
 800e7de:	f04f 0100 	mov.w	r1, #0
 800e7e2:	0159      	lsls	r1, r3, #5
 800e7e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7e8:	0150      	lsls	r0, r2, #5
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	46c4      	mov	ip, r8
 800e7f0:	ebb2 0a0c 	subs.w	sl, r2, ip
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	468c      	mov	ip, r1
 800e7fa:	eb63 0b0c 	sbc.w	fp, r3, ip
 800e7fe:	f04f 0200 	mov.w	r2, #0
 800e802:	f04f 0300 	mov.w	r3, #0
 800e806:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e80a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e80e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e812:	ebb2 040a 	subs.w	r4, r2, sl
 800e816:	eb63 050b 	sbc.w	r5, r3, fp
 800e81a:	f04f 0200 	mov.w	r2, #0
 800e81e:	f04f 0300 	mov.w	r3, #0
 800e822:	00eb      	lsls	r3, r5, #3
 800e824:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e828:	00e2      	lsls	r2, r4, #3
 800e82a:	4614      	mov	r4, r2
 800e82c:	461d      	mov	r5, r3
 800e82e:	4603      	mov	r3, r0
 800e830:	18e3      	adds	r3, r4, r3
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	460b      	mov	r3, r1
 800e836:	eb45 0303 	adc.w	r3, r5, r3
 800e83a:	607b      	str	r3, [r7, #4]
 800e83c:	f04f 0200 	mov.w	r2, #0
 800e840:	f04f 0300 	mov.w	r3, #0
 800e844:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e848:	4629      	mov	r1, r5
 800e84a:	028b      	lsls	r3, r1, #10
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	4604      	mov	r4, r0
 800e852:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800e856:	4601      	mov	r1, r0
 800e858:	028a      	lsls	r2, r1, #10
 800e85a:	4610      	mov	r0, r2
 800e85c:	4619      	mov	r1, r3
 800e85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e860:	2200      	movs	r2, #0
 800e862:	61bb      	str	r3, [r7, #24]
 800e864:	61fa      	str	r2, [r7, #28]
 800e866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e86a:	f7f2 fc8f 	bl	800118c <__aeabi_uldivmod>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4613      	mov	r3, r2
 800e874:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800e876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e878:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800e87a:	e00d      	b.n	800e898 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e87c:	4b09      	ldr	r3, [pc, #36]	@ (800e8a4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	0b5b      	lsrs	r3, r3, #13
 800e882:	f003 0307 	and.w	r3, r3, #7
 800e886:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88a:	3301      	adds	r3, #1
 800e88c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e890:	fa02 f303 	lsl.w	r3, r2, r3
 800e894:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800e896:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3748      	adds	r7, #72	@ 0x48
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8a4:	40023800 	.word	0x40023800
 800e8a8:	00f42400 	.word	0x00f42400
 800e8ac:	007a1200 	.word	0x007a1200
 800e8b0:	08014128 	.word	0x08014128

0800e8b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e8b8:	4b02      	ldr	r3, [pc, #8]	@ (800e8c4 <HAL_RCC_GetHCLKFreq+0x10>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bc80      	pop	{r7}
 800e8c2:	4770      	bx	lr
 800e8c4:	20000000 	.word	0x20000000

0800e8c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e8cc:	f7ff fff2 	bl	800e8b4 <HAL_RCC_GetHCLKFreq>
 800e8d0:	4602      	mov	r2, r0
 800e8d2:	4b05      	ldr	r3, [pc, #20]	@ (800e8e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	0a1b      	lsrs	r3, r3, #8
 800e8d8:	f003 0307 	and.w	r3, r3, #7
 800e8dc:	4903      	ldr	r1, [pc, #12]	@ (800e8ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800e8de:	5ccb      	ldrb	r3, [r1, r3]
 800e8e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	40023800 	.word	0x40023800
 800e8ec:	08014144 	.word	0x08014144

0800e8f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e8f4:	f7ff ffde 	bl	800e8b4 <HAL_RCC_GetHCLKFreq>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	4b05      	ldr	r3, [pc, #20]	@ (800e910 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	0adb      	lsrs	r3, r3, #11
 800e900:	f003 0307 	and.w	r3, r3, #7
 800e904:	4903      	ldr	r1, [pc, #12]	@ (800e914 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e906:	5ccb      	ldrb	r3, [r1, r3]
 800e908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	40023800 	.word	0x40023800
 800e914:	08014144 	.word	0x08014144

0800e918 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800e918:	b480      	push	{r7}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e920:	2300      	movs	r3, #0
 800e922:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800e924:	4b29      	ldr	r3, [pc, #164]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d12c      	bne.n	800e98a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e930:	4b26      	ldr	r3, [pc, #152]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d005      	beq.n	800e948 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e93c:	4b24      	ldr	r3, [pc, #144]	@ (800e9d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800e944:	617b      	str	r3, [r7, #20]
 800e946:	e016      	b.n	800e976 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e948:	4b20      	ldr	r3, [pc, #128]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94c:	4a1f      	ldr	r2, [pc, #124]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e94e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e952:	6253      	str	r3, [r2, #36]	@ 0x24
 800e954:	4b1d      	ldr	r3, [pc, #116]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800e960:	4b1b      	ldr	r3, [pc, #108]	@ (800e9d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800e968:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800e96a:	4b18      	ldr	r3, [pc, #96]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e96e:	4a17      	ldr	r2, [pc, #92]	@ (800e9cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800e970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e974:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800e97c:	d105      	bne.n	800e98a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e984:	d101      	bne.n	800e98a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800e986:	2301      	movs	r3, #1
 800e988:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d105      	bne.n	800e99c <RCC_SetFlashLatencyFromMSIRange+0x84>
 800e990:	4b10      	ldr	r3, [pc, #64]	@ (800e9d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a0f      	ldr	r2, [pc, #60]	@ (800e9d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e996:	f043 0304 	orr.w	r3, r3, #4
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f023 0201 	bic.w	r2, r3, #1
 800e9a4:	490b      	ldr	r1, [pc, #44]	@ (800e9d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e9ac:	4b09      	ldr	r3, [pc, #36]	@ (800e9d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	693a      	ldr	r2, [r7, #16]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d001      	beq.n	800e9be <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e000      	b.n	800e9c0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800e9be:	2300      	movs	r3, #0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	371c      	adds	r7, #28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bc80      	pop	{r7}
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	40023800 	.word	0x40023800
 800e9d0:	40007000 	.word	0x40007000
 800e9d4:	40023c00 	.word	0x40023c00

0800e9d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e07b      	b.n	800eae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d108      	bne.n	800ea04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e9fa:	d009      	beq.n	800ea10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	61da      	str	r2, [r3, #28]
 800ea02:	e005      	b.n	800ea10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d106      	bne.n	800ea30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7f3 fc0a 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2202      	movs	r2, #2
 800ea34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea62:	431a      	orrs	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	f003 0302 	and.w	r3, r3, #2
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	695b      	ldr	r3, [r3, #20]
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	431a      	orrs	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea80:	431a      	orrs	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a1b      	ldr	r3, [r3, #32]
 800ea90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea94:	ea42 0103 	orr.w	r1, r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	0c1b      	lsrs	r3, r3, #16
 800eaae:	f003 0104 	and.w	r1, r3, #4
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eab6:	f003 0210 	and.w	r2, r3, #16
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	430a      	orrs	r2, r1
 800eac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	69da      	ldr	r2, [r3, #28]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ead0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b088      	sub	sp, #32
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	60f8      	str	r0, [r7, #12]
 800eaf2:	60b9      	str	r1, [r7, #8]
 800eaf4:	603b      	str	r3, [r7, #0]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d101      	bne.n	800eb0c <HAL_SPI_Transmit+0x22>
 800eb08:	2302      	movs	r3, #2
 800eb0a:	e12d      	b.n	800ed68 <HAL_SPI_Transmit+0x27e>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb14:	f7fb f9f8 	bl	8009f08 <HAL_GetTick>
 800eb18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800eb1a:	88fb      	ldrh	r3, [r7, #6]
 800eb1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d002      	beq.n	800eb30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb2e:	e116      	b.n	800ed5e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d002      	beq.n	800eb3c <HAL_SPI_Transmit+0x52>
 800eb36:	88fb      	ldrh	r3, [r7, #6]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800eb40:	e10d      	b.n	800ed5e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2203      	movs	r2, #3
 800eb46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	88fa      	ldrh	r2, [r7, #6]
 800eb5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	88fa      	ldrh	r2, [r7, #6]
 800eb60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb88:	d10f      	bne.n	800ebaa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800eba8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebb4:	2b40      	cmp	r3, #64	@ 0x40
 800ebb6:	d007      	beq.n	800ebc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ebc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ebd0:	d14f      	bne.n	800ec72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <HAL_SPI_Transmit+0xf6>
 800ebda:	8afb      	ldrh	r3, [r7, #22]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d142      	bne.n	800ec66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebe4:	881a      	ldrh	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebf0:	1c9a      	adds	r2, r3, #2
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	3b01      	subs	r3, #1
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ec04:	e02f      	b.n	800ec66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	f003 0302 	and.w	r3, r3, #2
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d112      	bne.n	800ec3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec18:	881a      	ldrh	r2, [r3, #0]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec24:	1c9a      	adds	r2, r3, #2
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	3b01      	subs	r3, #1
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ec38:	e015      	b.n	800ec66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec3a:	f7fb f965 	bl	8009f08 <HAL_GetTick>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d803      	bhi.n	800ec52 <HAL_SPI_Transmit+0x168>
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec50:	d102      	bne.n	800ec58 <HAL_SPI_Transmit+0x16e>
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d106      	bne.n	800ec66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800ec64:	e07b      	b.n	800ed5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1ca      	bne.n	800ec06 <HAL_SPI_Transmit+0x11c>
 800ec70:	e050      	b.n	800ed14 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <HAL_SPI_Transmit+0x196>
 800ec7a:	8afb      	ldrh	r3, [r7, #22]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d144      	bne.n	800ed0a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	330c      	adds	r3, #12
 800ec8a:	7812      	ldrb	r2, [r2, #0]
 800ec8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800eca6:	e030      	b.n	800ed0a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d113      	bne.n	800ecde <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	330c      	adds	r3, #12
 800ecc0:	7812      	ldrb	r2, [r2, #0]
 800ecc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ecdc:	e015      	b.n	800ed0a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecde:	f7fb f913 	bl	8009f08 <HAL_GetTick>
 800ece2:	4602      	mov	r2, r0
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d803      	bhi.n	800ecf6 <HAL_SPI_Transmit+0x20c>
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf4:	d102      	bne.n	800ecfc <HAL_SPI_Transmit+0x212>
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d106      	bne.n	800ed0a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2201      	movs	r2, #1
 800ed04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800ed08:	e029      	b.n	800ed5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1c9      	bne.n	800eca8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed14:	69ba      	ldr	r2, [r7, #24]
 800ed16:	6839      	ldr	r1, [r7, #0]
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f000 f9c3 	bl	800f0a4 <SPI_EndRxTxTransaction>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2220      	movs	r2, #32
 800ed28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10a      	bne.n	800ed48 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed32:	2300      	movs	r3, #0
 800ed34:	613b      	str	r3, [r7, #16]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	613b      	str	r3, [r7, #16]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	613b      	str	r3, [r7, #16]
 800ed46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	77fb      	strb	r3, [r7, #31]
 800ed54:	e003      	b.n	800ed5e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2201      	movs	r2, #1
 800ed5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ed66:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3720      	adds	r7, #32
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b088      	sub	sp, #32
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10e      	bne.n	800edb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d009      	beq.n	800edb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d004      	beq.n	800edb0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	4798      	blx	r3
    return;
 800edae:	e0ce      	b.n	800ef4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	f003 0302 	and.w	r3, r3, #2
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d009      	beq.n	800edce <HAL_SPI_IRQHandler+0x5e>
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d004      	beq.n	800edce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	4798      	blx	r3
    return;
 800edcc:	e0bf      	b.n	800ef4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	f003 0320 	and.w	r3, r3, #32
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <HAL_SPI_IRQHandler+0x7e>
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80b0 	beq.w	800ef4e <HAL_SPI_IRQHandler+0x1de>
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	f003 0320 	and.w	r3, r3, #32
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 80aa 	beq.w	800ef4e <HAL_SPI_IRQHandler+0x1de>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d023      	beq.n	800ee4c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d011      	beq.n	800ee34 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee14:	f043 0204 	orr.w	r2, r3, #4
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	e00b      	b.n	800ee4c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee34:	2300      	movs	r3, #0
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	613b      	str	r3, [r7, #16]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	613b      	str	r3, [r7, #16]
 800ee48:	693b      	ldr	r3, [r7, #16]
        return;
 800ee4a:	e080      	b.n	800ef4e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	f003 0320 	and.w	r3, r3, #32
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d014      	beq.n	800ee80 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee5a:	f043 0201 	orr.w	r2, r3, #1
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee7c:	601a      	str	r2, [r3, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee8e:	f043 0208 	orr.w	r2, r3, #8
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ee96:	2300      	movs	r3, #0
 800ee98:	60bb      	str	r3, [r7, #8]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	60bb      	str	r3, [r7, #8]
 800eea2:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d04f      	beq.n	800ef4c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685a      	ldr	r2, [r3, #4]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eeba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	f003 0302 	and.w	r3, r3, #2
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d104      	bne.n	800eed8 <HAL_SPI_IRQHandler+0x168>
 800eece:	69fb      	ldr	r3, [r7, #28]
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d034      	beq.n	800ef42 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f022 0203 	bic.w	r2, r2, #3
 800eee6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d011      	beq.n	800ef14 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eef4:	4a17      	ldr	r2, [pc, #92]	@ (800ef54 <HAL_SPI_IRQHandler+0x1e4>)
 800eef6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fb ff5c 	bl	800adba <HAL_DMA_Abort_IT>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d005      	beq.n	800ef14 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d016      	beq.n	800ef4a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef20:	4a0c      	ldr	r2, [pc, #48]	@ (800ef54 <HAL_SPI_IRQHandler+0x1e4>)
 800ef22:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fb ff46 	bl	800adba <HAL_DMA_Abort_IT>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00a      	beq.n	800ef4a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800ef40:	e003      	b.n	800ef4a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f808 	bl	800ef58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ef48:	e000      	b.n	800ef4c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ef4a:	bf00      	nop
    return;
 800ef4c:	bf00      	nop
  }
}
 800ef4e:	3720      	adds	r7, #32
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	0800ef6b 	.word	0x0800ef6b

0800ef58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ef60:	bf00      	nop
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bc80      	pop	{r7}
 800ef68:	4770      	bx	lr

0800ef6a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef76:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f7ff ffe7 	bl	800ef58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ef8a:	bf00      	nop
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
	...

0800ef94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	603b      	str	r3, [r7, #0]
 800efa0:	4613      	mov	r3, r2
 800efa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800efa4:	f7fa ffb0 	bl	8009f08 <HAL_GetTick>
 800efa8:	4602      	mov	r2, r0
 800efaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efac:	1a9b      	subs	r3, r3, r2
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	4413      	add	r3, r2
 800efb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800efb4:	f7fa ffa8 	bl	8009f08 <HAL_GetTick>
 800efb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800efba:	4b39      	ldr	r3, [pc, #228]	@ (800f0a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	015b      	lsls	r3, r3, #5
 800efc0:	0d1b      	lsrs	r3, r3, #20
 800efc2:	69fa      	ldr	r2, [r7, #28]
 800efc4:	fb02 f303 	mul.w	r3, r2, r3
 800efc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800efca:	e054      	b.n	800f076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd2:	d050      	beq.n	800f076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800efd4:	f7fa ff98 	bl	8009f08 <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d902      	bls.n	800efea <SPI_WaitFlagStateUntilTimeout+0x56>
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d13d      	bne.n	800f066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	685a      	ldr	r2, [r3, #4]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f002:	d111      	bne.n	800f028 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f00c:	d004      	beq.n	800f018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f016:	d107      	bne.n	800f028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f02c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f030:	d10f      	bne.n	800f052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f040:	601a      	str	r2, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2201      	movs	r2, #1
 800f056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f062:	2303      	movs	r3, #3
 800f064:	e017      	b.n	800f096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	3b01      	subs	r3, #1
 800f074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	689a      	ldr	r2, [r3, #8]
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	4013      	ands	r3, r2
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	429a      	cmp	r2, r3
 800f084:	bf0c      	ite	eq
 800f086:	2301      	moveq	r3, #1
 800f088:	2300      	movne	r3, #0
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	461a      	mov	r2, r3
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	429a      	cmp	r2, r3
 800f092:	d19b      	bne.n	800efcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3720      	adds	r7, #32
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20000000 	.word	0x20000000

0800f0a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af02      	add	r7, sp, #8
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f0b0:	4b1b      	ldr	r3, [pc, #108]	@ (800f120 <SPI_EndRxTxTransaction+0x7c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800f124 <SPI_EndRxTxTransaction+0x80>)
 800f0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f0ba:	0d5b      	lsrs	r3, r3, #21
 800f0bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f0c0:	fb02 f303 	mul.w	r3, r2, r3
 800f0c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0ce:	d112      	bne.n	800f0f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	2180      	movs	r1, #128	@ 0x80
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f7ff ff5a 	bl	800ef94 <SPI_WaitFlagStateUntilTimeout>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d016      	beq.n	800f114 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0ea:	f043 0220 	orr.w	r2, r3, #32
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	e00f      	b.n	800f116 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	3b01      	subs	r3, #1
 800f100:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f10c:	2b80      	cmp	r3, #128	@ 0x80
 800f10e:	d0f2      	beq.n	800f0f6 <SPI_EndRxTxTransaction+0x52>
 800f110:	e000      	b.n	800f114 <SPI_EndRxTxTransaction+0x70>
        break;
 800f112:	bf00      	nop
  }

  return HAL_OK;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3718      	adds	r7, #24
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20000000 	.word	0x20000000
 800f124:	165e9f81 	.word	0x165e9f81

0800f128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f136:	2301      	movs	r3, #1
 800f138:	e031      	b.n	800f19e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f7f3 f8c4 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3304      	adds	r3, #4
 800f164:	4619      	mov	r1, r3
 800f166:	4610      	mov	r0, r2
 800f168:	f000 fc1e 	bl	800f9a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2201      	movs	r2, #1
 800f170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2201      	movs	r2, #1
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2201      	movs	r2, #1
 800f190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d001      	beq.n	800f1c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	e03a      	b.n	800f236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68da      	ldr	r2, [r3, #12]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f042 0201 	orr.w	r2, r2, #1
 800f1d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1e0:	d00e      	beq.n	800f200 <HAL_TIM_Base_Start_IT+0x58>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a16      	ldr	r2, [pc, #88]	@ (800f240 <HAL_TIM_Base_Start_IT+0x98>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d009      	beq.n	800f200 <HAL_TIM_Base_Start_IT+0x58>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a14      	ldr	r2, [pc, #80]	@ (800f244 <HAL_TIM_Base_Start_IT+0x9c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d004      	beq.n	800f200 <HAL_TIM_Base_Start_IT+0x58>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a13      	ldr	r2, [pc, #76]	@ (800f248 <HAL_TIM_Base_Start_IT+0xa0>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d111      	bne.n	800f224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	f003 0307 	and.w	r3, r3, #7
 800f20a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2b06      	cmp	r3, #6
 800f210:	d010      	beq.n	800f234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f042 0201 	orr.w	r2, r2, #1
 800f220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f222:	e007      	b.n	800f234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f042 0201 	orr.w	r2, r2, #1
 800f232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3714      	adds	r7, #20
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bc80      	pop	{r7}
 800f23e:	4770      	bx	lr
 800f240:	40000400 	.word	0x40000400
 800f244:	40000800 	.word	0x40000800
 800f248:	40010800 	.word	0x40010800

0800f24c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d101      	bne.n	800f25e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	e031      	b.n	800f2c2 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f829 	bl	800f2ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3304      	adds	r3, #4
 800f288:	4619      	mov	r1, r3
 800f28a:	4610      	mov	r0, r2
 800f28c:	f000 fb8c 	bl	800f9a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2201      	movs	r2, #1
 800f294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b083      	sub	sp, #12
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f2d2:	bf00      	nop
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bc80      	pop	{r7}
 800f2da:	4770      	bx	lr

0800f2dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d109      	bne.n	800f300 <HAL_TIM_PWM_Start+0x24>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	bf14      	ite	ne
 800f2f8:	2301      	movne	r3, #1
 800f2fa:	2300      	moveq	r3, #0
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	e022      	b.n	800f346 <HAL_TIM_PWM_Start+0x6a>
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	2b04      	cmp	r3, #4
 800f304:	d109      	bne.n	800f31a <HAL_TIM_PWM_Start+0x3e>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	2b01      	cmp	r3, #1
 800f310:	bf14      	ite	ne
 800f312:	2301      	movne	r3, #1
 800f314:	2300      	moveq	r3, #0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	e015      	b.n	800f346 <HAL_TIM_PWM_Start+0x6a>
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b08      	cmp	r3, #8
 800f31e:	d109      	bne.n	800f334 <HAL_TIM_PWM_Start+0x58>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b01      	cmp	r3, #1
 800f32a:	bf14      	ite	ne
 800f32c:	2301      	movne	r3, #1
 800f32e:	2300      	moveq	r3, #0
 800f330:	b2db      	uxtb	r3, r3
 800f332:	e008      	b.n	800f346 <HAL_TIM_PWM_Start+0x6a>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	bf14      	ite	ne
 800f340:	2301      	movne	r3, #1
 800f342:	2300      	moveq	r3, #0
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e051      	b.n	800f3f2 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d104      	bne.n	800f35e <HAL_TIM_PWM_Start+0x82>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2202      	movs	r2, #2
 800f358:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f35c:	e013      	b.n	800f386 <HAL_TIM_PWM_Start+0xaa>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b04      	cmp	r3, #4
 800f362:	d104      	bne.n	800f36e <HAL_TIM_PWM_Start+0x92>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2202      	movs	r2, #2
 800f368:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800f36c:	e00b      	b.n	800f386 <HAL_TIM_PWM_Start+0xaa>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2b08      	cmp	r3, #8
 800f372:	d104      	bne.n	800f37e <HAL_TIM_PWM_Start+0xa2>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2202      	movs	r2, #2
 800f378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f37c:	e003      	b.n	800f386 <HAL_TIM_PWM_Start+0xaa>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2202      	movs	r2, #2
 800f382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2201      	movs	r2, #1
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 fd05 	bl	800fd9e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f39c:	d00e      	beq.n	800f3bc <HAL_TIM_PWM_Start+0xe0>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a16      	ldr	r2, [pc, #88]	@ (800f3fc <HAL_TIM_PWM_Start+0x120>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d009      	beq.n	800f3bc <HAL_TIM_PWM_Start+0xe0>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a14      	ldr	r2, [pc, #80]	@ (800f400 <HAL_TIM_PWM_Start+0x124>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d004      	beq.n	800f3bc <HAL_TIM_PWM_Start+0xe0>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a13      	ldr	r2, [pc, #76]	@ (800f404 <HAL_TIM_PWM_Start+0x128>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d111      	bne.n	800f3e0 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	f003 0307 	and.w	r3, r3, #7
 800f3c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b06      	cmp	r3, #6
 800f3cc:	d010      	beq.n	800f3f0 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f042 0201 	orr.w	r2, r2, #1
 800f3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3de:	e007      	b.n	800f3f0 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f042 0201 	orr.w	r2, r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	40000400 	.word	0x40000400
 800f400:	40000800 	.word	0x40000800
 800f404:	40010800 	.word	0x40010800

0800f408 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2200      	movs	r2, #0
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 fcbf 	bl	800fd9e <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6a1a      	ldr	r2, [r3, #32]
 800f426:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f42a:	4013      	ands	r3, r2
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d107      	bne.n	800f440 <HAL_TIM_PWM_Stop+0x38>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f022 0201 	bic.w	r2, r2, #1
 800f43e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d104      	bne.n	800f450 <HAL_TIM_PWM_Stop+0x48>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f44e:	e013      	b.n	800f478 <HAL_TIM_PWM_Stop+0x70>
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	2b04      	cmp	r3, #4
 800f454:	d104      	bne.n	800f460 <HAL_TIM_PWM_Stop+0x58>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800f45e:	e00b      	b.n	800f478 <HAL_TIM_PWM_Stop+0x70>
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	2b08      	cmp	r3, #8
 800f464:	d104      	bne.n	800f470 <HAL_TIM_PWM_Stop+0x68>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800f46e:	e003      	b.n	800f478 <HAL_TIM_PWM_Stop+0x70>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3708      	adds	r7, #8
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b082      	sub	sp, #8
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	691b      	ldr	r3, [r3, #16]
 800f490:	f003 0302 	and.w	r3, r3, #2
 800f494:	2b02      	cmp	r3, #2
 800f496:	d122      	bne.n	800f4de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f003 0302 	and.w	r3, r3, #2
 800f4a2:	2b02      	cmp	r3, #2
 800f4a4:	d11b      	bne.n	800f4de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f06f 0202 	mvn.w	r2, #2
 800f4ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	699b      	ldr	r3, [r3, #24]
 800f4bc:	f003 0303 	and.w	r3, r3, #3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fa54 	bl	800f972 <HAL_TIM_IC_CaptureCallback>
 800f4ca:	e005      	b.n	800f4d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 fa47 	bl	800f960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fa56 	bl	800f984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	691b      	ldr	r3, [r3, #16]
 800f4e4:	f003 0304 	and.w	r3, r3, #4
 800f4e8:	2b04      	cmp	r3, #4
 800f4ea:	d122      	bne.n	800f532 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	f003 0304 	and.w	r3, r3, #4
 800f4f6:	2b04      	cmp	r3, #4
 800f4f8:	d11b      	bne.n	800f532 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f06f 0204 	mvn.w	r2, #4
 800f502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2202      	movs	r2, #2
 800f508:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 fa2a 	bl	800f972 <HAL_TIM_IC_CaptureCallback>
 800f51e:	e005      	b.n	800f52c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f000 fa1d 	bl	800f960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fa2c 	bl	800f984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	691b      	ldr	r3, [r3, #16]
 800f538:	f003 0308 	and.w	r3, r3, #8
 800f53c:	2b08      	cmp	r3, #8
 800f53e:	d122      	bne.n	800f586 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	f003 0308 	and.w	r3, r3, #8
 800f54a:	2b08      	cmp	r3, #8
 800f54c:	d11b      	bne.n	800f586 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f06f 0208 	mvn.w	r2, #8
 800f556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2204      	movs	r2, #4
 800f55c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	69db      	ldr	r3, [r3, #28]
 800f564:	f003 0303 	and.w	r3, r3, #3
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fa00 	bl	800f972 <HAL_TIM_IC_CaptureCallback>
 800f572:	e005      	b.n	800f580 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 f9f3 	bl	800f960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 fa02 	bl	800f984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	f003 0310 	and.w	r3, r3, #16
 800f590:	2b10      	cmp	r3, #16
 800f592:	d122      	bne.n	800f5da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	f003 0310 	and.w	r3, r3, #16
 800f59e:	2b10      	cmp	r3, #16
 800f5a0:	d11b      	bne.n	800f5da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f06f 0210 	mvn.w	r2, #16
 800f5aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2208      	movs	r2, #8
 800f5b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	69db      	ldr	r3, [r3, #28]
 800f5b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f9d6 	bl	800f972 <HAL_TIM_IC_CaptureCallback>
 800f5c6:	e005      	b.n	800f5d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f9c9 	bl	800f960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 f9d8 	bl	800f984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	691b      	ldr	r3, [r3, #16]
 800f5e0:	f003 0301 	and.w	r3, r3, #1
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d10e      	bne.n	800f606 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d107      	bne.n	800f606 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f06f 0201 	mvn.w	r2, #1
 800f5fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 f9a4 	bl	800f94e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f610:	2b40      	cmp	r3, #64	@ 0x40
 800f612:	d10e      	bne.n	800f632 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f61e:	2b40      	cmp	r3, #64	@ 0x40
 800f620:	d107      	bne.n	800f632 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f9b2 	bl	800f996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
	...

0800f63c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f648:	2300      	movs	r3, #0
 800f64a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f652:	2b01      	cmp	r3, #1
 800f654:	d101      	bne.n	800f65a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f656:	2302      	movs	r3, #2
 800f658:	e0ae      	b.n	800f7b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b0c      	cmp	r3, #12
 800f666:	f200 809f 	bhi.w	800f7a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f66a:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f6a5 	.word	0x0800f6a5
 800f674:	0800f7a9 	.word	0x0800f7a9
 800f678:	0800f7a9 	.word	0x0800f7a9
 800f67c:	0800f7a9 	.word	0x0800f7a9
 800f680:	0800f6e5 	.word	0x0800f6e5
 800f684:	0800f7a9 	.word	0x0800f7a9
 800f688:	0800f7a9 	.word	0x0800f7a9
 800f68c:	0800f7a9 	.word	0x0800f7a9
 800f690:	0800f727 	.word	0x0800f727
 800f694:	0800f7a9 	.word	0x0800f7a9
 800f698:	0800f7a9 	.word	0x0800f7a9
 800f69c:	0800f7a9 	.word	0x0800f7a9
 800f6a0:	0800f767 	.word	0x0800f767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	68b9      	ldr	r1, [r7, #8]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 f9ec 	bl	800fa88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	699a      	ldr	r2, [r3, #24]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f042 0208 	orr.w	r2, r2, #8
 800f6be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	699a      	ldr	r2, [r3, #24]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f022 0204 	bic.w	r2, r2, #4
 800f6ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6999      	ldr	r1, [r3, #24]
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	68da      	ldr	r2, [r3, #12]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	619a      	str	r2, [r3, #24]
      break;
 800f6e2:	e064      	b.n	800f7ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f000 fa08 	bl	800fb00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	699a      	ldr	r2, [r3, #24]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	699a      	ldr	r2, [r3, #24]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f70e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	6999      	ldr	r1, [r3, #24]
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	021a      	lsls	r2, r3, #8
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	430a      	orrs	r2, r1
 800f722:	619a      	str	r2, [r3, #24]
      break;
 800f724:	e043      	b.n	800f7ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68b9      	ldr	r1, [r7, #8]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 fa25 	bl	800fb7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	69da      	ldr	r2, [r3, #28]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f042 0208 	orr.w	r2, r2, #8
 800f740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	69da      	ldr	r2, [r3, #28]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f022 0204 	bic.w	r2, r2, #4
 800f750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	69d9      	ldr	r1, [r3, #28]
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	430a      	orrs	r2, r1
 800f762:	61da      	str	r2, [r3, #28]
      break;
 800f764:	e023      	b.n	800f7ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	68b9      	ldr	r1, [r7, #8]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 fa42 	bl	800fbf6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	69da      	ldr	r2, [r3, #28]
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	69da      	ldr	r2, [r3, #28]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	69d9      	ldr	r1, [r3, #28]
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	021a      	lsls	r2, r3, #8
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	430a      	orrs	r2, r1
 800f7a4:	61da      	str	r2, [r3, #28]
      break;
 800f7a6:	e002      	b.n	800f7ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800f7ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f7d4:	2b01      	cmp	r3, #1
 800f7d6:	d101      	bne.n	800f7dc <HAL_TIM_ConfigClockSource+0x1c>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	e0b4      	b.n	800f946 <HAL_TIM_ConfigClockSource+0x186>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2202      	movs	r2, #2
 800f7e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f7fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f814:	d03e      	beq.n	800f894 <HAL_TIM_ConfigClockSource+0xd4>
 800f816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f81a:	f200 8087 	bhi.w	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f822:	f000 8086 	beq.w	800f932 <HAL_TIM_ConfigClockSource+0x172>
 800f826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f82a:	d87f      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f82c:	2b70      	cmp	r3, #112	@ 0x70
 800f82e:	d01a      	beq.n	800f866 <HAL_TIM_ConfigClockSource+0xa6>
 800f830:	2b70      	cmp	r3, #112	@ 0x70
 800f832:	d87b      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f834:	2b60      	cmp	r3, #96	@ 0x60
 800f836:	d050      	beq.n	800f8da <HAL_TIM_ConfigClockSource+0x11a>
 800f838:	2b60      	cmp	r3, #96	@ 0x60
 800f83a:	d877      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f83c:	2b50      	cmp	r3, #80	@ 0x50
 800f83e:	d03c      	beq.n	800f8ba <HAL_TIM_ConfigClockSource+0xfa>
 800f840:	2b50      	cmp	r3, #80	@ 0x50
 800f842:	d873      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f844:	2b40      	cmp	r3, #64	@ 0x40
 800f846:	d058      	beq.n	800f8fa <HAL_TIM_ConfigClockSource+0x13a>
 800f848:	2b40      	cmp	r3, #64	@ 0x40
 800f84a:	d86f      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f84c:	2b30      	cmp	r3, #48	@ 0x30
 800f84e:	d064      	beq.n	800f91a <HAL_TIM_ConfigClockSource+0x15a>
 800f850:	2b30      	cmp	r3, #48	@ 0x30
 800f852:	d86b      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f854:	2b20      	cmp	r3, #32
 800f856:	d060      	beq.n	800f91a <HAL_TIM_ConfigClockSource+0x15a>
 800f858:	2b20      	cmp	r3, #32
 800f85a:	d867      	bhi.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d05c      	beq.n	800f91a <HAL_TIM_ConfigClockSource+0x15a>
 800f860:	2b10      	cmp	r3, #16
 800f862:	d05a      	beq.n	800f91a <HAL_TIM_ConfigClockSource+0x15a>
 800f864:	e062      	b.n	800f92c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f876:	f000 fa73 	bl	800fd60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	609a      	str	r2, [r3, #8]
      break;
 800f892:	e04f      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f8a4:	f000 fa5c 	bl	800fd60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	689a      	ldr	r2, [r3, #8]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f8b6:	609a      	str	r2, [r3, #8]
      break;
 800f8b8:	e03c      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	f000 f9d3 	bl	800fc72 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2150      	movs	r1, #80	@ 0x50
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 fa2a 	bl	800fd2c <TIM_ITRx_SetConfig>
      break;
 800f8d8:	e02c      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	f000 f9f1 	bl	800fcce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2160      	movs	r1, #96	@ 0x60
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 fa1a 	bl	800fd2c <TIM_ITRx_SetConfig>
      break;
 800f8f8:	e01c      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f906:	461a      	mov	r2, r3
 800f908:	f000 f9b3 	bl	800fc72 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2140      	movs	r1, #64	@ 0x40
 800f912:	4618      	mov	r0, r3
 800f914:	f000 fa0a 	bl	800fd2c <TIM_ITRx_SetConfig>
      break;
 800f918:	e00c      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4619      	mov	r1, r3
 800f924:	4610      	mov	r0, r2
 800f926:	f000 fa01 	bl	800fd2c <TIM_ITRx_SetConfig>
      break;
 800f92a:	e003      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f92c:	2301      	movs	r3, #1
 800f92e:	73fb      	strb	r3, [r7, #15]
      break;
 800f930:	e000      	b.n	800f934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f94e:	b480      	push	{r7}
 800f950:	b083      	sub	sp, #12
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f956:	bf00      	nop
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bc80      	pop	{r7}
 800f95e:	4770      	bx	lr

0800f960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bc80      	pop	{r7}
 800f970:	4770      	bx	lr

0800f972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f972:	b480      	push	{r7}
 800f974:	b083      	sub	sp, #12
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f97a:	bf00      	nop
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	bc80      	pop	{r7}
 800f982:	4770      	bx	lr

0800f984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	bc80      	pop	{r7}
 800f994:	4770      	bx	lr

0800f996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f996:	b480      	push	{r7}
 800f998:	b083      	sub	sp, #12
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f99e:	bf00      	nop
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bc80      	pop	{r7}
 800f9a6:	4770      	bx	lr

0800f9a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9be:	d00f      	beq.n	800f9e0 <TIM_Base_SetConfig+0x38>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a2b      	ldr	r2, [pc, #172]	@ (800fa70 <TIM_Base_SetConfig+0xc8>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d00b      	beq.n	800f9e0 <TIM_Base_SetConfig+0x38>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800fa74 <TIM_Base_SetConfig+0xcc>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d007      	beq.n	800f9e0 <TIM_Base_SetConfig+0x38>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a29      	ldr	r2, [pc, #164]	@ (800fa78 <TIM_Base_SetConfig+0xd0>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d003      	beq.n	800f9e0 <TIM_Base_SetConfig+0x38>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a28      	ldr	r2, [pc, #160]	@ (800fa7c <TIM_Base_SetConfig+0xd4>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d108      	bne.n	800f9f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	68fa      	ldr	r2, [r7, #12]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f9f8:	d017      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800fa70 <TIM_Base_SetConfig+0xc8>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d013      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a1b      	ldr	r2, [pc, #108]	@ (800fa74 <TIM_Base_SetConfig+0xcc>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d00f      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	4a1a      	ldr	r2, [pc, #104]	@ (800fa78 <TIM_Base_SetConfig+0xd0>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d00b      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a19      	ldr	r2, [pc, #100]	@ (800fa7c <TIM_Base_SetConfig+0xd4>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d007      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a18      	ldr	r2, [pc, #96]	@ (800fa80 <TIM_Base_SetConfig+0xd8>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d003      	beq.n	800fa2a <TIM_Base_SetConfig+0x82>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a17      	ldr	r2, [pc, #92]	@ (800fa84 <TIM_Base_SetConfig+0xdc>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d108      	bne.n	800fa3c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	689a      	ldr	r2, [r3, #8]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	681a      	ldr	r2, [r3, #0]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	615a      	str	r2, [r3, #20]
}
 800fa66:	bf00      	nop
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bc80      	pop	{r7}
 800fa6e:	4770      	bx	lr
 800fa70:	40000400 	.word	0x40000400
 800fa74:	40000800 	.word	0x40000800
 800fa78:	40000c00 	.word	0x40000c00
 800fa7c:	40010800 	.word	0x40010800
 800fa80:	40010c00 	.word	0x40010c00
 800fa84:	40011000 	.word	0x40011000

0800fa88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a1b      	ldr	r3, [r3, #32]
 800fa96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	f023 0201 	bic.w	r2, r3, #1
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f023 0303 	bic.w	r3, r3, #3
 800fabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	f023 0302 	bic.w	r3, r3, #2
 800fad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	4313      	orrs	r3, r2
 800fada:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	693a      	ldr	r2, [r7, #16]
 800fae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	685a      	ldr	r2, [r3, #4]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	697a      	ldr	r2, [r7, #20]
 800faf4:	621a      	str	r2, [r3, #32]
}
 800faf6:	bf00      	nop
 800faf8:	371c      	adds	r7, #28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bc80      	pop	{r7}
 800fafe:	4770      	bx	lr

0800fb00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b087      	sub	sp, #28
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a1b      	ldr	r3, [r3, #32]
 800fb0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6a1b      	ldr	r3, [r3, #32]
 800fb14:	f023 0210 	bic.w	r2, r3, #16
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	699b      	ldr	r3, [r3, #24]
 800fb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	021b      	lsls	r3, r3, #8
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f023 0320 	bic.w	r3, r3, #32
 800fb4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	011b      	lsls	r3, r3, #4
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	621a      	str	r2, [r3, #32]
}
 800fb72:	bf00      	nop
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bc80      	pop	{r7}
 800fb7a:	4770      	bx	lr

0800fb7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b087      	sub	sp, #28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a1b      	ldr	r3, [r3, #32]
 800fb90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f023 0303 	bic.w	r3, r3, #3
 800fbb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fbc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	021b      	lsls	r3, r3, #8
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	685a      	ldr	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	621a      	str	r2, [r3, #32]
}
 800fbec:	bf00      	nop
 800fbee:	371c      	adds	r7, #28
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bc80      	pop	{r7}
 800fbf4:	4770      	bx	lr

0800fbf6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbf6:	b480      	push	{r7}
 800fbf8:	b087      	sub	sp, #28
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
 800fbfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6a1b      	ldr	r3, [r3, #32]
 800fc04:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	69db      	ldr	r3, [r3, #28]
 800fc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fc2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	021b      	lsls	r3, r3, #8
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	4313      	orrs	r3, r2
 800fc38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fc40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	031b      	lsls	r3, r3, #12
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	685a      	ldr	r2, [r3, #4]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	697a      	ldr	r2, [r7, #20]
 800fc66:	621a      	str	r2, [r3, #32]
}
 800fc68:	bf00      	nop
 800fc6a:	371c      	adds	r7, #28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bc80      	pop	{r7}
 800fc70:	4770      	bx	lr

0800fc72 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc72:	b480      	push	{r7}
 800fc74:	b087      	sub	sp, #28
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	60f8      	str	r0, [r7, #12]
 800fc7a:	60b9      	str	r1, [r7, #8]
 800fc7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	f023 0201 	bic.w	r2, r3, #1
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	011b      	lsls	r3, r3, #4
 800fca2:	693a      	ldr	r2, [r7, #16]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f023 030a 	bic.w	r3, r3, #10
 800fcae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	621a      	str	r2, [r3, #32]
}
 800fcc4:	bf00      	nop
 800fcc6:	371c      	adds	r7, #28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bc80      	pop	{r7}
 800fccc:	4770      	bx	lr

0800fcce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcce:	b480      	push	{r7}
 800fcd0:	b087      	sub	sp, #28
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	60f8      	str	r0, [r7, #12]
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	f023 0210 	bic.w	r2, r3, #16
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fcf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	031b      	lsls	r3, r3, #12
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	4313      	orrs	r3, r2
 800fd02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fd0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	011b      	lsls	r3, r3, #4
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	693a      	ldr	r2, [r7, #16]
 800fd1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	697a      	ldr	r2, [r7, #20]
 800fd20:	621a      	str	r2, [r3, #32]
}
 800fd22:	bf00      	nop
 800fd24:	371c      	adds	r7, #28
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bc80      	pop	{r7}
 800fd2a:	4770      	bx	lr

0800fd2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd44:	683a      	ldr	r2, [r7, #0]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	f043 0307 	orr.w	r3, r3, #7
 800fd4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	609a      	str	r2, [r3, #8]
}
 800fd56:	bf00      	nop
 800fd58:	3714      	adds	r7, #20
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bc80      	pop	{r7}
 800fd5e:	4770      	bx	lr

0800fd60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b087      	sub	sp, #28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fd7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	021a      	lsls	r2, r3, #8
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	431a      	orrs	r2, r3
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	4313      	orrs	r3, r2
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	609a      	str	r2, [r3, #8]
}
 800fd94:	bf00      	nop
 800fd96:	371c      	adds	r7, #28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bc80      	pop	{r7}
 800fd9c:	4770      	bx	lr

0800fd9e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b087      	sub	sp, #28
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	60f8      	str	r0, [r7, #12]
 800fda6:	60b9      	str	r1, [r7, #8]
 800fda8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	f003 031f 	and.w	r3, r3, #31
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	fa02 f303 	lsl.w	r3, r2, r3
 800fdb6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6a1a      	ldr	r2, [r3, #32]
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	43db      	mvns	r3, r3
 800fdc0:	401a      	ands	r2, r3
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6a1a      	ldr	r2, [r3, #32]
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	f003 031f 	and.w	r3, r3, #31
 800fdd0:	6879      	ldr	r1, [r7, #4]
 800fdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800fdd6:	431a      	orrs	r2, r3
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	621a      	str	r2, [r3, #32]
}
 800fddc:	bf00      	nop
 800fdde:	371c      	adds	r7, #28
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bc80      	pop	{r7}
 800fde4:	4770      	bx	lr
	...

0800fde8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b085      	sub	sp, #20
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d101      	bne.n	800fe00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e046      	b.n	800fe8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	689b      	ldr	r3, [r3, #8]
 800fe1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe42:	d00e      	beq.n	800fe62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4a13      	ldr	r2, [pc, #76]	@ (800fe98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d009      	beq.n	800fe62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4a12      	ldr	r2, [pc, #72]	@ (800fe9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d004      	beq.n	800fe62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a10      	ldr	r2, [pc, #64]	@ (800fea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d10c      	bne.n	800fe7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fe68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	4313      	orrs	r3, r2
 800fe72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3714      	adds	r7, #20
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bc80      	pop	{r7}
 800fe96:	4770      	bx	lr
 800fe98:	40000400 	.word	0x40000400
 800fe9c:	40000800 	.word	0x40000800
 800fea0:	40010800 	.word	0x40010800

0800fea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d101      	bne.n	800feb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	e042      	b.n	800ff3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7f2 fa9a 	bl	8002404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2224      	movs	r2, #36	@ 0x24
 800fed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68da      	ldr	r2, [r3, #12]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f91d 	bl	8010128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	691a      	ldr	r2, [r3, #16]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fefc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	695a      	ldr	r2, [r3, #20]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68da      	ldr	r2, [r3, #12]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ff1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2220      	movs	r2, #32
 800ff28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2220      	movs	r2, #32
 800ff30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08a      	sub	sp, #40	@ 0x28
 800ff48:	af02      	add	r7, sp, #8
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	4613      	mov	r3, r2
 800ff52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ff54:	2300      	movs	r3, #0
 800ff56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	2b20      	cmp	r3, #32
 800ff62:	d16d      	bne.n	8010040 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d002      	beq.n	800ff70 <HAL_UART_Transmit+0x2c>
 800ff6a:	88fb      	ldrh	r3, [r7, #6]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ff70:	2301      	movs	r3, #1
 800ff72:	e066      	b.n	8010042 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2200      	movs	r2, #0
 800ff78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2221      	movs	r2, #33	@ 0x21
 800ff7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff82:	f7f9 ffc1 	bl	8009f08 <HAL_GetTick>
 800ff86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	88fa      	ldrh	r2, [r7, #6]
 800ff8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	88fa      	ldrh	r2, [r7, #6]
 800ff92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689b      	ldr	r3, [r3, #8]
 800ff98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff9c:	d108      	bne.n	800ffb0 <HAL_UART_Transmit+0x6c>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d104      	bne.n	800ffb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	61bb      	str	r3, [r7, #24]
 800ffae:	e003      	b.n	800ffb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ffb8:	e02a      	b.n	8010010 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	2180      	movs	r1, #128	@ 0x80
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f000 f840 	bl	801004a <UART_WaitOnFlagUntilTimeout>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d001      	beq.n	800ffd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	e036      	b.n	8010042 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d10b      	bne.n	800fff2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ffda:	69bb      	ldr	r3, [r7, #24]
 800ffdc:	881b      	ldrh	r3, [r3, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ffe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	3302      	adds	r3, #2
 800ffee:	61bb      	str	r3, [r7, #24]
 800fff0:	e007      	b.n	8010002 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	781a      	ldrb	r2, [r3, #0]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	3301      	adds	r3, #1
 8010000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010006:	b29b      	uxth	r3, r3
 8010008:	3b01      	subs	r3, #1
 801000a:	b29a      	uxth	r2, r3
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010014:	b29b      	uxth	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1cf      	bne.n	800ffba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	9300      	str	r3, [sp, #0]
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	2200      	movs	r2, #0
 8010022:	2140      	movs	r1, #64	@ 0x40
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 f810 	bl	801004a <UART_WaitOnFlagUntilTimeout>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8010030:	2303      	movs	r3, #3
 8010032:	e006      	b.n	8010042 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2220      	movs	r2, #32
 8010038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	e000      	b.n	8010042 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8010040:	2302      	movs	r3, #2
  }
}
 8010042:	4618      	mov	r0, r3
 8010044:	3720      	adds	r7, #32
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801004a:	b580      	push	{r7, lr}
 801004c:	b090      	sub	sp, #64	@ 0x40
 801004e:	af00      	add	r7, sp, #0
 8010050:	60f8      	str	r0, [r7, #12]
 8010052:	60b9      	str	r1, [r7, #8]
 8010054:	603b      	str	r3, [r7, #0]
 8010056:	4613      	mov	r3, r2
 8010058:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801005a:	e050      	b.n	80100fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801005c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801005e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010062:	d04c      	beq.n	80100fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010066:	2b00      	cmp	r3, #0
 8010068:	d007      	beq.n	801007a <UART_WaitOnFlagUntilTimeout+0x30>
 801006a:	f7f9 ff4d 	bl	8009f08 <HAL_GetTick>
 801006e:	4602      	mov	r2, r0
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010076:	429a      	cmp	r2, r3
 8010078:	d241      	bcs.n	80100fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	330c      	adds	r3, #12
 8010080:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010084:	e853 3f00 	ldrex	r3, [r3]
 8010088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801008a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8010090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	330c      	adds	r3, #12
 8010098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801009a:	637a      	str	r2, [r7, #52]	@ 0x34
 801009c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801009e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80100a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100a2:	e841 2300 	strex	r3, r2, [r1]
 80100a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80100a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d1e5      	bne.n	801007a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	3314      	adds	r3, #20
 80100b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	e853 3f00 	ldrex	r3, [r3]
 80100bc:	613b      	str	r3, [r7, #16]
   return(result);
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	f023 0301 	bic.w	r3, r3, #1
 80100c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	3314      	adds	r3, #20
 80100cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100ce:	623a      	str	r2, [r7, #32]
 80100d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100d2:	69f9      	ldr	r1, [r7, #28]
 80100d4:	6a3a      	ldr	r2, [r7, #32]
 80100d6:	e841 2300 	strex	r3, r2, [r1]
 80100da:	61bb      	str	r3, [r7, #24]
   return(result);
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d1e5      	bne.n	80100ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2220      	movs	r2, #32
 80100e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2220      	movs	r2, #32
 80100ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80100fa:	2303      	movs	r3, #3
 80100fc:	e00f      	b.n	801011e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	4013      	ands	r3, r2
 8010108:	68ba      	ldr	r2, [r7, #8]
 801010a:	429a      	cmp	r2, r3
 801010c:	bf0c      	ite	eq
 801010e:	2301      	moveq	r3, #1
 8010110:	2300      	movne	r3, #0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	461a      	mov	r2, r3
 8010116:	79fb      	ldrb	r3, [r7, #7]
 8010118:	429a      	cmp	r2, r3
 801011a:	d09f      	beq.n	801005c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801011c:	2300      	movs	r3, #0
}
 801011e:	4618      	mov	r0, r3
 8010120:	3740      	adds	r7, #64	@ 0x40
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
	...

08010128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	68da      	ldr	r2, [r3, #12]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	430a      	orrs	r2, r1
 8010144:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	689a      	ldr	r2, [r3, #8]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	691b      	ldr	r3, [r3, #16]
 801014e:	431a      	orrs	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	695b      	ldr	r3, [r3, #20]
 8010154:	431a      	orrs	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	69db      	ldr	r3, [r3, #28]
 801015a:	4313      	orrs	r3, r2
 801015c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8010168:	f023 030c 	bic.w	r3, r3, #12
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	6812      	ldr	r2, [r2, #0]
 8010170:	68b9      	ldr	r1, [r7, #8]
 8010172:	430b      	orrs	r3, r1
 8010174:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	695b      	ldr	r3, [r3, #20]
 801017c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	699a      	ldr	r2, [r3, #24]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	430a      	orrs	r2, r1
 801018a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a55      	ldr	r2, [pc, #340]	@ (80102e8 <UART_SetConfig+0x1c0>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d103      	bne.n	801019e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8010196:	f7fe fbab 	bl	800e8f0 <HAL_RCC_GetPCLK2Freq>
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	e002      	b.n	80101a4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 801019e:	f7fe fb93 	bl	800e8c8 <HAL_RCC_GetPCLK1Freq>
 80101a2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	69db      	ldr	r3, [r3, #28]
 80101a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101ac:	d14c      	bne.n	8010248 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	4613      	mov	r3, r2
 80101b2:	009b      	lsls	r3, r3, #2
 80101b4:	4413      	add	r3, r2
 80101b6:	009a      	lsls	r2, r3, #2
 80101b8:	441a      	add	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c4:	4a49      	ldr	r2, [pc, #292]	@ (80102ec <UART_SetConfig+0x1c4>)
 80101c6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ca:	095b      	lsrs	r3, r3, #5
 80101cc:	0119      	lsls	r1, r3, #4
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	4613      	mov	r3, r2
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	4413      	add	r3, r2
 80101d6:	009a      	lsls	r2, r3, #2
 80101d8:	441a      	add	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80101e4:	4b41      	ldr	r3, [pc, #260]	@ (80102ec <UART_SetConfig+0x1c4>)
 80101e6:	fba3 0302 	umull	r0, r3, r3, r2
 80101ea:	095b      	lsrs	r3, r3, #5
 80101ec:	2064      	movs	r0, #100	@ 0x64
 80101ee:	fb00 f303 	mul.w	r3, r0, r3
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	00db      	lsls	r3, r3, #3
 80101f6:	3332      	adds	r3, #50	@ 0x32
 80101f8:	4a3c      	ldr	r2, [pc, #240]	@ (80102ec <UART_SetConfig+0x1c4>)
 80101fa:	fba2 2303 	umull	r2, r3, r2, r3
 80101fe:	095b      	lsrs	r3, r3, #5
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010206:	4419      	add	r1, r3
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	009a      	lsls	r2, r3, #2
 8010212:	441a      	add	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	fbb2 f2f3 	udiv	r2, r2, r3
 801021e:	4b33      	ldr	r3, [pc, #204]	@ (80102ec <UART_SetConfig+0x1c4>)
 8010220:	fba3 0302 	umull	r0, r3, r3, r2
 8010224:	095b      	lsrs	r3, r3, #5
 8010226:	2064      	movs	r0, #100	@ 0x64
 8010228:	fb00 f303 	mul.w	r3, r0, r3
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	00db      	lsls	r3, r3, #3
 8010230:	3332      	adds	r3, #50	@ 0x32
 8010232:	4a2e      	ldr	r2, [pc, #184]	@ (80102ec <UART_SetConfig+0x1c4>)
 8010234:	fba2 2303 	umull	r2, r3, r2, r3
 8010238:	095b      	lsrs	r3, r3, #5
 801023a:	f003 0207 	and.w	r2, r3, #7
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	440a      	add	r2, r1
 8010244:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010246:	e04a      	b.n	80102de <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	4613      	mov	r3, r2
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	009a      	lsls	r2, r3, #2
 8010252:	441a      	add	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	fbb2 f3f3 	udiv	r3, r2, r3
 801025e:	4a23      	ldr	r2, [pc, #140]	@ (80102ec <UART_SetConfig+0x1c4>)
 8010260:	fba2 2303 	umull	r2, r3, r2, r3
 8010264:	095b      	lsrs	r3, r3, #5
 8010266:	0119      	lsls	r1, r3, #4
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	4613      	mov	r3, r2
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	4413      	add	r3, r2
 8010270:	009a      	lsls	r2, r3, #2
 8010272:	441a      	add	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	009b      	lsls	r3, r3, #2
 801027a:	fbb2 f2f3 	udiv	r2, r2, r3
 801027e:	4b1b      	ldr	r3, [pc, #108]	@ (80102ec <UART_SetConfig+0x1c4>)
 8010280:	fba3 0302 	umull	r0, r3, r3, r2
 8010284:	095b      	lsrs	r3, r3, #5
 8010286:	2064      	movs	r0, #100	@ 0x64
 8010288:	fb00 f303 	mul.w	r3, r0, r3
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	011b      	lsls	r3, r3, #4
 8010290:	3332      	adds	r3, #50	@ 0x32
 8010292:	4a16      	ldr	r2, [pc, #88]	@ (80102ec <UART_SetConfig+0x1c4>)
 8010294:	fba2 2303 	umull	r2, r3, r2, r3
 8010298:	095b      	lsrs	r3, r3, #5
 801029a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801029e:	4419      	add	r1, r3
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	4613      	mov	r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	4413      	add	r3, r2
 80102a8:	009a      	lsls	r2, r3, #2
 80102aa:	441a      	add	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80102b6:	4b0d      	ldr	r3, [pc, #52]	@ (80102ec <UART_SetConfig+0x1c4>)
 80102b8:	fba3 0302 	umull	r0, r3, r3, r2
 80102bc:	095b      	lsrs	r3, r3, #5
 80102be:	2064      	movs	r0, #100	@ 0x64
 80102c0:	fb00 f303 	mul.w	r3, r0, r3
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	011b      	lsls	r3, r3, #4
 80102c8:	3332      	adds	r3, #50	@ 0x32
 80102ca:	4a08      	ldr	r2, [pc, #32]	@ (80102ec <UART_SetConfig+0x1c4>)
 80102cc:	fba2 2303 	umull	r2, r3, r2, r3
 80102d0:	095b      	lsrs	r3, r3, #5
 80102d2:	f003 020f 	and.w	r2, r3, #15
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	440a      	add	r2, r1
 80102dc:	609a      	str	r2, [r3, #8]
}
 80102de:	bf00      	nop
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	40013800 	.word	0x40013800
 80102ec:	51eb851f 	.word	0x51eb851f

080102f0 <__cvt>:
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f6:	461d      	mov	r5, r3
 80102f8:	bfbb      	ittet	lt
 80102fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80102fe:	461d      	movlt	r5, r3
 8010300:	2300      	movge	r3, #0
 8010302:	232d      	movlt	r3, #45	@ 0x2d
 8010304:	b088      	sub	sp, #32
 8010306:	4614      	mov	r4, r2
 8010308:	bfb8      	it	lt
 801030a:	4614      	movlt	r4, r2
 801030c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801030e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010310:	7013      	strb	r3, [r2, #0]
 8010312:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010314:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8010318:	f023 0820 	bic.w	r8, r3, #32
 801031c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010320:	d005      	beq.n	801032e <__cvt+0x3e>
 8010322:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010326:	d100      	bne.n	801032a <__cvt+0x3a>
 8010328:	3601      	adds	r6, #1
 801032a:	2302      	movs	r3, #2
 801032c:	e000      	b.n	8010330 <__cvt+0x40>
 801032e:	2303      	movs	r3, #3
 8010330:	aa07      	add	r2, sp, #28
 8010332:	9204      	str	r2, [sp, #16]
 8010334:	aa06      	add	r2, sp, #24
 8010336:	e9cd a202 	strd	sl, r2, [sp, #8]
 801033a:	e9cd 3600 	strd	r3, r6, [sp]
 801033e:	4622      	mov	r2, r4
 8010340:	462b      	mov	r3, r5
 8010342:	f001 f861 	bl	8011408 <_dtoa_r>
 8010346:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801034a:	4607      	mov	r7, r0
 801034c:	d119      	bne.n	8010382 <__cvt+0x92>
 801034e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010350:	07db      	lsls	r3, r3, #31
 8010352:	d50e      	bpl.n	8010372 <__cvt+0x82>
 8010354:	eb00 0906 	add.w	r9, r0, r6
 8010358:	2200      	movs	r2, #0
 801035a:	2300      	movs	r3, #0
 801035c:	4620      	mov	r0, r4
 801035e:	4629      	mov	r1, r5
 8010360:	f7f0 fb3a 	bl	80009d8 <__aeabi_dcmpeq>
 8010364:	b108      	cbz	r0, 801036a <__cvt+0x7a>
 8010366:	f8cd 901c 	str.w	r9, [sp, #28]
 801036a:	2230      	movs	r2, #48	@ 0x30
 801036c:	9b07      	ldr	r3, [sp, #28]
 801036e:	454b      	cmp	r3, r9
 8010370:	d31e      	bcc.n	80103b0 <__cvt+0xc0>
 8010372:	4638      	mov	r0, r7
 8010374:	9b07      	ldr	r3, [sp, #28]
 8010376:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010378:	1bdb      	subs	r3, r3, r7
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	b008      	add	sp, #32
 801037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010382:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010386:	eb00 0906 	add.w	r9, r0, r6
 801038a:	d1e5      	bne.n	8010358 <__cvt+0x68>
 801038c:	7803      	ldrb	r3, [r0, #0]
 801038e:	2b30      	cmp	r3, #48	@ 0x30
 8010390:	d10a      	bne.n	80103a8 <__cvt+0xb8>
 8010392:	2200      	movs	r2, #0
 8010394:	2300      	movs	r3, #0
 8010396:	4620      	mov	r0, r4
 8010398:	4629      	mov	r1, r5
 801039a:	f7f0 fb1d 	bl	80009d8 <__aeabi_dcmpeq>
 801039e:	b918      	cbnz	r0, 80103a8 <__cvt+0xb8>
 80103a0:	f1c6 0601 	rsb	r6, r6, #1
 80103a4:	f8ca 6000 	str.w	r6, [sl]
 80103a8:	f8da 3000 	ldr.w	r3, [sl]
 80103ac:	4499      	add	r9, r3
 80103ae:	e7d3      	b.n	8010358 <__cvt+0x68>
 80103b0:	1c59      	adds	r1, r3, #1
 80103b2:	9107      	str	r1, [sp, #28]
 80103b4:	701a      	strb	r2, [r3, #0]
 80103b6:	e7d9      	b.n	801036c <__cvt+0x7c>

080103b8 <__exponent>:
 80103b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103ba:	2900      	cmp	r1, #0
 80103bc:	bfb6      	itet	lt
 80103be:	232d      	movlt	r3, #45	@ 0x2d
 80103c0:	232b      	movge	r3, #43	@ 0x2b
 80103c2:	4249      	neglt	r1, r1
 80103c4:	2909      	cmp	r1, #9
 80103c6:	7002      	strb	r2, [r0, #0]
 80103c8:	7043      	strb	r3, [r0, #1]
 80103ca:	dd29      	ble.n	8010420 <__exponent+0x68>
 80103cc:	f10d 0307 	add.w	r3, sp, #7
 80103d0:	461d      	mov	r5, r3
 80103d2:	270a      	movs	r7, #10
 80103d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80103d8:	461a      	mov	r2, r3
 80103da:	fb07 1416 	mls	r4, r7, r6, r1
 80103de:	3430      	adds	r4, #48	@ 0x30
 80103e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80103e4:	460c      	mov	r4, r1
 80103e6:	2c63      	cmp	r4, #99	@ 0x63
 80103e8:	4631      	mov	r1, r6
 80103ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80103ee:	dcf1      	bgt.n	80103d4 <__exponent+0x1c>
 80103f0:	3130      	adds	r1, #48	@ 0x30
 80103f2:	1e94      	subs	r4, r2, #2
 80103f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80103f8:	4623      	mov	r3, r4
 80103fa:	1c41      	adds	r1, r0, #1
 80103fc:	42ab      	cmp	r3, r5
 80103fe:	d30a      	bcc.n	8010416 <__exponent+0x5e>
 8010400:	f10d 0309 	add.w	r3, sp, #9
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	42ac      	cmp	r4, r5
 8010408:	bf88      	it	hi
 801040a:	2300      	movhi	r3, #0
 801040c:	3302      	adds	r3, #2
 801040e:	4403      	add	r3, r0
 8010410:	1a18      	subs	r0, r3, r0
 8010412:	b003      	add	sp, #12
 8010414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010416:	f813 6b01 	ldrb.w	r6, [r3], #1
 801041a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801041e:	e7ed      	b.n	80103fc <__exponent+0x44>
 8010420:	2330      	movs	r3, #48	@ 0x30
 8010422:	3130      	adds	r1, #48	@ 0x30
 8010424:	7083      	strb	r3, [r0, #2]
 8010426:	70c1      	strb	r1, [r0, #3]
 8010428:	1d03      	adds	r3, r0, #4
 801042a:	e7f1      	b.n	8010410 <__exponent+0x58>

0801042c <_printf_float>:
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	b091      	sub	sp, #68	@ 0x44
 8010432:	460c      	mov	r4, r1
 8010434:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8010438:	4616      	mov	r6, r2
 801043a:	461f      	mov	r7, r3
 801043c:	4605      	mov	r5, r0
 801043e:	f000 fed5 	bl	80111ec <_localeconv_r>
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	4618      	mov	r0, r3
 8010446:	9308      	str	r3, [sp, #32]
 8010448:	f7ef fe9a 	bl	8000180 <strlen>
 801044c:	2300      	movs	r3, #0
 801044e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010450:	f8d8 3000 	ldr.w	r3, [r8]
 8010454:	9009      	str	r0, [sp, #36]	@ 0x24
 8010456:	3307      	adds	r3, #7
 8010458:	f023 0307 	bic.w	r3, r3, #7
 801045c:	f103 0208 	add.w	r2, r3, #8
 8010460:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010464:	f8d4 b000 	ldr.w	fp, [r4]
 8010468:	f8c8 2000 	str.w	r2, [r8]
 801046c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010470:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010476:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801047a:	f04f 32ff 	mov.w	r2, #4294967295
 801047e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010482:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010486:	4b9c      	ldr	r3, [pc, #624]	@ (80106f8 <_printf_float+0x2cc>)
 8010488:	f7f0 fad8 	bl	8000a3c <__aeabi_dcmpun>
 801048c:	bb70      	cbnz	r0, 80104ec <_printf_float+0xc0>
 801048e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010492:	f04f 32ff 	mov.w	r2, #4294967295
 8010496:	4b98      	ldr	r3, [pc, #608]	@ (80106f8 <_printf_float+0x2cc>)
 8010498:	f7f0 fab2 	bl	8000a00 <__aeabi_dcmple>
 801049c:	bb30      	cbnz	r0, 80104ec <_printf_float+0xc0>
 801049e:	2200      	movs	r2, #0
 80104a0:	2300      	movs	r3, #0
 80104a2:	4640      	mov	r0, r8
 80104a4:	4649      	mov	r1, r9
 80104a6:	f7f0 faa1 	bl	80009ec <__aeabi_dcmplt>
 80104aa:	b110      	cbz	r0, 80104b2 <_printf_float+0x86>
 80104ac:	232d      	movs	r3, #45	@ 0x2d
 80104ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104b2:	4a92      	ldr	r2, [pc, #584]	@ (80106fc <_printf_float+0x2d0>)
 80104b4:	4b92      	ldr	r3, [pc, #584]	@ (8010700 <_printf_float+0x2d4>)
 80104b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80104ba:	bf94      	ite	ls
 80104bc:	4690      	movls	r8, r2
 80104be:	4698      	movhi	r8, r3
 80104c0:	2303      	movs	r3, #3
 80104c2:	f04f 0900 	mov.w	r9, #0
 80104c6:	6123      	str	r3, [r4, #16]
 80104c8:	f02b 0304 	bic.w	r3, fp, #4
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	4633      	mov	r3, r6
 80104d0:	4621      	mov	r1, r4
 80104d2:	4628      	mov	r0, r5
 80104d4:	9700      	str	r7, [sp, #0]
 80104d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80104d8:	f000 f9d4 	bl	8010884 <_printf_common>
 80104dc:	3001      	adds	r0, #1
 80104de:	f040 8090 	bne.w	8010602 <_printf_float+0x1d6>
 80104e2:	f04f 30ff 	mov.w	r0, #4294967295
 80104e6:	b011      	add	sp, #68	@ 0x44
 80104e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	4642      	mov	r2, r8
 80104ee:	464b      	mov	r3, r9
 80104f0:	4640      	mov	r0, r8
 80104f2:	4649      	mov	r1, r9
 80104f4:	f7f0 faa2 	bl	8000a3c <__aeabi_dcmpun>
 80104f8:	b148      	cbz	r0, 801050e <_printf_float+0xe2>
 80104fa:	464b      	mov	r3, r9
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfb8      	it	lt
 8010500:	232d      	movlt	r3, #45	@ 0x2d
 8010502:	4a80      	ldr	r2, [pc, #512]	@ (8010704 <_printf_float+0x2d8>)
 8010504:	bfb8      	it	lt
 8010506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801050a:	4b7f      	ldr	r3, [pc, #508]	@ (8010708 <_printf_float+0x2dc>)
 801050c:	e7d3      	b.n	80104b6 <_printf_float+0x8a>
 801050e:	6863      	ldr	r3, [r4, #4]
 8010510:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8010514:	1c5a      	adds	r2, r3, #1
 8010516:	d13f      	bne.n	8010598 <_printf_float+0x16c>
 8010518:	2306      	movs	r3, #6
 801051a:	6063      	str	r3, [r4, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	9206      	str	r2, [sp, #24]
 8010526:	aa0e      	add	r2, sp, #56	@ 0x38
 8010528:	e9cd a204 	strd	sl, r2, [sp, #16]
 801052c:	aa0d      	add	r2, sp, #52	@ 0x34
 801052e:	9203      	str	r2, [sp, #12]
 8010530:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8010534:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010538:	6863      	ldr	r3, [r4, #4]
 801053a:	4642      	mov	r2, r8
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	4628      	mov	r0, r5
 8010540:	464b      	mov	r3, r9
 8010542:	910a      	str	r1, [sp, #40]	@ 0x28
 8010544:	f7ff fed4 	bl	80102f0 <__cvt>
 8010548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801054a:	4680      	mov	r8, r0
 801054c:	2947      	cmp	r1, #71	@ 0x47
 801054e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010550:	d128      	bne.n	80105a4 <_printf_float+0x178>
 8010552:	1cc8      	adds	r0, r1, #3
 8010554:	db02      	blt.n	801055c <_printf_float+0x130>
 8010556:	6863      	ldr	r3, [r4, #4]
 8010558:	4299      	cmp	r1, r3
 801055a:	dd40      	ble.n	80105de <_printf_float+0x1b2>
 801055c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010560:	fa5f fa8a 	uxtb.w	sl, sl
 8010564:	4652      	mov	r2, sl
 8010566:	3901      	subs	r1, #1
 8010568:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801056c:	910d      	str	r1, [sp, #52]	@ 0x34
 801056e:	f7ff ff23 	bl	80103b8 <__exponent>
 8010572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010574:	4681      	mov	r9, r0
 8010576:	1813      	adds	r3, r2, r0
 8010578:	2a01      	cmp	r2, #1
 801057a:	6123      	str	r3, [r4, #16]
 801057c:	dc02      	bgt.n	8010584 <_printf_float+0x158>
 801057e:	6822      	ldr	r2, [r4, #0]
 8010580:	07d2      	lsls	r2, r2, #31
 8010582:	d501      	bpl.n	8010588 <_printf_float+0x15c>
 8010584:	3301      	adds	r3, #1
 8010586:	6123      	str	r3, [r4, #16]
 8010588:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801058c:	2b00      	cmp	r3, #0
 801058e:	d09e      	beq.n	80104ce <_printf_float+0xa2>
 8010590:	232d      	movs	r3, #45	@ 0x2d
 8010592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010596:	e79a      	b.n	80104ce <_printf_float+0xa2>
 8010598:	2947      	cmp	r1, #71	@ 0x47
 801059a:	d1bf      	bne.n	801051c <_printf_float+0xf0>
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1bd      	bne.n	801051c <_printf_float+0xf0>
 80105a0:	2301      	movs	r3, #1
 80105a2:	e7ba      	b.n	801051a <_printf_float+0xee>
 80105a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80105a8:	d9dc      	bls.n	8010564 <_printf_float+0x138>
 80105aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80105ae:	d118      	bne.n	80105e2 <_printf_float+0x1b6>
 80105b0:	2900      	cmp	r1, #0
 80105b2:	6863      	ldr	r3, [r4, #4]
 80105b4:	dd0b      	ble.n	80105ce <_printf_float+0x1a2>
 80105b6:	6121      	str	r1, [r4, #16]
 80105b8:	b913      	cbnz	r3, 80105c0 <_printf_float+0x194>
 80105ba:	6822      	ldr	r2, [r4, #0]
 80105bc:	07d0      	lsls	r0, r2, #31
 80105be:	d502      	bpl.n	80105c6 <_printf_float+0x19a>
 80105c0:	3301      	adds	r3, #1
 80105c2:	440b      	add	r3, r1
 80105c4:	6123      	str	r3, [r4, #16]
 80105c6:	f04f 0900 	mov.w	r9, #0
 80105ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80105cc:	e7dc      	b.n	8010588 <_printf_float+0x15c>
 80105ce:	b913      	cbnz	r3, 80105d6 <_printf_float+0x1aa>
 80105d0:	6822      	ldr	r2, [r4, #0]
 80105d2:	07d2      	lsls	r2, r2, #31
 80105d4:	d501      	bpl.n	80105da <_printf_float+0x1ae>
 80105d6:	3302      	adds	r3, #2
 80105d8:	e7f4      	b.n	80105c4 <_printf_float+0x198>
 80105da:	2301      	movs	r3, #1
 80105dc:	e7f2      	b.n	80105c4 <_printf_float+0x198>
 80105de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80105e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105e4:	4299      	cmp	r1, r3
 80105e6:	db05      	blt.n	80105f4 <_printf_float+0x1c8>
 80105e8:	6823      	ldr	r3, [r4, #0]
 80105ea:	6121      	str	r1, [r4, #16]
 80105ec:	07d8      	lsls	r0, r3, #31
 80105ee:	d5ea      	bpl.n	80105c6 <_printf_float+0x19a>
 80105f0:	1c4b      	adds	r3, r1, #1
 80105f2:	e7e7      	b.n	80105c4 <_printf_float+0x198>
 80105f4:	2900      	cmp	r1, #0
 80105f6:	bfcc      	ite	gt
 80105f8:	2201      	movgt	r2, #1
 80105fa:	f1c1 0202 	rsble	r2, r1, #2
 80105fe:	4413      	add	r3, r2
 8010600:	e7e0      	b.n	80105c4 <_printf_float+0x198>
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	055a      	lsls	r2, r3, #21
 8010606:	d407      	bmi.n	8010618 <_printf_float+0x1ec>
 8010608:	6923      	ldr	r3, [r4, #16]
 801060a:	4642      	mov	r2, r8
 801060c:	4631      	mov	r1, r6
 801060e:	4628      	mov	r0, r5
 8010610:	47b8      	blx	r7
 8010612:	3001      	adds	r0, #1
 8010614:	d12b      	bne.n	801066e <_printf_float+0x242>
 8010616:	e764      	b.n	80104e2 <_printf_float+0xb6>
 8010618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801061c:	f240 80dc 	bls.w	80107d8 <_printf_float+0x3ac>
 8010620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010624:	2200      	movs	r2, #0
 8010626:	2300      	movs	r3, #0
 8010628:	f7f0 f9d6 	bl	80009d8 <__aeabi_dcmpeq>
 801062c:	2800      	cmp	r0, #0
 801062e:	d033      	beq.n	8010698 <_printf_float+0x26c>
 8010630:	2301      	movs	r3, #1
 8010632:	4631      	mov	r1, r6
 8010634:	4628      	mov	r0, r5
 8010636:	4a35      	ldr	r2, [pc, #212]	@ (801070c <_printf_float+0x2e0>)
 8010638:	47b8      	blx	r7
 801063a:	3001      	adds	r0, #1
 801063c:	f43f af51 	beq.w	80104e2 <_printf_float+0xb6>
 8010640:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8010644:	4543      	cmp	r3, r8
 8010646:	db02      	blt.n	801064e <_printf_float+0x222>
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	07d8      	lsls	r0, r3, #31
 801064c:	d50f      	bpl.n	801066e <_printf_float+0x242>
 801064e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010652:	4631      	mov	r1, r6
 8010654:	4628      	mov	r0, r5
 8010656:	47b8      	blx	r7
 8010658:	3001      	adds	r0, #1
 801065a:	f43f af42 	beq.w	80104e2 <_printf_float+0xb6>
 801065e:	f04f 0900 	mov.w	r9, #0
 8010662:	f108 38ff 	add.w	r8, r8, #4294967295
 8010666:	f104 0a1a 	add.w	sl, r4, #26
 801066a:	45c8      	cmp	r8, r9
 801066c:	dc09      	bgt.n	8010682 <_printf_float+0x256>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	079b      	lsls	r3, r3, #30
 8010672:	f100 8102 	bmi.w	801087a <_printf_float+0x44e>
 8010676:	68e0      	ldr	r0, [r4, #12]
 8010678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801067a:	4298      	cmp	r0, r3
 801067c:	bfb8      	it	lt
 801067e:	4618      	movlt	r0, r3
 8010680:	e731      	b.n	80104e6 <_printf_float+0xba>
 8010682:	2301      	movs	r3, #1
 8010684:	4652      	mov	r2, sl
 8010686:	4631      	mov	r1, r6
 8010688:	4628      	mov	r0, r5
 801068a:	47b8      	blx	r7
 801068c:	3001      	adds	r0, #1
 801068e:	f43f af28 	beq.w	80104e2 <_printf_float+0xb6>
 8010692:	f109 0901 	add.w	r9, r9, #1
 8010696:	e7e8      	b.n	801066a <_printf_float+0x23e>
 8010698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801069a:	2b00      	cmp	r3, #0
 801069c:	dc38      	bgt.n	8010710 <_printf_float+0x2e4>
 801069e:	2301      	movs	r3, #1
 80106a0:	4631      	mov	r1, r6
 80106a2:	4628      	mov	r0, r5
 80106a4:	4a19      	ldr	r2, [pc, #100]	@ (801070c <_printf_float+0x2e0>)
 80106a6:	47b8      	blx	r7
 80106a8:	3001      	adds	r0, #1
 80106aa:	f43f af1a 	beq.w	80104e2 <_printf_float+0xb6>
 80106ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80106b2:	ea59 0303 	orrs.w	r3, r9, r3
 80106b6:	d102      	bne.n	80106be <_printf_float+0x292>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	07d9      	lsls	r1, r3, #31
 80106bc:	d5d7      	bpl.n	801066e <_printf_float+0x242>
 80106be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80106c2:	4631      	mov	r1, r6
 80106c4:	4628      	mov	r0, r5
 80106c6:	47b8      	blx	r7
 80106c8:	3001      	adds	r0, #1
 80106ca:	f43f af0a 	beq.w	80104e2 <_printf_float+0xb6>
 80106ce:	f04f 0a00 	mov.w	sl, #0
 80106d2:	f104 0b1a 	add.w	fp, r4, #26
 80106d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106d8:	425b      	negs	r3, r3
 80106da:	4553      	cmp	r3, sl
 80106dc:	dc01      	bgt.n	80106e2 <_printf_float+0x2b6>
 80106de:	464b      	mov	r3, r9
 80106e0:	e793      	b.n	801060a <_printf_float+0x1de>
 80106e2:	2301      	movs	r3, #1
 80106e4:	465a      	mov	r2, fp
 80106e6:	4631      	mov	r1, r6
 80106e8:	4628      	mov	r0, r5
 80106ea:	47b8      	blx	r7
 80106ec:	3001      	adds	r0, #1
 80106ee:	f43f aef8 	beq.w	80104e2 <_printf_float+0xb6>
 80106f2:	f10a 0a01 	add.w	sl, sl, #1
 80106f6:	e7ee      	b.n	80106d6 <_printf_float+0x2aa>
 80106f8:	7fefffff 	.word	0x7fefffff
 80106fc:	0801414c 	.word	0x0801414c
 8010700:	08014150 	.word	0x08014150
 8010704:	08014154 	.word	0x08014154
 8010708:	08014158 	.word	0x08014158
 801070c:	0801415c 	.word	0x0801415c
 8010710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010712:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8010716:	4553      	cmp	r3, sl
 8010718:	bfa8      	it	ge
 801071a:	4653      	movge	r3, sl
 801071c:	2b00      	cmp	r3, #0
 801071e:	4699      	mov	r9, r3
 8010720:	dc36      	bgt.n	8010790 <_printf_float+0x364>
 8010722:	f04f 0b00 	mov.w	fp, #0
 8010726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801072a:	f104 021a 	add.w	r2, r4, #26
 801072e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010730:	930a      	str	r3, [sp, #40]	@ 0x28
 8010732:	eba3 0309 	sub.w	r3, r3, r9
 8010736:	455b      	cmp	r3, fp
 8010738:	dc31      	bgt.n	801079e <_printf_float+0x372>
 801073a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801073c:	459a      	cmp	sl, r3
 801073e:	dc3a      	bgt.n	80107b6 <_printf_float+0x38a>
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	07da      	lsls	r2, r3, #31
 8010744:	d437      	bmi.n	80107b6 <_printf_float+0x38a>
 8010746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010748:	ebaa 0903 	sub.w	r9, sl, r3
 801074c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801074e:	ebaa 0303 	sub.w	r3, sl, r3
 8010752:	4599      	cmp	r9, r3
 8010754:	bfa8      	it	ge
 8010756:	4699      	movge	r9, r3
 8010758:	f1b9 0f00 	cmp.w	r9, #0
 801075c:	dc33      	bgt.n	80107c6 <_printf_float+0x39a>
 801075e:	f04f 0800 	mov.w	r8, #0
 8010762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010766:	f104 0b1a 	add.w	fp, r4, #26
 801076a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801076c:	ebaa 0303 	sub.w	r3, sl, r3
 8010770:	eba3 0309 	sub.w	r3, r3, r9
 8010774:	4543      	cmp	r3, r8
 8010776:	f77f af7a 	ble.w	801066e <_printf_float+0x242>
 801077a:	2301      	movs	r3, #1
 801077c:	465a      	mov	r2, fp
 801077e:	4631      	mov	r1, r6
 8010780:	4628      	mov	r0, r5
 8010782:	47b8      	blx	r7
 8010784:	3001      	adds	r0, #1
 8010786:	f43f aeac 	beq.w	80104e2 <_printf_float+0xb6>
 801078a:	f108 0801 	add.w	r8, r8, #1
 801078e:	e7ec      	b.n	801076a <_printf_float+0x33e>
 8010790:	4642      	mov	r2, r8
 8010792:	4631      	mov	r1, r6
 8010794:	4628      	mov	r0, r5
 8010796:	47b8      	blx	r7
 8010798:	3001      	adds	r0, #1
 801079a:	d1c2      	bne.n	8010722 <_printf_float+0x2f6>
 801079c:	e6a1      	b.n	80104e2 <_printf_float+0xb6>
 801079e:	2301      	movs	r3, #1
 80107a0:	4631      	mov	r1, r6
 80107a2:	4628      	mov	r0, r5
 80107a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80107a6:	47b8      	blx	r7
 80107a8:	3001      	adds	r0, #1
 80107aa:	f43f ae9a 	beq.w	80104e2 <_printf_float+0xb6>
 80107ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107b0:	f10b 0b01 	add.w	fp, fp, #1
 80107b4:	e7bb      	b.n	801072e <_printf_float+0x302>
 80107b6:	4631      	mov	r1, r6
 80107b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80107bc:	4628      	mov	r0, r5
 80107be:	47b8      	blx	r7
 80107c0:	3001      	adds	r0, #1
 80107c2:	d1c0      	bne.n	8010746 <_printf_float+0x31a>
 80107c4:	e68d      	b.n	80104e2 <_printf_float+0xb6>
 80107c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107c8:	464b      	mov	r3, r9
 80107ca:	4631      	mov	r1, r6
 80107cc:	4628      	mov	r0, r5
 80107ce:	4442      	add	r2, r8
 80107d0:	47b8      	blx	r7
 80107d2:	3001      	adds	r0, #1
 80107d4:	d1c3      	bne.n	801075e <_printf_float+0x332>
 80107d6:	e684      	b.n	80104e2 <_printf_float+0xb6>
 80107d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80107dc:	f1ba 0f01 	cmp.w	sl, #1
 80107e0:	dc01      	bgt.n	80107e6 <_printf_float+0x3ba>
 80107e2:	07db      	lsls	r3, r3, #31
 80107e4:	d536      	bpl.n	8010854 <_printf_float+0x428>
 80107e6:	2301      	movs	r3, #1
 80107e8:	4642      	mov	r2, r8
 80107ea:	4631      	mov	r1, r6
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b8      	blx	r7
 80107f0:	3001      	adds	r0, #1
 80107f2:	f43f ae76 	beq.w	80104e2 <_printf_float+0xb6>
 80107f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80107fa:	4631      	mov	r1, r6
 80107fc:	4628      	mov	r0, r5
 80107fe:	47b8      	blx	r7
 8010800:	3001      	adds	r0, #1
 8010802:	f43f ae6e 	beq.w	80104e2 <_printf_float+0xb6>
 8010806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801080a:	2200      	movs	r2, #0
 801080c:	2300      	movs	r3, #0
 801080e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010812:	f7f0 f8e1 	bl	80009d8 <__aeabi_dcmpeq>
 8010816:	b9c0      	cbnz	r0, 801084a <_printf_float+0x41e>
 8010818:	4653      	mov	r3, sl
 801081a:	f108 0201 	add.w	r2, r8, #1
 801081e:	4631      	mov	r1, r6
 8010820:	4628      	mov	r0, r5
 8010822:	47b8      	blx	r7
 8010824:	3001      	adds	r0, #1
 8010826:	d10c      	bne.n	8010842 <_printf_float+0x416>
 8010828:	e65b      	b.n	80104e2 <_printf_float+0xb6>
 801082a:	2301      	movs	r3, #1
 801082c:	465a      	mov	r2, fp
 801082e:	4631      	mov	r1, r6
 8010830:	4628      	mov	r0, r5
 8010832:	47b8      	blx	r7
 8010834:	3001      	adds	r0, #1
 8010836:	f43f ae54 	beq.w	80104e2 <_printf_float+0xb6>
 801083a:	f108 0801 	add.w	r8, r8, #1
 801083e:	45d0      	cmp	r8, sl
 8010840:	dbf3      	blt.n	801082a <_printf_float+0x3fe>
 8010842:	464b      	mov	r3, r9
 8010844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010848:	e6e0      	b.n	801060c <_printf_float+0x1e0>
 801084a:	f04f 0800 	mov.w	r8, #0
 801084e:	f104 0b1a 	add.w	fp, r4, #26
 8010852:	e7f4      	b.n	801083e <_printf_float+0x412>
 8010854:	2301      	movs	r3, #1
 8010856:	4642      	mov	r2, r8
 8010858:	e7e1      	b.n	801081e <_printf_float+0x3f2>
 801085a:	2301      	movs	r3, #1
 801085c:	464a      	mov	r2, r9
 801085e:	4631      	mov	r1, r6
 8010860:	4628      	mov	r0, r5
 8010862:	47b8      	blx	r7
 8010864:	3001      	adds	r0, #1
 8010866:	f43f ae3c 	beq.w	80104e2 <_printf_float+0xb6>
 801086a:	f108 0801 	add.w	r8, r8, #1
 801086e:	68e3      	ldr	r3, [r4, #12]
 8010870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010872:	1a5b      	subs	r3, r3, r1
 8010874:	4543      	cmp	r3, r8
 8010876:	dcf0      	bgt.n	801085a <_printf_float+0x42e>
 8010878:	e6fd      	b.n	8010676 <_printf_float+0x24a>
 801087a:	f04f 0800 	mov.w	r8, #0
 801087e:	f104 0919 	add.w	r9, r4, #25
 8010882:	e7f4      	b.n	801086e <_printf_float+0x442>

08010884 <_printf_common>:
 8010884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010888:	4616      	mov	r6, r2
 801088a:	4698      	mov	r8, r3
 801088c:	688a      	ldr	r2, [r1, #8]
 801088e:	690b      	ldr	r3, [r1, #16]
 8010890:	4607      	mov	r7, r0
 8010892:	4293      	cmp	r3, r2
 8010894:	bfb8      	it	lt
 8010896:	4613      	movlt	r3, r2
 8010898:	6033      	str	r3, [r6, #0]
 801089a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801089e:	460c      	mov	r4, r1
 80108a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80108a4:	b10a      	cbz	r2, 80108aa <_printf_common+0x26>
 80108a6:	3301      	adds	r3, #1
 80108a8:	6033      	str	r3, [r6, #0]
 80108aa:	6823      	ldr	r3, [r4, #0]
 80108ac:	0699      	lsls	r1, r3, #26
 80108ae:	bf42      	ittt	mi
 80108b0:	6833      	ldrmi	r3, [r6, #0]
 80108b2:	3302      	addmi	r3, #2
 80108b4:	6033      	strmi	r3, [r6, #0]
 80108b6:	6825      	ldr	r5, [r4, #0]
 80108b8:	f015 0506 	ands.w	r5, r5, #6
 80108bc:	d106      	bne.n	80108cc <_printf_common+0x48>
 80108be:	f104 0a19 	add.w	sl, r4, #25
 80108c2:	68e3      	ldr	r3, [r4, #12]
 80108c4:	6832      	ldr	r2, [r6, #0]
 80108c6:	1a9b      	subs	r3, r3, r2
 80108c8:	42ab      	cmp	r3, r5
 80108ca:	dc2b      	bgt.n	8010924 <_printf_common+0xa0>
 80108cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108d0:	6822      	ldr	r2, [r4, #0]
 80108d2:	3b00      	subs	r3, #0
 80108d4:	bf18      	it	ne
 80108d6:	2301      	movne	r3, #1
 80108d8:	0692      	lsls	r2, r2, #26
 80108da:	d430      	bmi.n	801093e <_printf_common+0xba>
 80108dc:	4641      	mov	r1, r8
 80108de:	4638      	mov	r0, r7
 80108e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80108e4:	47c8      	blx	r9
 80108e6:	3001      	adds	r0, #1
 80108e8:	d023      	beq.n	8010932 <_printf_common+0xae>
 80108ea:	6823      	ldr	r3, [r4, #0]
 80108ec:	6922      	ldr	r2, [r4, #16]
 80108ee:	f003 0306 	and.w	r3, r3, #6
 80108f2:	2b04      	cmp	r3, #4
 80108f4:	bf14      	ite	ne
 80108f6:	2500      	movne	r5, #0
 80108f8:	6833      	ldreq	r3, [r6, #0]
 80108fa:	f04f 0600 	mov.w	r6, #0
 80108fe:	bf08      	it	eq
 8010900:	68e5      	ldreq	r5, [r4, #12]
 8010902:	f104 041a 	add.w	r4, r4, #26
 8010906:	bf08      	it	eq
 8010908:	1aed      	subeq	r5, r5, r3
 801090a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801090e:	bf08      	it	eq
 8010910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010914:	4293      	cmp	r3, r2
 8010916:	bfc4      	itt	gt
 8010918:	1a9b      	subgt	r3, r3, r2
 801091a:	18ed      	addgt	r5, r5, r3
 801091c:	42b5      	cmp	r5, r6
 801091e:	d11a      	bne.n	8010956 <_printf_common+0xd2>
 8010920:	2000      	movs	r0, #0
 8010922:	e008      	b.n	8010936 <_printf_common+0xb2>
 8010924:	2301      	movs	r3, #1
 8010926:	4652      	mov	r2, sl
 8010928:	4641      	mov	r1, r8
 801092a:	4638      	mov	r0, r7
 801092c:	47c8      	blx	r9
 801092e:	3001      	adds	r0, #1
 8010930:	d103      	bne.n	801093a <_printf_common+0xb6>
 8010932:	f04f 30ff 	mov.w	r0, #4294967295
 8010936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093a:	3501      	adds	r5, #1
 801093c:	e7c1      	b.n	80108c2 <_printf_common+0x3e>
 801093e:	2030      	movs	r0, #48	@ 0x30
 8010940:	18e1      	adds	r1, r4, r3
 8010942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801094c:	4422      	add	r2, r4
 801094e:	3302      	adds	r3, #2
 8010950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010954:	e7c2      	b.n	80108dc <_printf_common+0x58>
 8010956:	2301      	movs	r3, #1
 8010958:	4622      	mov	r2, r4
 801095a:	4641      	mov	r1, r8
 801095c:	4638      	mov	r0, r7
 801095e:	47c8      	blx	r9
 8010960:	3001      	adds	r0, #1
 8010962:	d0e6      	beq.n	8010932 <_printf_common+0xae>
 8010964:	3601      	adds	r6, #1
 8010966:	e7d9      	b.n	801091c <_printf_common+0x98>

08010968 <_printf_i>:
 8010968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801096c:	7e0f      	ldrb	r7, [r1, #24]
 801096e:	4691      	mov	r9, r2
 8010970:	2f78      	cmp	r7, #120	@ 0x78
 8010972:	4680      	mov	r8, r0
 8010974:	460c      	mov	r4, r1
 8010976:	469a      	mov	sl, r3
 8010978:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801097a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801097e:	d807      	bhi.n	8010990 <_printf_i+0x28>
 8010980:	2f62      	cmp	r7, #98	@ 0x62
 8010982:	d80a      	bhi.n	801099a <_printf_i+0x32>
 8010984:	2f00      	cmp	r7, #0
 8010986:	f000 80d3 	beq.w	8010b30 <_printf_i+0x1c8>
 801098a:	2f58      	cmp	r7, #88	@ 0x58
 801098c:	f000 80ba 	beq.w	8010b04 <_printf_i+0x19c>
 8010990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010998:	e03a      	b.n	8010a10 <_printf_i+0xa8>
 801099a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801099e:	2b15      	cmp	r3, #21
 80109a0:	d8f6      	bhi.n	8010990 <_printf_i+0x28>
 80109a2:	a101      	add	r1, pc, #4	@ (adr r1, 80109a8 <_printf_i+0x40>)
 80109a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80109a8:	08010a01 	.word	0x08010a01
 80109ac:	08010a15 	.word	0x08010a15
 80109b0:	08010991 	.word	0x08010991
 80109b4:	08010991 	.word	0x08010991
 80109b8:	08010991 	.word	0x08010991
 80109bc:	08010991 	.word	0x08010991
 80109c0:	08010a15 	.word	0x08010a15
 80109c4:	08010991 	.word	0x08010991
 80109c8:	08010991 	.word	0x08010991
 80109cc:	08010991 	.word	0x08010991
 80109d0:	08010991 	.word	0x08010991
 80109d4:	08010b17 	.word	0x08010b17
 80109d8:	08010a3f 	.word	0x08010a3f
 80109dc:	08010ad1 	.word	0x08010ad1
 80109e0:	08010991 	.word	0x08010991
 80109e4:	08010991 	.word	0x08010991
 80109e8:	08010b39 	.word	0x08010b39
 80109ec:	08010991 	.word	0x08010991
 80109f0:	08010a3f 	.word	0x08010a3f
 80109f4:	08010991 	.word	0x08010991
 80109f8:	08010991 	.word	0x08010991
 80109fc:	08010ad9 	.word	0x08010ad9
 8010a00:	6833      	ldr	r3, [r6, #0]
 8010a02:	1d1a      	adds	r2, r3, #4
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	6032      	str	r2, [r6, #0]
 8010a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010a10:	2301      	movs	r3, #1
 8010a12:	e09e      	b.n	8010b52 <_printf_i+0x1ea>
 8010a14:	6833      	ldr	r3, [r6, #0]
 8010a16:	6820      	ldr	r0, [r4, #0]
 8010a18:	1d19      	adds	r1, r3, #4
 8010a1a:	6031      	str	r1, [r6, #0]
 8010a1c:	0606      	lsls	r6, r0, #24
 8010a1e:	d501      	bpl.n	8010a24 <_printf_i+0xbc>
 8010a20:	681d      	ldr	r5, [r3, #0]
 8010a22:	e003      	b.n	8010a2c <_printf_i+0xc4>
 8010a24:	0645      	lsls	r5, r0, #25
 8010a26:	d5fb      	bpl.n	8010a20 <_printf_i+0xb8>
 8010a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a2c:	2d00      	cmp	r5, #0
 8010a2e:	da03      	bge.n	8010a38 <_printf_i+0xd0>
 8010a30:	232d      	movs	r3, #45	@ 0x2d
 8010a32:	426d      	negs	r5, r5
 8010a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a38:	230a      	movs	r3, #10
 8010a3a:	4859      	ldr	r0, [pc, #356]	@ (8010ba0 <_printf_i+0x238>)
 8010a3c:	e011      	b.n	8010a62 <_printf_i+0xfa>
 8010a3e:	6821      	ldr	r1, [r4, #0]
 8010a40:	6833      	ldr	r3, [r6, #0]
 8010a42:	0608      	lsls	r0, r1, #24
 8010a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a48:	d402      	bmi.n	8010a50 <_printf_i+0xe8>
 8010a4a:	0649      	lsls	r1, r1, #25
 8010a4c:	bf48      	it	mi
 8010a4e:	b2ad      	uxthmi	r5, r5
 8010a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a52:	6033      	str	r3, [r6, #0]
 8010a54:	bf14      	ite	ne
 8010a56:	230a      	movne	r3, #10
 8010a58:	2308      	moveq	r3, #8
 8010a5a:	4851      	ldr	r0, [pc, #324]	@ (8010ba0 <_printf_i+0x238>)
 8010a5c:	2100      	movs	r1, #0
 8010a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a62:	6866      	ldr	r6, [r4, #4]
 8010a64:	2e00      	cmp	r6, #0
 8010a66:	bfa8      	it	ge
 8010a68:	6821      	ldrge	r1, [r4, #0]
 8010a6a:	60a6      	str	r6, [r4, #8]
 8010a6c:	bfa4      	itt	ge
 8010a6e:	f021 0104 	bicge.w	r1, r1, #4
 8010a72:	6021      	strge	r1, [r4, #0]
 8010a74:	b90d      	cbnz	r5, 8010a7a <_printf_i+0x112>
 8010a76:	2e00      	cmp	r6, #0
 8010a78:	d04b      	beq.n	8010b12 <_printf_i+0x1aa>
 8010a7a:	4616      	mov	r6, r2
 8010a7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a80:	fb03 5711 	mls	r7, r3, r1, r5
 8010a84:	5dc7      	ldrb	r7, [r0, r7]
 8010a86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a8a:	462f      	mov	r7, r5
 8010a8c:	42bb      	cmp	r3, r7
 8010a8e:	460d      	mov	r5, r1
 8010a90:	d9f4      	bls.n	8010a7c <_printf_i+0x114>
 8010a92:	2b08      	cmp	r3, #8
 8010a94:	d10b      	bne.n	8010aae <_printf_i+0x146>
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	07df      	lsls	r7, r3, #31
 8010a9a:	d508      	bpl.n	8010aae <_printf_i+0x146>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	6861      	ldr	r1, [r4, #4]
 8010aa0:	4299      	cmp	r1, r3
 8010aa2:	bfde      	ittt	le
 8010aa4:	2330      	movle	r3, #48	@ 0x30
 8010aa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010aaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010aae:	1b92      	subs	r2, r2, r6
 8010ab0:	6122      	str	r2, [r4, #16]
 8010ab2:	464b      	mov	r3, r9
 8010ab4:	4621      	mov	r1, r4
 8010ab6:	4640      	mov	r0, r8
 8010ab8:	f8cd a000 	str.w	sl, [sp]
 8010abc:	aa03      	add	r2, sp, #12
 8010abe:	f7ff fee1 	bl	8010884 <_printf_common>
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	d14a      	bne.n	8010b5c <_printf_i+0x1f4>
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	b004      	add	sp, #16
 8010acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	f043 0320 	orr.w	r3, r3, #32
 8010ad6:	6023      	str	r3, [r4, #0]
 8010ad8:	2778      	movs	r7, #120	@ 0x78
 8010ada:	4832      	ldr	r0, [pc, #200]	@ (8010ba4 <_printf_i+0x23c>)
 8010adc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ae0:	6823      	ldr	r3, [r4, #0]
 8010ae2:	6831      	ldr	r1, [r6, #0]
 8010ae4:	061f      	lsls	r7, r3, #24
 8010ae6:	f851 5b04 	ldr.w	r5, [r1], #4
 8010aea:	d402      	bmi.n	8010af2 <_printf_i+0x18a>
 8010aec:	065f      	lsls	r7, r3, #25
 8010aee:	bf48      	it	mi
 8010af0:	b2ad      	uxthmi	r5, r5
 8010af2:	6031      	str	r1, [r6, #0]
 8010af4:	07d9      	lsls	r1, r3, #31
 8010af6:	bf44      	itt	mi
 8010af8:	f043 0320 	orrmi.w	r3, r3, #32
 8010afc:	6023      	strmi	r3, [r4, #0]
 8010afe:	b11d      	cbz	r5, 8010b08 <_printf_i+0x1a0>
 8010b00:	2310      	movs	r3, #16
 8010b02:	e7ab      	b.n	8010a5c <_printf_i+0xf4>
 8010b04:	4826      	ldr	r0, [pc, #152]	@ (8010ba0 <_printf_i+0x238>)
 8010b06:	e7e9      	b.n	8010adc <_printf_i+0x174>
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	f023 0320 	bic.w	r3, r3, #32
 8010b0e:	6023      	str	r3, [r4, #0]
 8010b10:	e7f6      	b.n	8010b00 <_printf_i+0x198>
 8010b12:	4616      	mov	r6, r2
 8010b14:	e7bd      	b.n	8010a92 <_printf_i+0x12a>
 8010b16:	6833      	ldr	r3, [r6, #0]
 8010b18:	6825      	ldr	r5, [r4, #0]
 8010b1a:	1d18      	adds	r0, r3, #4
 8010b1c:	6961      	ldr	r1, [r4, #20]
 8010b1e:	6030      	str	r0, [r6, #0]
 8010b20:	062e      	lsls	r6, r5, #24
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	d501      	bpl.n	8010b2a <_printf_i+0x1c2>
 8010b26:	6019      	str	r1, [r3, #0]
 8010b28:	e002      	b.n	8010b30 <_printf_i+0x1c8>
 8010b2a:	0668      	lsls	r0, r5, #25
 8010b2c:	d5fb      	bpl.n	8010b26 <_printf_i+0x1be>
 8010b2e:	8019      	strh	r1, [r3, #0]
 8010b30:	2300      	movs	r3, #0
 8010b32:	4616      	mov	r6, r2
 8010b34:	6123      	str	r3, [r4, #16]
 8010b36:	e7bc      	b.n	8010ab2 <_printf_i+0x14a>
 8010b38:	6833      	ldr	r3, [r6, #0]
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	1d1a      	adds	r2, r3, #4
 8010b3e:	6032      	str	r2, [r6, #0]
 8010b40:	681e      	ldr	r6, [r3, #0]
 8010b42:	6862      	ldr	r2, [r4, #4]
 8010b44:	4630      	mov	r0, r6
 8010b46:	f000 fbc8 	bl	80112da <memchr>
 8010b4a:	b108      	cbz	r0, 8010b50 <_printf_i+0x1e8>
 8010b4c:	1b80      	subs	r0, r0, r6
 8010b4e:	6060      	str	r0, [r4, #4]
 8010b50:	6863      	ldr	r3, [r4, #4]
 8010b52:	6123      	str	r3, [r4, #16]
 8010b54:	2300      	movs	r3, #0
 8010b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b5a:	e7aa      	b.n	8010ab2 <_printf_i+0x14a>
 8010b5c:	4632      	mov	r2, r6
 8010b5e:	4649      	mov	r1, r9
 8010b60:	4640      	mov	r0, r8
 8010b62:	6923      	ldr	r3, [r4, #16]
 8010b64:	47d0      	blx	sl
 8010b66:	3001      	adds	r0, #1
 8010b68:	d0ad      	beq.n	8010ac6 <_printf_i+0x15e>
 8010b6a:	6823      	ldr	r3, [r4, #0]
 8010b6c:	079b      	lsls	r3, r3, #30
 8010b6e:	d413      	bmi.n	8010b98 <_printf_i+0x230>
 8010b70:	68e0      	ldr	r0, [r4, #12]
 8010b72:	9b03      	ldr	r3, [sp, #12]
 8010b74:	4298      	cmp	r0, r3
 8010b76:	bfb8      	it	lt
 8010b78:	4618      	movlt	r0, r3
 8010b7a:	e7a6      	b.n	8010aca <_printf_i+0x162>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	4632      	mov	r2, r6
 8010b80:	4649      	mov	r1, r9
 8010b82:	4640      	mov	r0, r8
 8010b84:	47d0      	blx	sl
 8010b86:	3001      	adds	r0, #1
 8010b88:	d09d      	beq.n	8010ac6 <_printf_i+0x15e>
 8010b8a:	3501      	adds	r5, #1
 8010b8c:	68e3      	ldr	r3, [r4, #12]
 8010b8e:	9903      	ldr	r1, [sp, #12]
 8010b90:	1a5b      	subs	r3, r3, r1
 8010b92:	42ab      	cmp	r3, r5
 8010b94:	dcf2      	bgt.n	8010b7c <_printf_i+0x214>
 8010b96:	e7eb      	b.n	8010b70 <_printf_i+0x208>
 8010b98:	2500      	movs	r5, #0
 8010b9a:	f104 0619 	add.w	r6, r4, #25
 8010b9e:	e7f5      	b.n	8010b8c <_printf_i+0x224>
 8010ba0:	0801415e 	.word	0x0801415e
 8010ba4:	0801416f 	.word	0x0801416f

08010ba8 <__sflush_r>:
 8010ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bae:	0716      	lsls	r6, r2, #28
 8010bb0:	4605      	mov	r5, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	d454      	bmi.n	8010c60 <__sflush_r+0xb8>
 8010bb6:	684b      	ldr	r3, [r1, #4]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	dc02      	bgt.n	8010bc2 <__sflush_r+0x1a>
 8010bbc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	dd48      	ble.n	8010c54 <__sflush_r+0xac>
 8010bc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bc4:	2e00      	cmp	r6, #0
 8010bc6:	d045      	beq.n	8010c54 <__sflush_r+0xac>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010bce:	682f      	ldr	r7, [r5, #0]
 8010bd0:	6a21      	ldr	r1, [r4, #32]
 8010bd2:	602b      	str	r3, [r5, #0]
 8010bd4:	d030      	beq.n	8010c38 <__sflush_r+0x90>
 8010bd6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bd8:	89a3      	ldrh	r3, [r4, #12]
 8010bda:	0759      	lsls	r1, r3, #29
 8010bdc:	d505      	bpl.n	8010bea <__sflush_r+0x42>
 8010bde:	6863      	ldr	r3, [r4, #4]
 8010be0:	1ad2      	subs	r2, r2, r3
 8010be2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010be4:	b10b      	cbz	r3, 8010bea <__sflush_r+0x42>
 8010be6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010be8:	1ad2      	subs	r2, r2, r3
 8010bea:	2300      	movs	r3, #0
 8010bec:	4628      	mov	r0, r5
 8010bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bf0:	6a21      	ldr	r1, [r4, #32]
 8010bf2:	47b0      	blx	r6
 8010bf4:	1c43      	adds	r3, r0, #1
 8010bf6:	89a3      	ldrh	r3, [r4, #12]
 8010bf8:	d106      	bne.n	8010c08 <__sflush_r+0x60>
 8010bfa:	6829      	ldr	r1, [r5, #0]
 8010bfc:	291d      	cmp	r1, #29
 8010bfe:	d82b      	bhi.n	8010c58 <__sflush_r+0xb0>
 8010c00:	4a28      	ldr	r2, [pc, #160]	@ (8010ca4 <__sflush_r+0xfc>)
 8010c02:	410a      	asrs	r2, r1
 8010c04:	07d6      	lsls	r6, r2, #31
 8010c06:	d427      	bmi.n	8010c58 <__sflush_r+0xb0>
 8010c08:	2200      	movs	r2, #0
 8010c0a:	6062      	str	r2, [r4, #4]
 8010c0c:	6922      	ldr	r2, [r4, #16]
 8010c0e:	04d9      	lsls	r1, r3, #19
 8010c10:	6022      	str	r2, [r4, #0]
 8010c12:	d504      	bpl.n	8010c1e <__sflush_r+0x76>
 8010c14:	1c42      	adds	r2, r0, #1
 8010c16:	d101      	bne.n	8010c1c <__sflush_r+0x74>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	b903      	cbnz	r3, 8010c1e <__sflush_r+0x76>
 8010c1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c20:	602f      	str	r7, [r5, #0]
 8010c22:	b1b9      	cbz	r1, 8010c54 <__sflush_r+0xac>
 8010c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c28:	4299      	cmp	r1, r3
 8010c2a:	d002      	beq.n	8010c32 <__sflush_r+0x8a>
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	f001 f9b3 	bl	8011f98 <_free_r>
 8010c32:	2300      	movs	r3, #0
 8010c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c36:	e00d      	b.n	8010c54 <__sflush_r+0xac>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	47b0      	blx	r6
 8010c3e:	4602      	mov	r2, r0
 8010c40:	1c50      	adds	r0, r2, #1
 8010c42:	d1c9      	bne.n	8010bd8 <__sflush_r+0x30>
 8010c44:	682b      	ldr	r3, [r5, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0c6      	beq.n	8010bd8 <__sflush_r+0x30>
 8010c4a:	2b1d      	cmp	r3, #29
 8010c4c:	d001      	beq.n	8010c52 <__sflush_r+0xaa>
 8010c4e:	2b16      	cmp	r3, #22
 8010c50:	d11d      	bne.n	8010c8e <__sflush_r+0xe6>
 8010c52:	602f      	str	r7, [r5, #0]
 8010c54:	2000      	movs	r0, #0
 8010c56:	e021      	b.n	8010c9c <__sflush_r+0xf4>
 8010c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c5c:	b21b      	sxth	r3, r3
 8010c5e:	e01a      	b.n	8010c96 <__sflush_r+0xee>
 8010c60:	690f      	ldr	r7, [r1, #16]
 8010c62:	2f00      	cmp	r7, #0
 8010c64:	d0f6      	beq.n	8010c54 <__sflush_r+0xac>
 8010c66:	0793      	lsls	r3, r2, #30
 8010c68:	bf18      	it	ne
 8010c6a:	2300      	movne	r3, #0
 8010c6c:	680e      	ldr	r6, [r1, #0]
 8010c6e:	bf08      	it	eq
 8010c70:	694b      	ldreq	r3, [r1, #20]
 8010c72:	1bf6      	subs	r6, r6, r7
 8010c74:	600f      	str	r7, [r1, #0]
 8010c76:	608b      	str	r3, [r1, #8]
 8010c78:	2e00      	cmp	r6, #0
 8010c7a:	ddeb      	ble.n	8010c54 <__sflush_r+0xac>
 8010c7c:	4633      	mov	r3, r6
 8010c7e:	463a      	mov	r2, r7
 8010c80:	4628      	mov	r0, r5
 8010c82:	6a21      	ldr	r1, [r4, #32]
 8010c84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8010c88:	47e0      	blx	ip
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	dc07      	bgt.n	8010c9e <__sflush_r+0xf6>
 8010c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c96:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c9e:	4407      	add	r7, r0
 8010ca0:	1a36      	subs	r6, r6, r0
 8010ca2:	e7e9      	b.n	8010c78 <__sflush_r+0xd0>
 8010ca4:	dfbffffe 	.word	0xdfbffffe

08010ca8 <_fflush_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	690b      	ldr	r3, [r1, #16]
 8010cac:	4605      	mov	r5, r0
 8010cae:	460c      	mov	r4, r1
 8010cb0:	b913      	cbnz	r3, 8010cb8 <_fflush_r+0x10>
 8010cb2:	2500      	movs	r5, #0
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	bd38      	pop	{r3, r4, r5, pc}
 8010cb8:	b118      	cbz	r0, 8010cc2 <_fflush_r+0x1a>
 8010cba:	6a03      	ldr	r3, [r0, #32]
 8010cbc:	b90b      	cbnz	r3, 8010cc2 <_fflush_r+0x1a>
 8010cbe:	f000 f8bb 	bl	8010e38 <__sinit>
 8010cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d0f3      	beq.n	8010cb2 <_fflush_r+0xa>
 8010cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010ccc:	07d0      	lsls	r0, r2, #31
 8010cce:	d404      	bmi.n	8010cda <_fflush_r+0x32>
 8010cd0:	0599      	lsls	r1, r3, #22
 8010cd2:	d402      	bmi.n	8010cda <_fflush_r+0x32>
 8010cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cd6:	f000 fafe 	bl	80112d6 <__retarget_lock_acquire_recursive>
 8010cda:	4628      	mov	r0, r5
 8010cdc:	4621      	mov	r1, r4
 8010cde:	f7ff ff63 	bl	8010ba8 <__sflush_r>
 8010ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ce4:	4605      	mov	r5, r0
 8010ce6:	07da      	lsls	r2, r3, #31
 8010ce8:	d4e4      	bmi.n	8010cb4 <_fflush_r+0xc>
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	059b      	lsls	r3, r3, #22
 8010cee:	d4e1      	bmi.n	8010cb4 <_fflush_r+0xc>
 8010cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf2:	f000 faf1 	bl	80112d8 <__retarget_lock_release_recursive>
 8010cf6:	e7dd      	b.n	8010cb4 <_fflush_r+0xc>

08010cf8 <fflush>:
 8010cf8:	4601      	mov	r1, r0
 8010cfa:	b920      	cbnz	r0, 8010d06 <fflush+0xe>
 8010cfc:	4a04      	ldr	r2, [pc, #16]	@ (8010d10 <fflush+0x18>)
 8010cfe:	4905      	ldr	r1, [pc, #20]	@ (8010d14 <fflush+0x1c>)
 8010d00:	4805      	ldr	r0, [pc, #20]	@ (8010d18 <fflush+0x20>)
 8010d02:	f000 b8b1 	b.w	8010e68 <_fwalk_sglue>
 8010d06:	4b05      	ldr	r3, [pc, #20]	@ (8010d1c <fflush+0x24>)
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	f7ff bfcd 	b.w	8010ca8 <_fflush_r>
 8010d0e:	bf00      	nop
 8010d10:	20000198 	.word	0x20000198
 8010d14:	08010ca9 	.word	0x08010ca9
 8010d18:	200001a8 	.word	0x200001a8
 8010d1c:	200001a4 	.word	0x200001a4

08010d20 <std>:
 8010d20:	2300      	movs	r3, #0
 8010d22:	b510      	push	{r4, lr}
 8010d24:	4604      	mov	r4, r0
 8010d26:	e9c0 3300 	strd	r3, r3, [r0]
 8010d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d2e:	6083      	str	r3, [r0, #8]
 8010d30:	8181      	strh	r1, [r0, #12]
 8010d32:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d34:	81c2      	strh	r2, [r0, #14]
 8010d36:	6183      	str	r3, [r0, #24]
 8010d38:	4619      	mov	r1, r3
 8010d3a:	2208      	movs	r2, #8
 8010d3c:	305c      	adds	r0, #92	@ 0x5c
 8010d3e:	f000 fa4d 	bl	80111dc <memset>
 8010d42:	4b0d      	ldr	r3, [pc, #52]	@ (8010d78 <std+0x58>)
 8010d44:	6224      	str	r4, [r4, #32]
 8010d46:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d48:	4b0c      	ldr	r3, [pc, #48]	@ (8010d7c <std+0x5c>)
 8010d4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8010d80 <std+0x60>)
 8010d4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d50:	4b0c      	ldr	r3, [pc, #48]	@ (8010d84 <std+0x64>)
 8010d52:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d54:	4b0c      	ldr	r3, [pc, #48]	@ (8010d88 <std+0x68>)
 8010d56:	429c      	cmp	r4, r3
 8010d58:	d006      	beq.n	8010d68 <std+0x48>
 8010d5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010d5e:	4294      	cmp	r4, r2
 8010d60:	d002      	beq.n	8010d68 <std+0x48>
 8010d62:	33d0      	adds	r3, #208	@ 0xd0
 8010d64:	429c      	cmp	r4, r3
 8010d66:	d105      	bne.n	8010d74 <std+0x54>
 8010d68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d70:	f000 bab0 	b.w	80112d4 <__retarget_lock_init_recursive>
 8010d74:	bd10      	pop	{r4, pc}
 8010d76:	bf00      	nop
 8010d78:	0801102d 	.word	0x0801102d
 8010d7c:	0801104f 	.word	0x0801104f
 8010d80:	08011087 	.word	0x08011087
 8010d84:	080110ab 	.word	0x080110ab
 8010d88:	2000088c 	.word	0x2000088c

08010d8c <stdio_exit_handler>:
 8010d8c:	4a02      	ldr	r2, [pc, #8]	@ (8010d98 <stdio_exit_handler+0xc>)
 8010d8e:	4903      	ldr	r1, [pc, #12]	@ (8010d9c <stdio_exit_handler+0x10>)
 8010d90:	4803      	ldr	r0, [pc, #12]	@ (8010da0 <stdio_exit_handler+0x14>)
 8010d92:	f000 b869 	b.w	8010e68 <_fwalk_sglue>
 8010d96:	bf00      	nop
 8010d98:	20000198 	.word	0x20000198
 8010d9c:	08010ca9 	.word	0x08010ca9
 8010da0:	200001a8 	.word	0x200001a8

08010da4 <cleanup_stdio>:
 8010da4:	6841      	ldr	r1, [r0, #4]
 8010da6:	4b0c      	ldr	r3, [pc, #48]	@ (8010dd8 <cleanup_stdio+0x34>)
 8010da8:	b510      	push	{r4, lr}
 8010daa:	4299      	cmp	r1, r3
 8010dac:	4604      	mov	r4, r0
 8010dae:	d001      	beq.n	8010db4 <cleanup_stdio+0x10>
 8010db0:	f7ff ff7a 	bl	8010ca8 <_fflush_r>
 8010db4:	68a1      	ldr	r1, [r4, #8]
 8010db6:	4b09      	ldr	r3, [pc, #36]	@ (8010ddc <cleanup_stdio+0x38>)
 8010db8:	4299      	cmp	r1, r3
 8010dba:	d002      	beq.n	8010dc2 <cleanup_stdio+0x1e>
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f7ff ff73 	bl	8010ca8 <_fflush_r>
 8010dc2:	68e1      	ldr	r1, [r4, #12]
 8010dc4:	4b06      	ldr	r3, [pc, #24]	@ (8010de0 <cleanup_stdio+0x3c>)
 8010dc6:	4299      	cmp	r1, r3
 8010dc8:	d004      	beq.n	8010dd4 <cleanup_stdio+0x30>
 8010dca:	4620      	mov	r0, r4
 8010dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dd0:	f7ff bf6a 	b.w	8010ca8 <_fflush_r>
 8010dd4:	bd10      	pop	{r4, pc}
 8010dd6:	bf00      	nop
 8010dd8:	2000088c 	.word	0x2000088c
 8010ddc:	200008f4 	.word	0x200008f4
 8010de0:	2000095c 	.word	0x2000095c

08010de4 <global_stdio_init.part.0>:
 8010de4:	b510      	push	{r4, lr}
 8010de6:	4b0b      	ldr	r3, [pc, #44]	@ (8010e14 <global_stdio_init.part.0+0x30>)
 8010de8:	4c0b      	ldr	r4, [pc, #44]	@ (8010e18 <global_stdio_init.part.0+0x34>)
 8010dea:	4a0c      	ldr	r2, [pc, #48]	@ (8010e1c <global_stdio_init.part.0+0x38>)
 8010dec:	4620      	mov	r0, r4
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	2104      	movs	r1, #4
 8010df2:	2200      	movs	r2, #0
 8010df4:	f7ff ff94 	bl	8010d20 <std>
 8010df8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	2109      	movs	r1, #9
 8010e00:	f7ff ff8e 	bl	8010d20 <std>
 8010e04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e08:	2202      	movs	r2, #2
 8010e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e0e:	2112      	movs	r1, #18
 8010e10:	f7ff bf86 	b.w	8010d20 <std>
 8010e14:	200009c4 	.word	0x200009c4
 8010e18:	2000088c 	.word	0x2000088c
 8010e1c:	08010d8d 	.word	0x08010d8d

08010e20 <__sfp_lock_acquire>:
 8010e20:	4801      	ldr	r0, [pc, #4]	@ (8010e28 <__sfp_lock_acquire+0x8>)
 8010e22:	f000 ba58 	b.w	80112d6 <__retarget_lock_acquire_recursive>
 8010e26:	bf00      	nop
 8010e28:	200009cd 	.word	0x200009cd

08010e2c <__sfp_lock_release>:
 8010e2c:	4801      	ldr	r0, [pc, #4]	@ (8010e34 <__sfp_lock_release+0x8>)
 8010e2e:	f000 ba53 	b.w	80112d8 <__retarget_lock_release_recursive>
 8010e32:	bf00      	nop
 8010e34:	200009cd 	.word	0x200009cd

08010e38 <__sinit>:
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	f7ff fff0 	bl	8010e20 <__sfp_lock_acquire>
 8010e40:	6a23      	ldr	r3, [r4, #32]
 8010e42:	b11b      	cbz	r3, 8010e4c <__sinit+0x14>
 8010e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e48:	f7ff bff0 	b.w	8010e2c <__sfp_lock_release>
 8010e4c:	4b04      	ldr	r3, [pc, #16]	@ (8010e60 <__sinit+0x28>)
 8010e4e:	6223      	str	r3, [r4, #32]
 8010e50:	4b04      	ldr	r3, [pc, #16]	@ (8010e64 <__sinit+0x2c>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1f5      	bne.n	8010e44 <__sinit+0xc>
 8010e58:	f7ff ffc4 	bl	8010de4 <global_stdio_init.part.0>
 8010e5c:	e7f2      	b.n	8010e44 <__sinit+0xc>
 8010e5e:	bf00      	nop
 8010e60:	08010da5 	.word	0x08010da5
 8010e64:	200009c4 	.word	0x200009c4

08010e68 <_fwalk_sglue>:
 8010e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e6c:	4607      	mov	r7, r0
 8010e6e:	4688      	mov	r8, r1
 8010e70:	4614      	mov	r4, r2
 8010e72:	2600      	movs	r6, #0
 8010e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e78:	f1b9 0901 	subs.w	r9, r9, #1
 8010e7c:	d505      	bpl.n	8010e8a <_fwalk_sglue+0x22>
 8010e7e:	6824      	ldr	r4, [r4, #0]
 8010e80:	2c00      	cmp	r4, #0
 8010e82:	d1f7      	bne.n	8010e74 <_fwalk_sglue+0xc>
 8010e84:	4630      	mov	r0, r6
 8010e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e8a:	89ab      	ldrh	r3, [r5, #12]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d907      	bls.n	8010ea0 <_fwalk_sglue+0x38>
 8010e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e94:	3301      	adds	r3, #1
 8010e96:	d003      	beq.n	8010ea0 <_fwalk_sglue+0x38>
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	47c0      	blx	r8
 8010e9e:	4306      	orrs	r6, r0
 8010ea0:	3568      	adds	r5, #104	@ 0x68
 8010ea2:	e7e9      	b.n	8010e78 <_fwalk_sglue+0x10>

08010ea4 <iprintf>:
 8010ea4:	b40f      	push	{r0, r1, r2, r3}
 8010ea6:	b507      	push	{r0, r1, r2, lr}
 8010ea8:	4906      	ldr	r1, [pc, #24]	@ (8010ec4 <iprintf+0x20>)
 8010eaa:	ab04      	add	r3, sp, #16
 8010eac:	6808      	ldr	r0, [r1, #0]
 8010eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010eb2:	6881      	ldr	r1, [r0, #8]
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	f001 fe6d 	bl	8012b94 <_vfiprintf_r>
 8010eba:	b003      	add	sp, #12
 8010ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ec0:	b004      	add	sp, #16
 8010ec2:	4770      	bx	lr
 8010ec4:	200001a4 	.word	0x200001a4

08010ec8 <_puts_r>:
 8010ec8:	6a03      	ldr	r3, [r0, #32]
 8010eca:	b570      	push	{r4, r5, r6, lr}
 8010ecc:	4605      	mov	r5, r0
 8010ece:	460e      	mov	r6, r1
 8010ed0:	6884      	ldr	r4, [r0, #8]
 8010ed2:	b90b      	cbnz	r3, 8010ed8 <_puts_r+0x10>
 8010ed4:	f7ff ffb0 	bl	8010e38 <__sinit>
 8010ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010eda:	07db      	lsls	r3, r3, #31
 8010edc:	d405      	bmi.n	8010eea <_puts_r+0x22>
 8010ede:	89a3      	ldrh	r3, [r4, #12]
 8010ee0:	0598      	lsls	r0, r3, #22
 8010ee2:	d402      	bmi.n	8010eea <_puts_r+0x22>
 8010ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ee6:	f000 f9f6 	bl	80112d6 <__retarget_lock_acquire_recursive>
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	0719      	lsls	r1, r3, #28
 8010eee:	d502      	bpl.n	8010ef6 <_puts_r+0x2e>
 8010ef0:	6923      	ldr	r3, [r4, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d135      	bne.n	8010f62 <_puts_r+0x9a>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f000 f919 	bl	8011130 <__swsetup_r>
 8010efe:	b380      	cbz	r0, 8010f62 <_puts_r+0x9a>
 8010f00:	f04f 35ff 	mov.w	r5, #4294967295
 8010f04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f06:	07da      	lsls	r2, r3, #31
 8010f08:	d405      	bmi.n	8010f16 <_puts_r+0x4e>
 8010f0a:	89a3      	ldrh	r3, [r4, #12]
 8010f0c:	059b      	lsls	r3, r3, #22
 8010f0e:	d402      	bmi.n	8010f16 <_puts_r+0x4e>
 8010f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f12:	f000 f9e1 	bl	80112d8 <__retarget_lock_release_recursive>
 8010f16:	4628      	mov	r0, r5
 8010f18:	bd70      	pop	{r4, r5, r6, pc}
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da04      	bge.n	8010f28 <_puts_r+0x60>
 8010f1e:	69a2      	ldr	r2, [r4, #24]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	dc17      	bgt.n	8010f54 <_puts_r+0x8c>
 8010f24:	290a      	cmp	r1, #10
 8010f26:	d015      	beq.n	8010f54 <_puts_r+0x8c>
 8010f28:	6823      	ldr	r3, [r4, #0]
 8010f2a:	1c5a      	adds	r2, r3, #1
 8010f2c:	6022      	str	r2, [r4, #0]
 8010f2e:	7019      	strb	r1, [r3, #0]
 8010f30:	68a3      	ldr	r3, [r4, #8]
 8010f32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f36:	3b01      	subs	r3, #1
 8010f38:	60a3      	str	r3, [r4, #8]
 8010f3a:	2900      	cmp	r1, #0
 8010f3c:	d1ed      	bne.n	8010f1a <_puts_r+0x52>
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	da11      	bge.n	8010f66 <_puts_r+0x9e>
 8010f42:	4622      	mov	r2, r4
 8010f44:	210a      	movs	r1, #10
 8010f46:	4628      	mov	r0, r5
 8010f48:	f000 f8b3 	bl	80110b2 <__swbuf_r>
 8010f4c:	3001      	adds	r0, #1
 8010f4e:	d0d7      	beq.n	8010f00 <_puts_r+0x38>
 8010f50:	250a      	movs	r5, #10
 8010f52:	e7d7      	b.n	8010f04 <_puts_r+0x3c>
 8010f54:	4622      	mov	r2, r4
 8010f56:	4628      	mov	r0, r5
 8010f58:	f000 f8ab 	bl	80110b2 <__swbuf_r>
 8010f5c:	3001      	adds	r0, #1
 8010f5e:	d1e7      	bne.n	8010f30 <_puts_r+0x68>
 8010f60:	e7ce      	b.n	8010f00 <_puts_r+0x38>
 8010f62:	3e01      	subs	r6, #1
 8010f64:	e7e4      	b.n	8010f30 <_puts_r+0x68>
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	1c5a      	adds	r2, r3, #1
 8010f6a:	6022      	str	r2, [r4, #0]
 8010f6c:	220a      	movs	r2, #10
 8010f6e:	701a      	strb	r2, [r3, #0]
 8010f70:	e7ee      	b.n	8010f50 <_puts_r+0x88>
	...

08010f74 <puts>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	@ (8010f80 <puts+0xc>)
 8010f76:	4601      	mov	r1, r0
 8010f78:	6818      	ldr	r0, [r3, #0]
 8010f7a:	f7ff bfa5 	b.w	8010ec8 <_puts_r>
 8010f7e:	bf00      	nop
 8010f80:	200001a4 	.word	0x200001a4

08010f84 <sniprintf>:
 8010f84:	b40c      	push	{r2, r3}
 8010f86:	b530      	push	{r4, r5, lr}
 8010f88:	4b17      	ldr	r3, [pc, #92]	@ (8010fe8 <sniprintf+0x64>)
 8010f8a:	1e0c      	subs	r4, r1, #0
 8010f8c:	681d      	ldr	r5, [r3, #0]
 8010f8e:	b09d      	sub	sp, #116	@ 0x74
 8010f90:	da08      	bge.n	8010fa4 <sniprintf+0x20>
 8010f92:	238b      	movs	r3, #139	@ 0x8b
 8010f94:	f04f 30ff 	mov.w	r0, #4294967295
 8010f98:	602b      	str	r3, [r5, #0]
 8010f9a:	b01d      	add	sp, #116	@ 0x74
 8010f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fa0:	b002      	add	sp, #8
 8010fa2:	4770      	bx	lr
 8010fa4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010fac:	bf0c      	ite	eq
 8010fae:	4623      	moveq	r3, r4
 8010fb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010fb4:	9304      	str	r3, [sp, #16]
 8010fb6:	9307      	str	r3, [sp, #28]
 8010fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010fbc:	9002      	str	r0, [sp, #8]
 8010fbe:	9006      	str	r0, [sp, #24]
 8010fc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	ab21      	add	r3, sp, #132	@ 0x84
 8010fc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010fca:	a902      	add	r1, sp, #8
 8010fcc:	9301      	str	r3, [sp, #4]
 8010fce:	f001 fcbd 	bl	801294c <_svfiprintf_r>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	bfbc      	itt	lt
 8010fd6:	238b      	movlt	r3, #139	@ 0x8b
 8010fd8:	602b      	strlt	r3, [r5, #0]
 8010fda:	2c00      	cmp	r4, #0
 8010fdc:	d0dd      	beq.n	8010f9a <sniprintf+0x16>
 8010fde:	2200      	movs	r2, #0
 8010fe0:	9b02      	ldr	r3, [sp, #8]
 8010fe2:	701a      	strb	r2, [r3, #0]
 8010fe4:	e7d9      	b.n	8010f9a <sniprintf+0x16>
 8010fe6:	bf00      	nop
 8010fe8:	200001a4 	.word	0x200001a4

08010fec <siprintf>:
 8010fec:	b40e      	push	{r1, r2, r3}
 8010fee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010ff2:	b500      	push	{lr}
 8010ff4:	b09c      	sub	sp, #112	@ 0x70
 8010ff6:	ab1d      	add	r3, sp, #116	@ 0x74
 8010ff8:	9002      	str	r0, [sp, #8]
 8010ffa:	9006      	str	r0, [sp, #24]
 8010ffc:	9107      	str	r1, [sp, #28]
 8010ffe:	9104      	str	r1, [sp, #16]
 8011000:	4808      	ldr	r0, [pc, #32]	@ (8011024 <siprintf+0x38>)
 8011002:	4909      	ldr	r1, [pc, #36]	@ (8011028 <siprintf+0x3c>)
 8011004:	f853 2b04 	ldr.w	r2, [r3], #4
 8011008:	9105      	str	r1, [sp, #20]
 801100a:	6800      	ldr	r0, [r0, #0]
 801100c:	a902      	add	r1, sp, #8
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	f001 fc9c 	bl	801294c <_svfiprintf_r>
 8011014:	2200      	movs	r2, #0
 8011016:	9b02      	ldr	r3, [sp, #8]
 8011018:	701a      	strb	r2, [r3, #0]
 801101a:	b01c      	add	sp, #112	@ 0x70
 801101c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011020:	b003      	add	sp, #12
 8011022:	4770      	bx	lr
 8011024:	200001a4 	.word	0x200001a4
 8011028:	ffff0208 	.word	0xffff0208

0801102c <__sread>:
 801102c:	b510      	push	{r4, lr}
 801102e:	460c      	mov	r4, r1
 8011030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011034:	f000 f900 	bl	8011238 <_read_r>
 8011038:	2800      	cmp	r0, #0
 801103a:	bfab      	itete	ge
 801103c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801103e:	89a3      	ldrhlt	r3, [r4, #12]
 8011040:	181b      	addge	r3, r3, r0
 8011042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011046:	bfac      	ite	ge
 8011048:	6563      	strge	r3, [r4, #84]	@ 0x54
 801104a:	81a3      	strhlt	r3, [r4, #12]
 801104c:	bd10      	pop	{r4, pc}

0801104e <__swrite>:
 801104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011052:	461f      	mov	r7, r3
 8011054:	898b      	ldrh	r3, [r1, #12]
 8011056:	4605      	mov	r5, r0
 8011058:	05db      	lsls	r3, r3, #23
 801105a:	460c      	mov	r4, r1
 801105c:	4616      	mov	r6, r2
 801105e:	d505      	bpl.n	801106c <__swrite+0x1e>
 8011060:	2302      	movs	r3, #2
 8011062:	2200      	movs	r2, #0
 8011064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011068:	f000 f8d4 	bl	8011214 <_lseek_r>
 801106c:	89a3      	ldrh	r3, [r4, #12]
 801106e:	4632      	mov	r2, r6
 8011070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011074:	81a3      	strh	r3, [r4, #12]
 8011076:	4628      	mov	r0, r5
 8011078:	463b      	mov	r3, r7
 801107a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801107e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011082:	f000 b8eb 	b.w	801125c <_write_r>

08011086 <__sseek>:
 8011086:	b510      	push	{r4, lr}
 8011088:	460c      	mov	r4, r1
 801108a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801108e:	f000 f8c1 	bl	8011214 <_lseek_r>
 8011092:	1c43      	adds	r3, r0, #1
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	bf15      	itete	ne
 8011098:	6560      	strne	r0, [r4, #84]	@ 0x54
 801109a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801109e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80110a2:	81a3      	strheq	r3, [r4, #12]
 80110a4:	bf18      	it	ne
 80110a6:	81a3      	strhne	r3, [r4, #12]
 80110a8:	bd10      	pop	{r4, pc}

080110aa <__sclose>:
 80110aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ae:	f000 b8a1 	b.w	80111f4 <_close_r>

080110b2 <__swbuf_r>:
 80110b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b4:	460e      	mov	r6, r1
 80110b6:	4614      	mov	r4, r2
 80110b8:	4605      	mov	r5, r0
 80110ba:	b118      	cbz	r0, 80110c4 <__swbuf_r+0x12>
 80110bc:	6a03      	ldr	r3, [r0, #32]
 80110be:	b90b      	cbnz	r3, 80110c4 <__swbuf_r+0x12>
 80110c0:	f7ff feba 	bl	8010e38 <__sinit>
 80110c4:	69a3      	ldr	r3, [r4, #24]
 80110c6:	60a3      	str	r3, [r4, #8]
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	071a      	lsls	r2, r3, #28
 80110cc:	d501      	bpl.n	80110d2 <__swbuf_r+0x20>
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	b943      	cbnz	r3, 80110e4 <__swbuf_r+0x32>
 80110d2:	4621      	mov	r1, r4
 80110d4:	4628      	mov	r0, r5
 80110d6:	f000 f82b 	bl	8011130 <__swsetup_r>
 80110da:	b118      	cbz	r0, 80110e4 <__swbuf_r+0x32>
 80110dc:	f04f 37ff 	mov.w	r7, #4294967295
 80110e0:	4638      	mov	r0, r7
 80110e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	6922      	ldr	r2, [r4, #16]
 80110e8:	b2f6      	uxtb	r6, r6
 80110ea:	1a98      	subs	r0, r3, r2
 80110ec:	6963      	ldr	r3, [r4, #20]
 80110ee:	4637      	mov	r7, r6
 80110f0:	4283      	cmp	r3, r0
 80110f2:	dc05      	bgt.n	8011100 <__swbuf_r+0x4e>
 80110f4:	4621      	mov	r1, r4
 80110f6:	4628      	mov	r0, r5
 80110f8:	f7ff fdd6 	bl	8010ca8 <_fflush_r>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d1ed      	bne.n	80110dc <__swbuf_r+0x2a>
 8011100:	68a3      	ldr	r3, [r4, #8]
 8011102:	3b01      	subs	r3, #1
 8011104:	60a3      	str	r3, [r4, #8]
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	6022      	str	r2, [r4, #0]
 801110c:	701e      	strb	r6, [r3, #0]
 801110e:	6962      	ldr	r2, [r4, #20]
 8011110:	1c43      	adds	r3, r0, #1
 8011112:	429a      	cmp	r2, r3
 8011114:	d004      	beq.n	8011120 <__swbuf_r+0x6e>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	07db      	lsls	r3, r3, #31
 801111a:	d5e1      	bpl.n	80110e0 <__swbuf_r+0x2e>
 801111c:	2e0a      	cmp	r6, #10
 801111e:	d1df      	bne.n	80110e0 <__swbuf_r+0x2e>
 8011120:	4621      	mov	r1, r4
 8011122:	4628      	mov	r0, r5
 8011124:	f7ff fdc0 	bl	8010ca8 <_fflush_r>
 8011128:	2800      	cmp	r0, #0
 801112a:	d0d9      	beq.n	80110e0 <__swbuf_r+0x2e>
 801112c:	e7d6      	b.n	80110dc <__swbuf_r+0x2a>
	...

08011130 <__swsetup_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	4b29      	ldr	r3, [pc, #164]	@ (80111d8 <__swsetup_r+0xa8>)
 8011134:	4605      	mov	r5, r0
 8011136:	6818      	ldr	r0, [r3, #0]
 8011138:	460c      	mov	r4, r1
 801113a:	b118      	cbz	r0, 8011144 <__swsetup_r+0x14>
 801113c:	6a03      	ldr	r3, [r0, #32]
 801113e:	b90b      	cbnz	r3, 8011144 <__swsetup_r+0x14>
 8011140:	f7ff fe7a 	bl	8010e38 <__sinit>
 8011144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011148:	0719      	lsls	r1, r3, #28
 801114a:	d422      	bmi.n	8011192 <__swsetup_r+0x62>
 801114c:	06da      	lsls	r2, r3, #27
 801114e:	d407      	bmi.n	8011160 <__swsetup_r+0x30>
 8011150:	2209      	movs	r2, #9
 8011152:	602a      	str	r2, [r5, #0]
 8011154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011158:	f04f 30ff 	mov.w	r0, #4294967295
 801115c:	81a3      	strh	r3, [r4, #12]
 801115e:	e033      	b.n	80111c8 <__swsetup_r+0x98>
 8011160:	0758      	lsls	r0, r3, #29
 8011162:	d512      	bpl.n	801118a <__swsetup_r+0x5a>
 8011164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011166:	b141      	cbz	r1, 801117a <__swsetup_r+0x4a>
 8011168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801116c:	4299      	cmp	r1, r3
 801116e:	d002      	beq.n	8011176 <__swsetup_r+0x46>
 8011170:	4628      	mov	r0, r5
 8011172:	f000 ff11 	bl	8011f98 <_free_r>
 8011176:	2300      	movs	r3, #0
 8011178:	6363      	str	r3, [r4, #52]	@ 0x34
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	2300      	movs	r3, #0
 8011184:	6063      	str	r3, [r4, #4]
 8011186:	6923      	ldr	r3, [r4, #16]
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	f043 0308 	orr.w	r3, r3, #8
 8011190:	81a3      	strh	r3, [r4, #12]
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	b94b      	cbnz	r3, 80111aa <__swsetup_r+0x7a>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801119c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111a0:	d003      	beq.n	80111aa <__swsetup_r+0x7a>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4628      	mov	r0, r5
 80111a6:	f001 fe32 	bl	8012e0e <__smakebuf_r>
 80111aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111ae:	f013 0201 	ands.w	r2, r3, #1
 80111b2:	d00a      	beq.n	80111ca <__swsetup_r+0x9a>
 80111b4:	2200      	movs	r2, #0
 80111b6:	60a2      	str	r2, [r4, #8]
 80111b8:	6962      	ldr	r2, [r4, #20]
 80111ba:	4252      	negs	r2, r2
 80111bc:	61a2      	str	r2, [r4, #24]
 80111be:	6922      	ldr	r2, [r4, #16]
 80111c0:	b942      	cbnz	r2, 80111d4 <__swsetup_r+0xa4>
 80111c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80111c6:	d1c5      	bne.n	8011154 <__swsetup_r+0x24>
 80111c8:	bd38      	pop	{r3, r4, r5, pc}
 80111ca:	0799      	lsls	r1, r3, #30
 80111cc:	bf58      	it	pl
 80111ce:	6962      	ldrpl	r2, [r4, #20]
 80111d0:	60a2      	str	r2, [r4, #8]
 80111d2:	e7f4      	b.n	80111be <__swsetup_r+0x8e>
 80111d4:	2000      	movs	r0, #0
 80111d6:	e7f7      	b.n	80111c8 <__swsetup_r+0x98>
 80111d8:	200001a4 	.word	0x200001a4

080111dc <memset>:
 80111dc:	4603      	mov	r3, r0
 80111de:	4402      	add	r2, r0
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d100      	bne.n	80111e6 <memset+0xa>
 80111e4:	4770      	bx	lr
 80111e6:	f803 1b01 	strb.w	r1, [r3], #1
 80111ea:	e7f9      	b.n	80111e0 <memset+0x4>

080111ec <_localeconv_r>:
 80111ec:	4800      	ldr	r0, [pc, #0]	@ (80111f0 <_localeconv_r+0x4>)
 80111ee:	4770      	bx	lr
 80111f0:	200002e4 	.word	0x200002e4

080111f4 <_close_r>:
 80111f4:	b538      	push	{r3, r4, r5, lr}
 80111f6:	2300      	movs	r3, #0
 80111f8:	4d05      	ldr	r5, [pc, #20]	@ (8011210 <_close_r+0x1c>)
 80111fa:	4604      	mov	r4, r0
 80111fc:	4608      	mov	r0, r1
 80111fe:	602b      	str	r3, [r5, #0]
 8011200:	f7f1 fb85 	bl	800290e <_close>
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	d102      	bne.n	801120e <_close_r+0x1a>
 8011208:	682b      	ldr	r3, [r5, #0]
 801120a:	b103      	cbz	r3, 801120e <_close_r+0x1a>
 801120c:	6023      	str	r3, [r4, #0]
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	200009c8 	.word	0x200009c8

08011214 <_lseek_r>:
 8011214:	b538      	push	{r3, r4, r5, lr}
 8011216:	4604      	mov	r4, r0
 8011218:	4608      	mov	r0, r1
 801121a:	4611      	mov	r1, r2
 801121c:	2200      	movs	r2, #0
 801121e:	4d05      	ldr	r5, [pc, #20]	@ (8011234 <_lseek_r+0x20>)
 8011220:	602a      	str	r2, [r5, #0]
 8011222:	461a      	mov	r2, r3
 8011224:	f7f1 fb97 	bl	8002956 <_lseek>
 8011228:	1c43      	adds	r3, r0, #1
 801122a:	d102      	bne.n	8011232 <_lseek_r+0x1e>
 801122c:	682b      	ldr	r3, [r5, #0]
 801122e:	b103      	cbz	r3, 8011232 <_lseek_r+0x1e>
 8011230:	6023      	str	r3, [r4, #0]
 8011232:	bd38      	pop	{r3, r4, r5, pc}
 8011234:	200009c8 	.word	0x200009c8

08011238 <_read_r>:
 8011238:	b538      	push	{r3, r4, r5, lr}
 801123a:	4604      	mov	r4, r0
 801123c:	4608      	mov	r0, r1
 801123e:	4611      	mov	r1, r2
 8011240:	2200      	movs	r2, #0
 8011242:	4d05      	ldr	r5, [pc, #20]	@ (8011258 <_read_r+0x20>)
 8011244:	602a      	str	r2, [r5, #0]
 8011246:	461a      	mov	r2, r3
 8011248:	f7f1 fb28 	bl	800289c <_read>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	d102      	bne.n	8011256 <_read_r+0x1e>
 8011250:	682b      	ldr	r3, [r5, #0]
 8011252:	b103      	cbz	r3, 8011256 <_read_r+0x1e>
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	200009c8 	.word	0x200009c8

0801125c <_write_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	4611      	mov	r1, r2
 8011264:	2200      	movs	r2, #0
 8011266:	4d05      	ldr	r5, [pc, #20]	@ (801127c <_write_r+0x20>)
 8011268:	602a      	str	r2, [r5, #0]
 801126a:	461a      	mov	r2, r3
 801126c:	f7f1 fb33 	bl	80028d6 <_write>
 8011270:	1c43      	adds	r3, r0, #1
 8011272:	d102      	bne.n	801127a <_write_r+0x1e>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	b103      	cbz	r3, 801127a <_write_r+0x1e>
 8011278:	6023      	str	r3, [r4, #0]
 801127a:	bd38      	pop	{r3, r4, r5, pc}
 801127c:	200009c8 	.word	0x200009c8

08011280 <__errno>:
 8011280:	4b01      	ldr	r3, [pc, #4]	@ (8011288 <__errno+0x8>)
 8011282:	6818      	ldr	r0, [r3, #0]
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	200001a4 	.word	0x200001a4

0801128c <__libc_init_array>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	2600      	movs	r6, #0
 8011290:	4d0c      	ldr	r5, [pc, #48]	@ (80112c4 <__libc_init_array+0x38>)
 8011292:	4c0d      	ldr	r4, [pc, #52]	@ (80112c8 <__libc_init_array+0x3c>)
 8011294:	1b64      	subs	r4, r4, r5
 8011296:	10a4      	asrs	r4, r4, #2
 8011298:	42a6      	cmp	r6, r4
 801129a:	d109      	bne.n	80112b0 <__libc_init_array+0x24>
 801129c:	f002 fe9a 	bl	8013fd4 <_init>
 80112a0:	2600      	movs	r6, #0
 80112a2:	4d0a      	ldr	r5, [pc, #40]	@ (80112cc <__libc_init_array+0x40>)
 80112a4:	4c0a      	ldr	r4, [pc, #40]	@ (80112d0 <__libc_init_array+0x44>)
 80112a6:	1b64      	subs	r4, r4, r5
 80112a8:	10a4      	asrs	r4, r4, #2
 80112aa:	42a6      	cmp	r6, r4
 80112ac:	d105      	bne.n	80112ba <__libc_init_array+0x2e>
 80112ae:	bd70      	pop	{r4, r5, r6, pc}
 80112b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80112b4:	4798      	blx	r3
 80112b6:	3601      	adds	r6, #1
 80112b8:	e7ee      	b.n	8011298 <__libc_init_array+0xc>
 80112ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80112be:	4798      	blx	r3
 80112c0:	3601      	adds	r6, #1
 80112c2:	e7f2      	b.n	80112aa <__libc_init_array+0x1e>
 80112c4:	080144f8 	.word	0x080144f8
 80112c8:	080144f8 	.word	0x080144f8
 80112cc:	080144f8 	.word	0x080144f8
 80112d0:	080144fc 	.word	0x080144fc

080112d4 <__retarget_lock_init_recursive>:
 80112d4:	4770      	bx	lr

080112d6 <__retarget_lock_acquire_recursive>:
 80112d6:	4770      	bx	lr

080112d8 <__retarget_lock_release_recursive>:
 80112d8:	4770      	bx	lr

080112da <memchr>:
 80112da:	4603      	mov	r3, r0
 80112dc:	b510      	push	{r4, lr}
 80112de:	b2c9      	uxtb	r1, r1
 80112e0:	4402      	add	r2, r0
 80112e2:	4293      	cmp	r3, r2
 80112e4:	4618      	mov	r0, r3
 80112e6:	d101      	bne.n	80112ec <memchr+0x12>
 80112e8:	2000      	movs	r0, #0
 80112ea:	e003      	b.n	80112f4 <memchr+0x1a>
 80112ec:	7804      	ldrb	r4, [r0, #0]
 80112ee:	3301      	adds	r3, #1
 80112f0:	428c      	cmp	r4, r1
 80112f2:	d1f6      	bne.n	80112e2 <memchr+0x8>
 80112f4:	bd10      	pop	{r4, pc}

080112f6 <quorem>:
 80112f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fa:	6903      	ldr	r3, [r0, #16]
 80112fc:	690c      	ldr	r4, [r1, #16]
 80112fe:	4607      	mov	r7, r0
 8011300:	42a3      	cmp	r3, r4
 8011302:	db7e      	blt.n	8011402 <quorem+0x10c>
 8011304:	3c01      	subs	r4, #1
 8011306:	00a3      	lsls	r3, r4, #2
 8011308:	f100 0514 	add.w	r5, r0, #20
 801130c:	f101 0814 	add.w	r8, r1, #20
 8011310:	9300      	str	r3, [sp, #0]
 8011312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011316:	9301      	str	r3, [sp, #4]
 8011318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801131c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011320:	3301      	adds	r3, #1
 8011322:	429a      	cmp	r2, r3
 8011324:	fbb2 f6f3 	udiv	r6, r2, r3
 8011328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801132c:	d32e      	bcc.n	801138c <quorem+0x96>
 801132e:	f04f 0a00 	mov.w	sl, #0
 8011332:	46c4      	mov	ip, r8
 8011334:	46ae      	mov	lr, r5
 8011336:	46d3      	mov	fp, sl
 8011338:	f85c 3b04 	ldr.w	r3, [ip], #4
 801133c:	b298      	uxth	r0, r3
 801133e:	fb06 a000 	mla	r0, r6, r0, sl
 8011342:	0c1b      	lsrs	r3, r3, #16
 8011344:	0c02      	lsrs	r2, r0, #16
 8011346:	fb06 2303 	mla	r3, r6, r3, r2
 801134a:	f8de 2000 	ldr.w	r2, [lr]
 801134e:	b280      	uxth	r0, r0
 8011350:	b292      	uxth	r2, r2
 8011352:	1a12      	subs	r2, r2, r0
 8011354:	445a      	add	r2, fp
 8011356:	f8de 0000 	ldr.w	r0, [lr]
 801135a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801135e:	b29b      	uxth	r3, r3
 8011360:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011364:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011368:	b292      	uxth	r2, r2
 801136a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801136e:	45e1      	cmp	r9, ip
 8011370:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011374:	f84e 2b04 	str.w	r2, [lr], #4
 8011378:	d2de      	bcs.n	8011338 <quorem+0x42>
 801137a:	9b00      	ldr	r3, [sp, #0]
 801137c:	58eb      	ldr	r3, [r5, r3]
 801137e:	b92b      	cbnz	r3, 801138c <quorem+0x96>
 8011380:	9b01      	ldr	r3, [sp, #4]
 8011382:	3b04      	subs	r3, #4
 8011384:	429d      	cmp	r5, r3
 8011386:	461a      	mov	r2, r3
 8011388:	d32f      	bcc.n	80113ea <quorem+0xf4>
 801138a:	613c      	str	r4, [r7, #16]
 801138c:	4638      	mov	r0, r7
 801138e:	f001 f979 	bl	8012684 <__mcmp>
 8011392:	2800      	cmp	r0, #0
 8011394:	db25      	blt.n	80113e2 <quorem+0xec>
 8011396:	4629      	mov	r1, r5
 8011398:	2000      	movs	r0, #0
 801139a:	f858 2b04 	ldr.w	r2, [r8], #4
 801139e:	f8d1 c000 	ldr.w	ip, [r1]
 80113a2:	fa1f fe82 	uxth.w	lr, r2
 80113a6:	fa1f f38c 	uxth.w	r3, ip
 80113aa:	eba3 030e 	sub.w	r3, r3, lr
 80113ae:	4403      	add	r3, r0
 80113b0:	0c12      	lsrs	r2, r2, #16
 80113b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80113b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113c0:	45c1      	cmp	r9, r8
 80113c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80113c6:	f841 3b04 	str.w	r3, [r1], #4
 80113ca:	d2e6      	bcs.n	801139a <quorem+0xa4>
 80113cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113d4:	b922      	cbnz	r2, 80113e0 <quorem+0xea>
 80113d6:	3b04      	subs	r3, #4
 80113d8:	429d      	cmp	r5, r3
 80113da:	461a      	mov	r2, r3
 80113dc:	d30b      	bcc.n	80113f6 <quorem+0x100>
 80113de:	613c      	str	r4, [r7, #16]
 80113e0:	3601      	adds	r6, #1
 80113e2:	4630      	mov	r0, r6
 80113e4:	b003      	add	sp, #12
 80113e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ea:	6812      	ldr	r2, [r2, #0]
 80113ec:	3b04      	subs	r3, #4
 80113ee:	2a00      	cmp	r2, #0
 80113f0:	d1cb      	bne.n	801138a <quorem+0x94>
 80113f2:	3c01      	subs	r4, #1
 80113f4:	e7c6      	b.n	8011384 <quorem+0x8e>
 80113f6:	6812      	ldr	r2, [r2, #0]
 80113f8:	3b04      	subs	r3, #4
 80113fa:	2a00      	cmp	r2, #0
 80113fc:	d1ef      	bne.n	80113de <quorem+0xe8>
 80113fe:	3c01      	subs	r4, #1
 8011400:	e7ea      	b.n	80113d8 <quorem+0xe2>
 8011402:	2000      	movs	r0, #0
 8011404:	e7ee      	b.n	80113e4 <quorem+0xee>
	...

08011408 <_dtoa_r>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	4614      	mov	r4, r2
 801140e:	461d      	mov	r5, r3
 8011410:	69c7      	ldr	r7, [r0, #28]
 8011412:	b097      	sub	sp, #92	@ 0x5c
 8011414:	4683      	mov	fp, r0
 8011416:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801141a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801141c:	b97f      	cbnz	r7, 801143e <_dtoa_r+0x36>
 801141e:	2010      	movs	r0, #16
 8011420:	f000 fe02 	bl	8012028 <malloc>
 8011424:	4602      	mov	r2, r0
 8011426:	f8cb 001c 	str.w	r0, [fp, #28]
 801142a:	b920      	cbnz	r0, 8011436 <_dtoa_r+0x2e>
 801142c:	21ef      	movs	r1, #239	@ 0xef
 801142e:	4ba8      	ldr	r3, [pc, #672]	@ (80116d0 <_dtoa_r+0x2c8>)
 8011430:	48a8      	ldr	r0, [pc, #672]	@ (80116d4 <_dtoa_r+0x2cc>)
 8011432:	f001 fd83 	bl	8012f3c <__assert_func>
 8011436:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801143a:	6007      	str	r7, [r0, #0]
 801143c:	60c7      	str	r7, [r0, #12]
 801143e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011442:	6819      	ldr	r1, [r3, #0]
 8011444:	b159      	cbz	r1, 801145e <_dtoa_r+0x56>
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	2301      	movs	r3, #1
 801144a:	4093      	lsls	r3, r2
 801144c:	604a      	str	r2, [r1, #4]
 801144e:	608b      	str	r3, [r1, #8]
 8011450:	4658      	mov	r0, fp
 8011452:	f000 fedf 	bl	8012214 <_Bfree>
 8011456:	2200      	movs	r2, #0
 8011458:	f8db 301c 	ldr.w	r3, [fp, #28]
 801145c:	601a      	str	r2, [r3, #0]
 801145e:	1e2b      	subs	r3, r5, #0
 8011460:	bfaf      	iteee	ge
 8011462:	2300      	movge	r3, #0
 8011464:	2201      	movlt	r2, #1
 8011466:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801146a:	9303      	strlt	r3, [sp, #12]
 801146c:	bfa8      	it	ge
 801146e:	6033      	strge	r3, [r6, #0]
 8011470:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011474:	4b98      	ldr	r3, [pc, #608]	@ (80116d8 <_dtoa_r+0x2d0>)
 8011476:	bfb8      	it	lt
 8011478:	6032      	strlt	r2, [r6, #0]
 801147a:	ea33 0308 	bics.w	r3, r3, r8
 801147e:	d112      	bne.n	80114a6 <_dtoa_r+0x9e>
 8011480:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011484:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011486:	6013      	str	r3, [r2, #0]
 8011488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801148c:	4323      	orrs	r3, r4
 801148e:	f000 8550 	beq.w	8011f32 <_dtoa_r+0xb2a>
 8011492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011494:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80116dc <_dtoa_r+0x2d4>
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 8552 	beq.w	8011f42 <_dtoa_r+0xb3a>
 801149e:	f10a 0303 	add.w	r3, sl, #3
 80114a2:	f000 bd4c 	b.w	8011f3e <_dtoa_r+0xb36>
 80114a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80114ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114b2:	2200      	movs	r2, #0
 80114b4:	2300      	movs	r3, #0
 80114b6:	f7ef fa8f 	bl	80009d8 <__aeabi_dcmpeq>
 80114ba:	4607      	mov	r7, r0
 80114bc:	b158      	cbz	r0, 80114d6 <_dtoa_r+0xce>
 80114be:	2301      	movs	r3, #1
 80114c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80114c2:	6013      	str	r3, [r2, #0]
 80114c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80114c6:	b113      	cbz	r3, 80114ce <_dtoa_r+0xc6>
 80114c8:	4b85      	ldr	r3, [pc, #532]	@ (80116e0 <_dtoa_r+0x2d8>)
 80114ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80114cc:	6013      	str	r3, [r2, #0]
 80114ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80116e4 <_dtoa_r+0x2dc>
 80114d2:	f000 bd36 	b.w	8011f42 <_dtoa_r+0xb3a>
 80114d6:	ab14      	add	r3, sp, #80	@ 0x50
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	ab15      	add	r3, sp, #84	@ 0x54
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	4658      	mov	r0, fp
 80114e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80114e4:	f001 f97e 	bl	80127e4 <__d2b>
 80114e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80114ec:	4681      	mov	r9, r0
 80114ee:	2e00      	cmp	r6, #0
 80114f0:	d077      	beq.n	80115e2 <_dtoa_r+0x1da>
 80114f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80114fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011500:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011504:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011508:	9712      	str	r7, [sp, #72]	@ 0x48
 801150a:	4619      	mov	r1, r3
 801150c:	2200      	movs	r2, #0
 801150e:	4b76      	ldr	r3, [pc, #472]	@ (80116e8 <_dtoa_r+0x2e0>)
 8011510:	f7ee fe42 	bl	8000198 <__aeabi_dsub>
 8011514:	a368      	add	r3, pc, #416	@ (adr r3, 80116b8 <_dtoa_r+0x2b0>)
 8011516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151a:	f7ee fff5 	bl	8000508 <__aeabi_dmul>
 801151e:	a368      	add	r3, pc, #416	@ (adr r3, 80116c0 <_dtoa_r+0x2b8>)
 8011520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011524:	f7ee fe3a 	bl	800019c <__adddf3>
 8011528:	4604      	mov	r4, r0
 801152a:	4630      	mov	r0, r6
 801152c:	460d      	mov	r5, r1
 801152e:	f7ee ff81 	bl	8000434 <__aeabi_i2d>
 8011532:	a365      	add	r3, pc, #404	@ (adr r3, 80116c8 <_dtoa_r+0x2c0>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee ffe6 	bl	8000508 <__aeabi_dmul>
 801153c:	4602      	mov	r2, r0
 801153e:	460b      	mov	r3, r1
 8011540:	4620      	mov	r0, r4
 8011542:	4629      	mov	r1, r5
 8011544:	f7ee fe2a 	bl	800019c <__adddf3>
 8011548:	4604      	mov	r4, r0
 801154a:	460d      	mov	r5, r1
 801154c:	f7ef fa8c 	bl	8000a68 <__aeabi_d2iz>
 8011550:	2200      	movs	r2, #0
 8011552:	4607      	mov	r7, r0
 8011554:	2300      	movs	r3, #0
 8011556:	4620      	mov	r0, r4
 8011558:	4629      	mov	r1, r5
 801155a:	f7ef fa47 	bl	80009ec <__aeabi_dcmplt>
 801155e:	b140      	cbz	r0, 8011572 <_dtoa_r+0x16a>
 8011560:	4638      	mov	r0, r7
 8011562:	f7ee ff67 	bl	8000434 <__aeabi_i2d>
 8011566:	4622      	mov	r2, r4
 8011568:	462b      	mov	r3, r5
 801156a:	f7ef fa35 	bl	80009d8 <__aeabi_dcmpeq>
 801156e:	b900      	cbnz	r0, 8011572 <_dtoa_r+0x16a>
 8011570:	3f01      	subs	r7, #1
 8011572:	2f16      	cmp	r7, #22
 8011574:	d853      	bhi.n	801161e <_dtoa_r+0x216>
 8011576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801157a:	4b5c      	ldr	r3, [pc, #368]	@ (80116ec <_dtoa_r+0x2e4>)
 801157c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011584:	f7ef fa32 	bl	80009ec <__aeabi_dcmplt>
 8011588:	2800      	cmp	r0, #0
 801158a:	d04a      	beq.n	8011622 <_dtoa_r+0x21a>
 801158c:	2300      	movs	r3, #0
 801158e:	3f01      	subs	r7, #1
 8011590:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011594:	1b9b      	subs	r3, r3, r6
 8011596:	1e5a      	subs	r2, r3, #1
 8011598:	bf46      	itte	mi
 801159a:	f1c3 0801 	rsbmi	r8, r3, #1
 801159e:	2300      	movmi	r3, #0
 80115a0:	f04f 0800 	movpl.w	r8, #0
 80115a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80115a6:	bf48      	it	mi
 80115a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80115aa:	2f00      	cmp	r7, #0
 80115ac:	db3b      	blt.n	8011626 <_dtoa_r+0x21e>
 80115ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80115b2:	443b      	add	r3, r7
 80115b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80115b6:	2300      	movs	r3, #0
 80115b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80115ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80115bc:	2b09      	cmp	r3, #9
 80115be:	d866      	bhi.n	801168e <_dtoa_r+0x286>
 80115c0:	2b05      	cmp	r3, #5
 80115c2:	bfc4      	itt	gt
 80115c4:	3b04      	subgt	r3, #4
 80115c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80115c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80115ca:	bfc8      	it	gt
 80115cc:	2400      	movgt	r4, #0
 80115ce:	f1a3 0302 	sub.w	r3, r3, #2
 80115d2:	bfd8      	it	le
 80115d4:	2401      	movle	r4, #1
 80115d6:	2b03      	cmp	r3, #3
 80115d8:	d864      	bhi.n	80116a4 <_dtoa_r+0x29c>
 80115da:	e8df f003 	tbb	[pc, r3]
 80115de:	382b      	.short	0x382b
 80115e0:	5636      	.short	0x5636
 80115e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80115e6:	441e      	add	r6, r3
 80115e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80115ec:	2b20      	cmp	r3, #32
 80115ee:	bfc1      	itttt	gt
 80115f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80115f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80115f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80115fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011600:	bfd6      	itet	le
 8011602:	f1c3 0320 	rsble	r3, r3, #32
 8011606:	ea48 0003 	orrgt.w	r0, r8, r3
 801160a:	fa04 f003 	lslle.w	r0, r4, r3
 801160e:	f7ee ff01 	bl	8000414 <__aeabi_ui2d>
 8011612:	2201      	movs	r2, #1
 8011614:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011618:	3e01      	subs	r6, #1
 801161a:	9212      	str	r2, [sp, #72]	@ 0x48
 801161c:	e775      	b.n	801150a <_dtoa_r+0x102>
 801161e:	2301      	movs	r3, #1
 8011620:	e7b6      	b.n	8011590 <_dtoa_r+0x188>
 8011622:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011624:	e7b5      	b.n	8011592 <_dtoa_r+0x18a>
 8011626:	427b      	negs	r3, r7
 8011628:	930a      	str	r3, [sp, #40]	@ 0x28
 801162a:	2300      	movs	r3, #0
 801162c:	eba8 0807 	sub.w	r8, r8, r7
 8011630:	930e      	str	r3, [sp, #56]	@ 0x38
 8011632:	e7c2      	b.n	80115ba <_dtoa_r+0x1b2>
 8011634:	2300      	movs	r3, #0
 8011636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801163a:	2b00      	cmp	r3, #0
 801163c:	dc35      	bgt.n	80116aa <_dtoa_r+0x2a2>
 801163e:	2301      	movs	r3, #1
 8011640:	461a      	mov	r2, r3
 8011642:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8011646:	9221      	str	r2, [sp, #132]	@ 0x84
 8011648:	e00b      	b.n	8011662 <_dtoa_r+0x25a>
 801164a:	2301      	movs	r3, #1
 801164c:	e7f3      	b.n	8011636 <_dtoa_r+0x22e>
 801164e:	2300      	movs	r3, #0
 8011650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011654:	18fb      	adds	r3, r7, r3
 8011656:	9308      	str	r3, [sp, #32]
 8011658:	3301      	adds	r3, #1
 801165a:	2b01      	cmp	r3, #1
 801165c:	9307      	str	r3, [sp, #28]
 801165e:	bfb8      	it	lt
 8011660:	2301      	movlt	r3, #1
 8011662:	2100      	movs	r1, #0
 8011664:	2204      	movs	r2, #4
 8011666:	f8db 001c 	ldr.w	r0, [fp, #28]
 801166a:	f102 0514 	add.w	r5, r2, #20
 801166e:	429d      	cmp	r5, r3
 8011670:	d91f      	bls.n	80116b2 <_dtoa_r+0x2aa>
 8011672:	6041      	str	r1, [r0, #4]
 8011674:	4658      	mov	r0, fp
 8011676:	f000 fd8d 	bl	8012194 <_Balloc>
 801167a:	4682      	mov	sl, r0
 801167c:	2800      	cmp	r0, #0
 801167e:	d139      	bne.n	80116f4 <_dtoa_r+0x2ec>
 8011680:	4602      	mov	r2, r0
 8011682:	f240 11af 	movw	r1, #431	@ 0x1af
 8011686:	4b1a      	ldr	r3, [pc, #104]	@ (80116f0 <_dtoa_r+0x2e8>)
 8011688:	e6d2      	b.n	8011430 <_dtoa_r+0x28>
 801168a:	2301      	movs	r3, #1
 801168c:	e7e0      	b.n	8011650 <_dtoa_r+0x248>
 801168e:	2401      	movs	r4, #1
 8011690:	2300      	movs	r3, #0
 8011692:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011694:	9320      	str	r3, [sp, #128]	@ 0x80
 8011696:	f04f 33ff 	mov.w	r3, #4294967295
 801169a:	2200      	movs	r2, #0
 801169c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80116a0:	2312      	movs	r3, #18
 80116a2:	e7d0      	b.n	8011646 <_dtoa_r+0x23e>
 80116a4:	2301      	movs	r3, #1
 80116a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116a8:	e7f5      	b.n	8011696 <_dtoa_r+0x28e>
 80116aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80116ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80116b0:	e7d7      	b.n	8011662 <_dtoa_r+0x25a>
 80116b2:	3101      	adds	r1, #1
 80116b4:	0052      	lsls	r2, r2, #1
 80116b6:	e7d8      	b.n	801166a <_dtoa_r+0x262>
 80116b8:	636f4361 	.word	0x636f4361
 80116bc:	3fd287a7 	.word	0x3fd287a7
 80116c0:	8b60c8b3 	.word	0x8b60c8b3
 80116c4:	3fc68a28 	.word	0x3fc68a28
 80116c8:	509f79fb 	.word	0x509f79fb
 80116cc:	3fd34413 	.word	0x3fd34413
 80116d0:	0801418d 	.word	0x0801418d
 80116d4:	080141a4 	.word	0x080141a4
 80116d8:	7ff00000 	.word	0x7ff00000
 80116dc:	08014189 	.word	0x08014189
 80116e0:	0801415d 	.word	0x0801415d
 80116e4:	0801415c 	.word	0x0801415c
 80116e8:	3ff80000 	.word	0x3ff80000
 80116ec:	080142a0 	.word	0x080142a0
 80116f0:	080141fc 	.word	0x080141fc
 80116f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80116f8:	6018      	str	r0, [r3, #0]
 80116fa:	9b07      	ldr	r3, [sp, #28]
 80116fc:	2b0e      	cmp	r3, #14
 80116fe:	f200 80a4 	bhi.w	801184a <_dtoa_r+0x442>
 8011702:	2c00      	cmp	r4, #0
 8011704:	f000 80a1 	beq.w	801184a <_dtoa_r+0x442>
 8011708:	2f00      	cmp	r7, #0
 801170a:	dd33      	ble.n	8011774 <_dtoa_r+0x36c>
 801170c:	4b86      	ldr	r3, [pc, #536]	@ (8011928 <_dtoa_r+0x520>)
 801170e:	f007 020f 	and.w	r2, r7, #15
 8011712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011716:	05f8      	lsls	r0, r7, #23
 8011718:	e9d3 3400 	ldrd	r3, r4, [r3]
 801171c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011720:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011724:	d516      	bpl.n	8011754 <_dtoa_r+0x34c>
 8011726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801172a:	4b80      	ldr	r3, [pc, #512]	@ (801192c <_dtoa_r+0x524>)
 801172c:	2603      	movs	r6, #3
 801172e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011732:	f7ef f813 	bl	800075c <__aeabi_ddiv>
 8011736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801173a:	f004 040f 	and.w	r4, r4, #15
 801173e:	4d7b      	ldr	r5, [pc, #492]	@ (801192c <_dtoa_r+0x524>)
 8011740:	b954      	cbnz	r4, 8011758 <_dtoa_r+0x350>
 8011742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801174a:	f7ef f807 	bl	800075c <__aeabi_ddiv>
 801174e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011752:	e028      	b.n	80117a6 <_dtoa_r+0x39e>
 8011754:	2602      	movs	r6, #2
 8011756:	e7f2      	b.n	801173e <_dtoa_r+0x336>
 8011758:	07e1      	lsls	r1, r4, #31
 801175a:	d508      	bpl.n	801176e <_dtoa_r+0x366>
 801175c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011760:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011764:	f7ee fed0 	bl	8000508 <__aeabi_dmul>
 8011768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801176c:	3601      	adds	r6, #1
 801176e:	1064      	asrs	r4, r4, #1
 8011770:	3508      	adds	r5, #8
 8011772:	e7e5      	b.n	8011740 <_dtoa_r+0x338>
 8011774:	f000 80d2 	beq.w	801191c <_dtoa_r+0x514>
 8011778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801177c:	427c      	negs	r4, r7
 801177e:	4b6a      	ldr	r3, [pc, #424]	@ (8011928 <_dtoa_r+0x520>)
 8011780:	f004 020f 	and.w	r2, r4, #15
 8011784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	f7ee febc 	bl	8000508 <__aeabi_dmul>
 8011790:	2602      	movs	r6, #2
 8011792:	2300      	movs	r3, #0
 8011794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011798:	4d64      	ldr	r5, [pc, #400]	@ (801192c <_dtoa_r+0x524>)
 801179a:	1124      	asrs	r4, r4, #4
 801179c:	2c00      	cmp	r4, #0
 801179e:	f040 80b2 	bne.w	8011906 <_dtoa_r+0x4fe>
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1d3      	bne.n	801174e <_dtoa_r+0x346>
 80117a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	f000 80b7 	beq.w	8011920 <_dtoa_r+0x518>
 80117b2:	2200      	movs	r2, #0
 80117b4:	4620      	mov	r0, r4
 80117b6:	4629      	mov	r1, r5
 80117b8:	4b5d      	ldr	r3, [pc, #372]	@ (8011930 <_dtoa_r+0x528>)
 80117ba:	f7ef f917 	bl	80009ec <__aeabi_dcmplt>
 80117be:	2800      	cmp	r0, #0
 80117c0:	f000 80ae 	beq.w	8011920 <_dtoa_r+0x518>
 80117c4:	9b07      	ldr	r3, [sp, #28]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 80aa 	beq.w	8011920 <_dtoa_r+0x518>
 80117cc:	9b08      	ldr	r3, [sp, #32]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dd37      	ble.n	8011842 <_dtoa_r+0x43a>
 80117d2:	1e7b      	subs	r3, r7, #1
 80117d4:	4620      	mov	r0, r4
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	2200      	movs	r2, #0
 80117da:	4629      	mov	r1, r5
 80117dc:	4b55      	ldr	r3, [pc, #340]	@ (8011934 <_dtoa_r+0x52c>)
 80117de:	f7ee fe93 	bl	8000508 <__aeabi_dmul>
 80117e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117e6:	9c08      	ldr	r4, [sp, #32]
 80117e8:	3601      	adds	r6, #1
 80117ea:	4630      	mov	r0, r6
 80117ec:	f7ee fe22 	bl	8000434 <__aeabi_i2d>
 80117f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80117f4:	f7ee fe88 	bl	8000508 <__aeabi_dmul>
 80117f8:	2200      	movs	r2, #0
 80117fa:	4b4f      	ldr	r3, [pc, #316]	@ (8011938 <_dtoa_r+0x530>)
 80117fc:	f7ee fcce 	bl	800019c <__adddf3>
 8011800:	4605      	mov	r5, r0
 8011802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011806:	2c00      	cmp	r4, #0
 8011808:	f040 809a 	bne.w	8011940 <_dtoa_r+0x538>
 801180c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011810:	2200      	movs	r2, #0
 8011812:	4b4a      	ldr	r3, [pc, #296]	@ (801193c <_dtoa_r+0x534>)
 8011814:	f7ee fcc0 	bl	8000198 <__aeabi_dsub>
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011820:	462a      	mov	r2, r5
 8011822:	4633      	mov	r3, r6
 8011824:	f7ef f900 	bl	8000a28 <__aeabi_dcmpgt>
 8011828:	2800      	cmp	r0, #0
 801182a:	f040 828e 	bne.w	8011d4a <_dtoa_r+0x942>
 801182e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011832:	462a      	mov	r2, r5
 8011834:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011838:	f7ef f8d8 	bl	80009ec <__aeabi_dcmplt>
 801183c:	2800      	cmp	r0, #0
 801183e:	f040 8127 	bne.w	8011a90 <_dtoa_r+0x688>
 8011842:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011846:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801184a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801184c:	2b00      	cmp	r3, #0
 801184e:	f2c0 8163 	blt.w	8011b18 <_dtoa_r+0x710>
 8011852:	2f0e      	cmp	r7, #14
 8011854:	f300 8160 	bgt.w	8011b18 <_dtoa_r+0x710>
 8011858:	4b33      	ldr	r3, [pc, #204]	@ (8011928 <_dtoa_r+0x520>)
 801185a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801185e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011862:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011868:	2b00      	cmp	r3, #0
 801186a:	da03      	bge.n	8011874 <_dtoa_r+0x46c>
 801186c:	9b07      	ldr	r3, [sp, #28]
 801186e:	2b00      	cmp	r3, #0
 8011870:	f340 8100 	ble.w	8011a74 <_dtoa_r+0x66c>
 8011874:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011878:	4656      	mov	r6, sl
 801187a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801187e:	4620      	mov	r0, r4
 8011880:	4629      	mov	r1, r5
 8011882:	f7ee ff6b 	bl	800075c <__aeabi_ddiv>
 8011886:	f7ef f8ef 	bl	8000a68 <__aeabi_d2iz>
 801188a:	4680      	mov	r8, r0
 801188c:	f7ee fdd2 	bl	8000434 <__aeabi_i2d>
 8011890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011894:	f7ee fe38 	bl	8000508 <__aeabi_dmul>
 8011898:	4602      	mov	r2, r0
 801189a:	460b      	mov	r3, r1
 801189c:	4620      	mov	r0, r4
 801189e:	4629      	mov	r1, r5
 80118a0:	f7ee fc7a 	bl	8000198 <__aeabi_dsub>
 80118a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80118a8:	9d07      	ldr	r5, [sp, #28]
 80118aa:	f806 4b01 	strb.w	r4, [r6], #1
 80118ae:	eba6 040a 	sub.w	r4, r6, sl
 80118b2:	42a5      	cmp	r5, r4
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	f040 8116 	bne.w	8011ae8 <_dtoa_r+0x6e0>
 80118bc:	f7ee fc6e 	bl	800019c <__adddf3>
 80118c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118c4:	4604      	mov	r4, r0
 80118c6:	460d      	mov	r5, r1
 80118c8:	f7ef f8ae 	bl	8000a28 <__aeabi_dcmpgt>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	f040 80f8 	bne.w	8011ac2 <_dtoa_r+0x6ba>
 80118d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118d6:	4620      	mov	r0, r4
 80118d8:	4629      	mov	r1, r5
 80118da:	f7ef f87d 	bl	80009d8 <__aeabi_dcmpeq>
 80118de:	b118      	cbz	r0, 80118e8 <_dtoa_r+0x4e0>
 80118e0:	f018 0f01 	tst.w	r8, #1
 80118e4:	f040 80ed 	bne.w	8011ac2 <_dtoa_r+0x6ba>
 80118e8:	4649      	mov	r1, r9
 80118ea:	4658      	mov	r0, fp
 80118ec:	f000 fc92 	bl	8012214 <_Bfree>
 80118f0:	2300      	movs	r3, #0
 80118f2:	7033      	strb	r3, [r6, #0]
 80118f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80118f6:	3701      	adds	r7, #1
 80118f8:	601f      	str	r7, [r3, #0]
 80118fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f000 8320 	beq.w	8011f42 <_dtoa_r+0xb3a>
 8011902:	601e      	str	r6, [r3, #0]
 8011904:	e31d      	b.n	8011f42 <_dtoa_r+0xb3a>
 8011906:	07e2      	lsls	r2, r4, #31
 8011908:	d505      	bpl.n	8011916 <_dtoa_r+0x50e>
 801190a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801190e:	f7ee fdfb 	bl	8000508 <__aeabi_dmul>
 8011912:	2301      	movs	r3, #1
 8011914:	3601      	adds	r6, #1
 8011916:	1064      	asrs	r4, r4, #1
 8011918:	3508      	adds	r5, #8
 801191a:	e73f      	b.n	801179c <_dtoa_r+0x394>
 801191c:	2602      	movs	r6, #2
 801191e:	e742      	b.n	80117a6 <_dtoa_r+0x39e>
 8011920:	9c07      	ldr	r4, [sp, #28]
 8011922:	9704      	str	r7, [sp, #16]
 8011924:	e761      	b.n	80117ea <_dtoa_r+0x3e2>
 8011926:	bf00      	nop
 8011928:	080142a0 	.word	0x080142a0
 801192c:	08014278 	.word	0x08014278
 8011930:	3ff00000 	.word	0x3ff00000
 8011934:	40240000 	.word	0x40240000
 8011938:	401c0000 	.word	0x401c0000
 801193c:	40140000 	.word	0x40140000
 8011940:	4b70      	ldr	r3, [pc, #448]	@ (8011b04 <_dtoa_r+0x6fc>)
 8011942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801194c:	4454      	add	r4, sl
 801194e:	2900      	cmp	r1, #0
 8011950:	d045      	beq.n	80119de <_dtoa_r+0x5d6>
 8011952:	2000      	movs	r0, #0
 8011954:	496c      	ldr	r1, [pc, #432]	@ (8011b08 <_dtoa_r+0x700>)
 8011956:	f7ee ff01 	bl	800075c <__aeabi_ddiv>
 801195a:	4633      	mov	r3, r6
 801195c:	462a      	mov	r2, r5
 801195e:	f7ee fc1b 	bl	8000198 <__aeabi_dsub>
 8011962:	4656      	mov	r6, sl
 8011964:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801196c:	f7ef f87c 	bl	8000a68 <__aeabi_d2iz>
 8011970:	4605      	mov	r5, r0
 8011972:	f7ee fd5f 	bl	8000434 <__aeabi_i2d>
 8011976:	4602      	mov	r2, r0
 8011978:	460b      	mov	r3, r1
 801197a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197e:	f7ee fc0b 	bl	8000198 <__aeabi_dsub>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	3530      	adds	r5, #48	@ 0x30
 8011988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801198c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011990:	f806 5b01 	strb.w	r5, [r6], #1
 8011994:	f7ef f82a 	bl	80009ec <__aeabi_dcmplt>
 8011998:	2800      	cmp	r0, #0
 801199a:	d163      	bne.n	8011a64 <_dtoa_r+0x65c>
 801199c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119a0:	2000      	movs	r0, #0
 80119a2:	495a      	ldr	r1, [pc, #360]	@ (8011b0c <_dtoa_r+0x704>)
 80119a4:	f7ee fbf8 	bl	8000198 <__aeabi_dsub>
 80119a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80119ac:	f7ef f81e 	bl	80009ec <__aeabi_dcmplt>
 80119b0:	2800      	cmp	r0, #0
 80119b2:	f040 8087 	bne.w	8011ac4 <_dtoa_r+0x6bc>
 80119b6:	42a6      	cmp	r6, r4
 80119b8:	f43f af43 	beq.w	8011842 <_dtoa_r+0x43a>
 80119bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80119c0:	2200      	movs	r2, #0
 80119c2:	4b53      	ldr	r3, [pc, #332]	@ (8011b10 <_dtoa_r+0x708>)
 80119c4:	f7ee fda0 	bl	8000508 <__aeabi_dmul>
 80119c8:	2200      	movs	r2, #0
 80119ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119d2:	4b4f      	ldr	r3, [pc, #316]	@ (8011b10 <_dtoa_r+0x708>)
 80119d4:	f7ee fd98 	bl	8000508 <__aeabi_dmul>
 80119d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119dc:	e7c4      	b.n	8011968 <_dtoa_r+0x560>
 80119de:	4631      	mov	r1, r6
 80119e0:	4628      	mov	r0, r5
 80119e2:	f7ee fd91 	bl	8000508 <__aeabi_dmul>
 80119e6:	4656      	mov	r6, sl
 80119e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80119ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80119ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119f2:	f7ef f839 	bl	8000a68 <__aeabi_d2iz>
 80119f6:	4605      	mov	r5, r0
 80119f8:	f7ee fd1c 	bl	8000434 <__aeabi_i2d>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a04:	f7ee fbc8 	bl	8000198 <__aeabi_dsub>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	3530      	adds	r5, #48	@ 0x30
 8011a0e:	f806 5b01 	strb.w	r5, [r6], #1
 8011a12:	42a6      	cmp	r6, r4
 8011a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a18:	f04f 0200 	mov.w	r2, #0
 8011a1c:	d124      	bne.n	8011a68 <_dtoa_r+0x660>
 8011a1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011a22:	4b39      	ldr	r3, [pc, #228]	@ (8011b08 <_dtoa_r+0x700>)
 8011a24:	f7ee fbba 	bl	800019c <__adddf3>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a30:	f7ee fffa 	bl	8000a28 <__aeabi_dcmpgt>
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d145      	bne.n	8011ac4 <_dtoa_r+0x6bc>
 8011a38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	4932      	ldr	r1, [pc, #200]	@ (8011b08 <_dtoa_r+0x700>)
 8011a40:	f7ee fbaa 	bl	8000198 <__aeabi_dsub>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a4c:	f7ee ffce 	bl	80009ec <__aeabi_dcmplt>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	f43f aef6 	beq.w	8011842 <_dtoa_r+0x43a>
 8011a56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8011a58:	1e73      	subs	r3, r6, #1
 8011a5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a60:	2b30      	cmp	r3, #48	@ 0x30
 8011a62:	d0f8      	beq.n	8011a56 <_dtoa_r+0x64e>
 8011a64:	9f04      	ldr	r7, [sp, #16]
 8011a66:	e73f      	b.n	80118e8 <_dtoa_r+0x4e0>
 8011a68:	4b29      	ldr	r3, [pc, #164]	@ (8011b10 <_dtoa_r+0x708>)
 8011a6a:	f7ee fd4d 	bl	8000508 <__aeabi_dmul>
 8011a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a72:	e7bc      	b.n	80119ee <_dtoa_r+0x5e6>
 8011a74:	d10c      	bne.n	8011a90 <_dtoa_r+0x688>
 8011a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	4b25      	ldr	r3, [pc, #148]	@ (8011b14 <_dtoa_r+0x70c>)
 8011a7e:	f7ee fd43 	bl	8000508 <__aeabi_dmul>
 8011a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a86:	f7ee ffc5 	bl	8000a14 <__aeabi_dcmpge>
 8011a8a:	2800      	cmp	r0, #0
 8011a8c:	f000 815b 	beq.w	8011d46 <_dtoa_r+0x93e>
 8011a90:	2400      	movs	r4, #0
 8011a92:	4625      	mov	r5, r4
 8011a94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011a96:	4656      	mov	r6, sl
 8011a98:	43db      	mvns	r3, r3
 8011a9a:	9304      	str	r3, [sp, #16]
 8011a9c:	2700      	movs	r7, #0
 8011a9e:	4621      	mov	r1, r4
 8011aa0:	4658      	mov	r0, fp
 8011aa2:	f000 fbb7 	bl	8012214 <_Bfree>
 8011aa6:	2d00      	cmp	r5, #0
 8011aa8:	d0dc      	beq.n	8011a64 <_dtoa_r+0x65c>
 8011aaa:	b12f      	cbz	r7, 8011ab8 <_dtoa_r+0x6b0>
 8011aac:	42af      	cmp	r7, r5
 8011aae:	d003      	beq.n	8011ab8 <_dtoa_r+0x6b0>
 8011ab0:	4639      	mov	r1, r7
 8011ab2:	4658      	mov	r0, fp
 8011ab4:	f000 fbae 	bl	8012214 <_Bfree>
 8011ab8:	4629      	mov	r1, r5
 8011aba:	4658      	mov	r0, fp
 8011abc:	f000 fbaa 	bl	8012214 <_Bfree>
 8011ac0:	e7d0      	b.n	8011a64 <_dtoa_r+0x65c>
 8011ac2:	9704      	str	r7, [sp, #16]
 8011ac4:	4633      	mov	r3, r6
 8011ac6:	461e      	mov	r6, r3
 8011ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011acc:	2a39      	cmp	r2, #57	@ 0x39
 8011ace:	d107      	bne.n	8011ae0 <_dtoa_r+0x6d8>
 8011ad0:	459a      	cmp	sl, r3
 8011ad2:	d1f8      	bne.n	8011ac6 <_dtoa_r+0x6be>
 8011ad4:	9a04      	ldr	r2, [sp, #16]
 8011ad6:	3201      	adds	r2, #1
 8011ad8:	9204      	str	r2, [sp, #16]
 8011ada:	2230      	movs	r2, #48	@ 0x30
 8011adc:	f88a 2000 	strb.w	r2, [sl]
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	3201      	adds	r2, #1
 8011ae4:	701a      	strb	r2, [r3, #0]
 8011ae6:	e7bd      	b.n	8011a64 <_dtoa_r+0x65c>
 8011ae8:	2200      	movs	r2, #0
 8011aea:	4b09      	ldr	r3, [pc, #36]	@ (8011b10 <_dtoa_r+0x708>)
 8011aec:	f7ee fd0c 	bl	8000508 <__aeabi_dmul>
 8011af0:	2200      	movs	r2, #0
 8011af2:	2300      	movs	r3, #0
 8011af4:	4604      	mov	r4, r0
 8011af6:	460d      	mov	r5, r1
 8011af8:	f7ee ff6e 	bl	80009d8 <__aeabi_dcmpeq>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f43f aebc 	beq.w	801187a <_dtoa_r+0x472>
 8011b02:	e6f1      	b.n	80118e8 <_dtoa_r+0x4e0>
 8011b04:	080142a0 	.word	0x080142a0
 8011b08:	3fe00000 	.word	0x3fe00000
 8011b0c:	3ff00000 	.word	0x3ff00000
 8011b10:	40240000 	.word	0x40240000
 8011b14:	40140000 	.word	0x40140000
 8011b18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011b1a:	2a00      	cmp	r2, #0
 8011b1c:	f000 80db 	beq.w	8011cd6 <_dtoa_r+0x8ce>
 8011b20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011b22:	2a01      	cmp	r2, #1
 8011b24:	f300 80bf 	bgt.w	8011ca6 <_dtoa_r+0x89e>
 8011b28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011b2a:	2a00      	cmp	r2, #0
 8011b2c:	f000 80b7 	beq.w	8011c9e <_dtoa_r+0x896>
 8011b30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011b34:	4646      	mov	r6, r8
 8011b36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b3a:	2101      	movs	r1, #1
 8011b3c:	441a      	add	r2, r3
 8011b3e:	4658      	mov	r0, fp
 8011b40:	4498      	add	r8, r3
 8011b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b44:	f000 fc1a 	bl	801237c <__i2b>
 8011b48:	4605      	mov	r5, r0
 8011b4a:	b15e      	cbz	r6, 8011b64 <_dtoa_r+0x75c>
 8011b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	dd08      	ble.n	8011b64 <_dtoa_r+0x75c>
 8011b52:	42b3      	cmp	r3, r6
 8011b54:	bfa8      	it	ge
 8011b56:	4633      	movge	r3, r6
 8011b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b5a:	eba8 0803 	sub.w	r8, r8, r3
 8011b5e:	1af6      	subs	r6, r6, r3
 8011b60:	1ad3      	subs	r3, r2, r3
 8011b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b66:	b1f3      	cbz	r3, 8011ba6 <_dtoa_r+0x79e>
 8011b68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 80b7 	beq.w	8011cde <_dtoa_r+0x8d6>
 8011b70:	b18c      	cbz	r4, 8011b96 <_dtoa_r+0x78e>
 8011b72:	4629      	mov	r1, r5
 8011b74:	4622      	mov	r2, r4
 8011b76:	4658      	mov	r0, fp
 8011b78:	f000 fcbe 	bl	80124f8 <__pow5mult>
 8011b7c:	464a      	mov	r2, r9
 8011b7e:	4601      	mov	r1, r0
 8011b80:	4605      	mov	r5, r0
 8011b82:	4658      	mov	r0, fp
 8011b84:	f000 fc10 	bl	80123a8 <__multiply>
 8011b88:	4649      	mov	r1, r9
 8011b8a:	9004      	str	r0, [sp, #16]
 8011b8c:	4658      	mov	r0, fp
 8011b8e:	f000 fb41 	bl	8012214 <_Bfree>
 8011b92:	9b04      	ldr	r3, [sp, #16]
 8011b94:	4699      	mov	r9, r3
 8011b96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b98:	1b1a      	subs	r2, r3, r4
 8011b9a:	d004      	beq.n	8011ba6 <_dtoa_r+0x79e>
 8011b9c:	4649      	mov	r1, r9
 8011b9e:	4658      	mov	r0, fp
 8011ba0:	f000 fcaa 	bl	80124f8 <__pow5mult>
 8011ba4:	4681      	mov	r9, r0
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	4658      	mov	r0, fp
 8011baa:	f000 fbe7 	bl	801237c <__i2b>
 8011bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bb0:	4604      	mov	r4, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f000 81c9 	beq.w	8011f4a <_dtoa_r+0xb42>
 8011bb8:	461a      	mov	r2, r3
 8011bba:	4601      	mov	r1, r0
 8011bbc:	4658      	mov	r0, fp
 8011bbe:	f000 fc9b 	bl	80124f8 <__pow5mult>
 8011bc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	f300 808f 	bgt.w	8011cea <_dtoa_r+0x8e2>
 8011bcc:	9b02      	ldr	r3, [sp, #8]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f040 8087 	bne.w	8011ce2 <_dtoa_r+0x8da>
 8011bd4:	9b03      	ldr	r3, [sp, #12]
 8011bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f040 8083 	bne.w	8011ce6 <_dtoa_r+0x8de>
 8011be0:	9b03      	ldr	r3, [sp, #12]
 8011be2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011be6:	0d1b      	lsrs	r3, r3, #20
 8011be8:	051b      	lsls	r3, r3, #20
 8011bea:	b12b      	cbz	r3, 8011bf8 <_dtoa_r+0x7f0>
 8011bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bee:	f108 0801 	add.w	r8, r8, #1
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f000 81aa 	beq.w	8011f56 <_dtoa_r+0xb4e>
 8011c02:	6923      	ldr	r3, [r4, #16]
 8011c04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c08:	6918      	ldr	r0, [r3, #16]
 8011c0a:	f000 fb6b 	bl	80122e4 <__hi0bits>
 8011c0e:	f1c0 0020 	rsb	r0, r0, #32
 8011c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c14:	4418      	add	r0, r3
 8011c16:	f010 001f 	ands.w	r0, r0, #31
 8011c1a:	d071      	beq.n	8011d00 <_dtoa_r+0x8f8>
 8011c1c:	f1c0 0320 	rsb	r3, r0, #32
 8011c20:	2b04      	cmp	r3, #4
 8011c22:	dd65      	ble.n	8011cf0 <_dtoa_r+0x8e8>
 8011c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c26:	f1c0 001c 	rsb	r0, r0, #28
 8011c2a:	4403      	add	r3, r0
 8011c2c:	4480      	add	r8, r0
 8011c2e:	4406      	add	r6, r0
 8011c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c32:	f1b8 0f00 	cmp.w	r8, #0
 8011c36:	dd05      	ble.n	8011c44 <_dtoa_r+0x83c>
 8011c38:	4649      	mov	r1, r9
 8011c3a:	4642      	mov	r2, r8
 8011c3c:	4658      	mov	r0, fp
 8011c3e:	f000 fcb5 	bl	80125ac <__lshift>
 8011c42:	4681      	mov	r9, r0
 8011c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	dd05      	ble.n	8011c56 <_dtoa_r+0x84e>
 8011c4a:	4621      	mov	r1, r4
 8011c4c:	461a      	mov	r2, r3
 8011c4e:	4658      	mov	r0, fp
 8011c50:	f000 fcac 	bl	80125ac <__lshift>
 8011c54:	4604      	mov	r4, r0
 8011c56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d053      	beq.n	8011d04 <_dtoa_r+0x8fc>
 8011c5c:	4621      	mov	r1, r4
 8011c5e:	4648      	mov	r0, r9
 8011c60:	f000 fd10 	bl	8012684 <__mcmp>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	da4d      	bge.n	8011d04 <_dtoa_r+0x8fc>
 8011c68:	1e7b      	subs	r3, r7, #1
 8011c6a:	4649      	mov	r1, r9
 8011c6c:	9304      	str	r3, [sp, #16]
 8011c6e:	220a      	movs	r2, #10
 8011c70:	2300      	movs	r3, #0
 8011c72:	4658      	mov	r0, fp
 8011c74:	f000 faf0 	bl	8012258 <__multadd>
 8011c78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c7a:	4681      	mov	r9, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f000 816c 	beq.w	8011f5a <_dtoa_r+0xb52>
 8011c82:	2300      	movs	r3, #0
 8011c84:	4629      	mov	r1, r5
 8011c86:	220a      	movs	r2, #10
 8011c88:	4658      	mov	r0, fp
 8011c8a:	f000 fae5 	bl	8012258 <__multadd>
 8011c8e:	9b08      	ldr	r3, [sp, #32]
 8011c90:	4605      	mov	r5, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	dc61      	bgt.n	8011d5a <_dtoa_r+0x952>
 8011c96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	dc3b      	bgt.n	8011d14 <_dtoa_r+0x90c>
 8011c9c:	e05d      	b.n	8011d5a <_dtoa_r+0x952>
 8011c9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011ca0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011ca4:	e746      	b.n	8011b34 <_dtoa_r+0x72c>
 8011ca6:	9b07      	ldr	r3, [sp, #28]
 8011ca8:	1e5c      	subs	r4, r3, #1
 8011caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cac:	42a3      	cmp	r3, r4
 8011cae:	bfbf      	itttt	lt
 8011cb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011cb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8011cb4:	1ae3      	sublt	r3, r4, r3
 8011cb6:	18d2      	addlt	r2, r2, r3
 8011cb8:	bfa8      	it	ge
 8011cba:	1b1c      	subge	r4, r3, r4
 8011cbc:	9b07      	ldr	r3, [sp, #28]
 8011cbe:	bfbe      	ittt	lt
 8011cc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011cc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8011cc4:	2400      	movlt	r4, #0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	bfb5      	itete	lt
 8011cca:	eba8 0603 	sublt.w	r6, r8, r3
 8011cce:	4646      	movge	r6, r8
 8011cd0:	2300      	movlt	r3, #0
 8011cd2:	9b07      	ldrge	r3, [sp, #28]
 8011cd4:	e730      	b.n	8011b38 <_dtoa_r+0x730>
 8011cd6:	4646      	mov	r6, r8
 8011cd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011cda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011cdc:	e735      	b.n	8011b4a <_dtoa_r+0x742>
 8011cde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ce0:	e75c      	b.n	8011b9c <_dtoa_r+0x794>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e788      	b.n	8011bf8 <_dtoa_r+0x7f0>
 8011ce6:	9b02      	ldr	r3, [sp, #8]
 8011ce8:	e786      	b.n	8011bf8 <_dtoa_r+0x7f0>
 8011cea:	2300      	movs	r3, #0
 8011cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8011cee:	e788      	b.n	8011c02 <_dtoa_r+0x7fa>
 8011cf0:	d09f      	beq.n	8011c32 <_dtoa_r+0x82a>
 8011cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cf4:	331c      	adds	r3, #28
 8011cf6:	441a      	add	r2, r3
 8011cf8:	4498      	add	r8, r3
 8011cfa:	441e      	add	r6, r3
 8011cfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cfe:	e798      	b.n	8011c32 <_dtoa_r+0x82a>
 8011d00:	4603      	mov	r3, r0
 8011d02:	e7f6      	b.n	8011cf2 <_dtoa_r+0x8ea>
 8011d04:	9b07      	ldr	r3, [sp, #28]
 8011d06:	9704      	str	r7, [sp, #16]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	dc20      	bgt.n	8011d4e <_dtoa_r+0x946>
 8011d0c:	9308      	str	r3, [sp, #32]
 8011d0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011d10:	2b02      	cmp	r3, #2
 8011d12:	dd1e      	ble.n	8011d52 <_dtoa_r+0x94a>
 8011d14:	9b08      	ldr	r3, [sp, #32]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f47f aebc 	bne.w	8011a94 <_dtoa_r+0x68c>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	2205      	movs	r2, #5
 8011d20:	4658      	mov	r0, fp
 8011d22:	f000 fa99 	bl	8012258 <__multadd>
 8011d26:	4601      	mov	r1, r0
 8011d28:	4604      	mov	r4, r0
 8011d2a:	4648      	mov	r0, r9
 8011d2c:	f000 fcaa 	bl	8012684 <__mcmp>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	f77f aeaf 	ble.w	8011a94 <_dtoa_r+0x68c>
 8011d36:	2331      	movs	r3, #49	@ 0x31
 8011d38:	4656      	mov	r6, sl
 8011d3a:	f806 3b01 	strb.w	r3, [r6], #1
 8011d3e:	9b04      	ldr	r3, [sp, #16]
 8011d40:	3301      	adds	r3, #1
 8011d42:	9304      	str	r3, [sp, #16]
 8011d44:	e6aa      	b.n	8011a9c <_dtoa_r+0x694>
 8011d46:	9c07      	ldr	r4, [sp, #28]
 8011d48:	9704      	str	r7, [sp, #16]
 8011d4a:	4625      	mov	r5, r4
 8011d4c:	e7f3      	b.n	8011d36 <_dtoa_r+0x92e>
 8011d4e:	9b07      	ldr	r3, [sp, #28]
 8011d50:	9308      	str	r3, [sp, #32]
 8011d52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	f000 8104 	beq.w	8011f62 <_dtoa_r+0xb5a>
 8011d5a:	2e00      	cmp	r6, #0
 8011d5c:	dd05      	ble.n	8011d6a <_dtoa_r+0x962>
 8011d5e:	4629      	mov	r1, r5
 8011d60:	4632      	mov	r2, r6
 8011d62:	4658      	mov	r0, fp
 8011d64:	f000 fc22 	bl	80125ac <__lshift>
 8011d68:	4605      	mov	r5, r0
 8011d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d05a      	beq.n	8011e26 <_dtoa_r+0xa1e>
 8011d70:	4658      	mov	r0, fp
 8011d72:	6869      	ldr	r1, [r5, #4]
 8011d74:	f000 fa0e 	bl	8012194 <_Balloc>
 8011d78:	4606      	mov	r6, r0
 8011d7a:	b928      	cbnz	r0, 8011d88 <_dtoa_r+0x980>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011d82:	4b83      	ldr	r3, [pc, #524]	@ (8011f90 <_dtoa_r+0xb88>)
 8011d84:	f7ff bb54 	b.w	8011430 <_dtoa_r+0x28>
 8011d88:	692a      	ldr	r2, [r5, #16]
 8011d8a:	f105 010c 	add.w	r1, r5, #12
 8011d8e:	3202      	adds	r2, #2
 8011d90:	0092      	lsls	r2, r2, #2
 8011d92:	300c      	adds	r0, #12
 8011d94:	f001 f8c4 	bl	8012f20 <memcpy>
 8011d98:	2201      	movs	r2, #1
 8011d9a:	4631      	mov	r1, r6
 8011d9c:	4658      	mov	r0, fp
 8011d9e:	f000 fc05 	bl	80125ac <__lshift>
 8011da2:	462f      	mov	r7, r5
 8011da4:	4605      	mov	r5, r0
 8011da6:	f10a 0301 	add.w	r3, sl, #1
 8011daa:	9307      	str	r3, [sp, #28]
 8011dac:	9b08      	ldr	r3, [sp, #32]
 8011dae:	4453      	add	r3, sl
 8011db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011db2:	9b02      	ldr	r3, [sp, #8]
 8011db4:	f003 0301 	and.w	r3, r3, #1
 8011db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8011dba:	9b07      	ldr	r3, [sp, #28]
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	4648      	mov	r0, r9
 8011dc2:	9302      	str	r3, [sp, #8]
 8011dc4:	f7ff fa97 	bl	80112f6 <quorem>
 8011dc8:	4639      	mov	r1, r7
 8011dca:	9008      	str	r0, [sp, #32]
 8011dcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011dd0:	4648      	mov	r0, r9
 8011dd2:	f000 fc57 	bl	8012684 <__mcmp>
 8011dd6:	462a      	mov	r2, r5
 8011dd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4658      	mov	r0, fp
 8011dde:	f000 fc6d 	bl	80126bc <__mdiff>
 8011de2:	68c2      	ldr	r2, [r0, #12]
 8011de4:	4606      	mov	r6, r0
 8011de6:	bb02      	cbnz	r2, 8011e2a <_dtoa_r+0xa22>
 8011de8:	4601      	mov	r1, r0
 8011dea:	4648      	mov	r0, r9
 8011dec:	f000 fc4a 	bl	8012684 <__mcmp>
 8011df0:	4602      	mov	r2, r0
 8011df2:	4631      	mov	r1, r6
 8011df4:	4658      	mov	r0, fp
 8011df6:	920c      	str	r2, [sp, #48]	@ 0x30
 8011df8:	f000 fa0c 	bl	8012214 <_Bfree>
 8011dfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011dfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011e00:	9e07      	ldr	r6, [sp, #28]
 8011e02:	ea43 0102 	orr.w	r1, r3, r2
 8011e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e08:	4319      	orrs	r1, r3
 8011e0a:	d110      	bne.n	8011e2e <_dtoa_r+0xa26>
 8011e0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e10:	d029      	beq.n	8011e66 <_dtoa_r+0xa5e>
 8011e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	dd02      	ble.n	8011e1e <_dtoa_r+0xa16>
 8011e18:	9b08      	ldr	r3, [sp, #32]
 8011e1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011e1e:	9b02      	ldr	r3, [sp, #8]
 8011e20:	f883 8000 	strb.w	r8, [r3]
 8011e24:	e63b      	b.n	8011a9e <_dtoa_r+0x696>
 8011e26:	4628      	mov	r0, r5
 8011e28:	e7bb      	b.n	8011da2 <_dtoa_r+0x99a>
 8011e2a:	2201      	movs	r2, #1
 8011e2c:	e7e1      	b.n	8011df2 <_dtoa_r+0x9ea>
 8011e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	db04      	blt.n	8011e3e <_dtoa_r+0xa36>
 8011e34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8011e36:	430b      	orrs	r3, r1
 8011e38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011e3a:	430b      	orrs	r3, r1
 8011e3c:	d120      	bne.n	8011e80 <_dtoa_r+0xa78>
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	dded      	ble.n	8011e1e <_dtoa_r+0xa16>
 8011e42:	4649      	mov	r1, r9
 8011e44:	2201      	movs	r2, #1
 8011e46:	4658      	mov	r0, fp
 8011e48:	f000 fbb0 	bl	80125ac <__lshift>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4681      	mov	r9, r0
 8011e50:	f000 fc18 	bl	8012684 <__mcmp>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	dc03      	bgt.n	8011e60 <_dtoa_r+0xa58>
 8011e58:	d1e1      	bne.n	8011e1e <_dtoa_r+0xa16>
 8011e5a:	f018 0f01 	tst.w	r8, #1
 8011e5e:	d0de      	beq.n	8011e1e <_dtoa_r+0xa16>
 8011e60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e64:	d1d8      	bne.n	8011e18 <_dtoa_r+0xa10>
 8011e66:	2339      	movs	r3, #57	@ 0x39
 8011e68:	9a02      	ldr	r2, [sp, #8]
 8011e6a:	7013      	strb	r3, [r2, #0]
 8011e6c:	4633      	mov	r3, r6
 8011e6e:	461e      	mov	r6, r3
 8011e70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011e74:	3b01      	subs	r3, #1
 8011e76:	2a39      	cmp	r2, #57	@ 0x39
 8011e78:	d052      	beq.n	8011f20 <_dtoa_r+0xb18>
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	701a      	strb	r2, [r3, #0]
 8011e7e:	e60e      	b.n	8011a9e <_dtoa_r+0x696>
 8011e80:	2a00      	cmp	r2, #0
 8011e82:	dd07      	ble.n	8011e94 <_dtoa_r+0xa8c>
 8011e84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011e88:	d0ed      	beq.n	8011e66 <_dtoa_r+0xa5e>
 8011e8a:	9a02      	ldr	r2, [sp, #8]
 8011e8c:	f108 0301 	add.w	r3, r8, #1
 8011e90:	7013      	strb	r3, [r2, #0]
 8011e92:	e604      	b.n	8011a9e <_dtoa_r+0x696>
 8011e94:	9b07      	ldr	r3, [sp, #28]
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011e9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d028      	beq.n	8011ef4 <_dtoa_r+0xaec>
 8011ea2:	4649      	mov	r1, r9
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	220a      	movs	r2, #10
 8011ea8:	4658      	mov	r0, fp
 8011eaa:	f000 f9d5 	bl	8012258 <__multadd>
 8011eae:	42af      	cmp	r7, r5
 8011eb0:	4681      	mov	r9, r0
 8011eb2:	f04f 0300 	mov.w	r3, #0
 8011eb6:	f04f 020a 	mov.w	r2, #10
 8011eba:	4639      	mov	r1, r7
 8011ebc:	4658      	mov	r0, fp
 8011ebe:	d107      	bne.n	8011ed0 <_dtoa_r+0xac8>
 8011ec0:	f000 f9ca 	bl	8012258 <__multadd>
 8011ec4:	4607      	mov	r7, r0
 8011ec6:	4605      	mov	r5, r0
 8011ec8:	9b07      	ldr	r3, [sp, #28]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	9307      	str	r3, [sp, #28]
 8011ece:	e774      	b.n	8011dba <_dtoa_r+0x9b2>
 8011ed0:	f000 f9c2 	bl	8012258 <__multadd>
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4607      	mov	r7, r0
 8011ed8:	2300      	movs	r3, #0
 8011eda:	220a      	movs	r2, #10
 8011edc:	4658      	mov	r0, fp
 8011ede:	f000 f9bb 	bl	8012258 <__multadd>
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	e7f0      	b.n	8011ec8 <_dtoa_r+0xac0>
 8011ee6:	9b08      	ldr	r3, [sp, #32]
 8011ee8:	2700      	movs	r7, #0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	bfcc      	ite	gt
 8011eee:	461e      	movgt	r6, r3
 8011ef0:	2601      	movle	r6, #1
 8011ef2:	4456      	add	r6, sl
 8011ef4:	4649      	mov	r1, r9
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	4658      	mov	r0, fp
 8011efa:	f000 fb57 	bl	80125ac <__lshift>
 8011efe:	4621      	mov	r1, r4
 8011f00:	4681      	mov	r9, r0
 8011f02:	f000 fbbf 	bl	8012684 <__mcmp>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	dcb0      	bgt.n	8011e6c <_dtoa_r+0xa64>
 8011f0a:	d102      	bne.n	8011f12 <_dtoa_r+0xb0a>
 8011f0c:	f018 0f01 	tst.w	r8, #1
 8011f10:	d1ac      	bne.n	8011e6c <_dtoa_r+0xa64>
 8011f12:	4633      	mov	r3, r6
 8011f14:	461e      	mov	r6, r3
 8011f16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f1a:	2a30      	cmp	r2, #48	@ 0x30
 8011f1c:	d0fa      	beq.n	8011f14 <_dtoa_r+0xb0c>
 8011f1e:	e5be      	b.n	8011a9e <_dtoa_r+0x696>
 8011f20:	459a      	cmp	sl, r3
 8011f22:	d1a4      	bne.n	8011e6e <_dtoa_r+0xa66>
 8011f24:	9b04      	ldr	r3, [sp, #16]
 8011f26:	3301      	adds	r3, #1
 8011f28:	9304      	str	r3, [sp, #16]
 8011f2a:	2331      	movs	r3, #49	@ 0x31
 8011f2c:	f88a 3000 	strb.w	r3, [sl]
 8011f30:	e5b5      	b.n	8011a9e <_dtoa_r+0x696>
 8011f32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011f34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011f94 <_dtoa_r+0xb8c>
 8011f38:	b11b      	cbz	r3, 8011f42 <_dtoa_r+0xb3a>
 8011f3a:	f10a 0308 	add.w	r3, sl, #8
 8011f3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011f40:	6013      	str	r3, [r2, #0]
 8011f42:	4650      	mov	r0, sl
 8011f44:	b017      	add	sp, #92	@ 0x5c
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	f77f ae3d 	ble.w	8011bcc <_dtoa_r+0x7c4>
 8011f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f56:	2001      	movs	r0, #1
 8011f58:	e65b      	b.n	8011c12 <_dtoa_r+0x80a>
 8011f5a:	9b08      	ldr	r3, [sp, #32]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f77f aed6 	ble.w	8011d0e <_dtoa_r+0x906>
 8011f62:	4656      	mov	r6, sl
 8011f64:	4621      	mov	r1, r4
 8011f66:	4648      	mov	r0, r9
 8011f68:	f7ff f9c5 	bl	80112f6 <quorem>
 8011f6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011f70:	9b08      	ldr	r3, [sp, #32]
 8011f72:	f806 8b01 	strb.w	r8, [r6], #1
 8011f76:	eba6 020a 	sub.w	r2, r6, sl
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	ddb3      	ble.n	8011ee6 <_dtoa_r+0xade>
 8011f7e:	4649      	mov	r1, r9
 8011f80:	2300      	movs	r3, #0
 8011f82:	220a      	movs	r2, #10
 8011f84:	4658      	mov	r0, fp
 8011f86:	f000 f967 	bl	8012258 <__multadd>
 8011f8a:	4681      	mov	r9, r0
 8011f8c:	e7ea      	b.n	8011f64 <_dtoa_r+0xb5c>
 8011f8e:	bf00      	nop
 8011f90:	080141fc 	.word	0x080141fc
 8011f94:	08014180 	.word	0x08014180

08011f98 <_free_r>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	2900      	cmp	r1, #0
 8011f9e:	d040      	beq.n	8012022 <_free_r+0x8a>
 8011fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fa4:	1f0c      	subs	r4, r1, #4
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	bfb8      	it	lt
 8011faa:	18e4      	addlt	r4, r4, r3
 8011fac:	f000 f8e6 	bl	801217c <__malloc_lock>
 8011fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8012024 <_free_r+0x8c>)
 8011fb2:	6813      	ldr	r3, [r2, #0]
 8011fb4:	b933      	cbnz	r3, 8011fc4 <_free_r+0x2c>
 8011fb6:	6063      	str	r3, [r4, #4]
 8011fb8:	6014      	str	r4, [r2, #0]
 8011fba:	4628      	mov	r0, r5
 8011fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fc0:	f000 b8e2 	b.w	8012188 <__malloc_unlock>
 8011fc4:	42a3      	cmp	r3, r4
 8011fc6:	d908      	bls.n	8011fda <_free_r+0x42>
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	1821      	adds	r1, r4, r0
 8011fcc:	428b      	cmp	r3, r1
 8011fce:	bf01      	itttt	eq
 8011fd0:	6819      	ldreq	r1, [r3, #0]
 8011fd2:	685b      	ldreq	r3, [r3, #4]
 8011fd4:	1809      	addeq	r1, r1, r0
 8011fd6:	6021      	streq	r1, [r4, #0]
 8011fd8:	e7ed      	b.n	8011fb6 <_free_r+0x1e>
 8011fda:	461a      	mov	r2, r3
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	b10b      	cbz	r3, 8011fe4 <_free_r+0x4c>
 8011fe0:	42a3      	cmp	r3, r4
 8011fe2:	d9fa      	bls.n	8011fda <_free_r+0x42>
 8011fe4:	6811      	ldr	r1, [r2, #0]
 8011fe6:	1850      	adds	r0, r2, r1
 8011fe8:	42a0      	cmp	r0, r4
 8011fea:	d10b      	bne.n	8012004 <_free_r+0x6c>
 8011fec:	6820      	ldr	r0, [r4, #0]
 8011fee:	4401      	add	r1, r0
 8011ff0:	1850      	adds	r0, r2, r1
 8011ff2:	4283      	cmp	r3, r0
 8011ff4:	6011      	str	r1, [r2, #0]
 8011ff6:	d1e0      	bne.n	8011fba <_free_r+0x22>
 8011ff8:	6818      	ldr	r0, [r3, #0]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	4408      	add	r0, r1
 8011ffe:	6010      	str	r0, [r2, #0]
 8012000:	6053      	str	r3, [r2, #4]
 8012002:	e7da      	b.n	8011fba <_free_r+0x22>
 8012004:	d902      	bls.n	801200c <_free_r+0x74>
 8012006:	230c      	movs	r3, #12
 8012008:	602b      	str	r3, [r5, #0]
 801200a:	e7d6      	b.n	8011fba <_free_r+0x22>
 801200c:	6820      	ldr	r0, [r4, #0]
 801200e:	1821      	adds	r1, r4, r0
 8012010:	428b      	cmp	r3, r1
 8012012:	bf01      	itttt	eq
 8012014:	6819      	ldreq	r1, [r3, #0]
 8012016:	685b      	ldreq	r3, [r3, #4]
 8012018:	1809      	addeq	r1, r1, r0
 801201a:	6021      	streq	r1, [r4, #0]
 801201c:	6063      	str	r3, [r4, #4]
 801201e:	6054      	str	r4, [r2, #4]
 8012020:	e7cb      	b.n	8011fba <_free_r+0x22>
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	200009d4 	.word	0x200009d4

08012028 <malloc>:
 8012028:	4b02      	ldr	r3, [pc, #8]	@ (8012034 <malloc+0xc>)
 801202a:	4601      	mov	r1, r0
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	f000 b825 	b.w	801207c <_malloc_r>
 8012032:	bf00      	nop
 8012034:	200001a4 	.word	0x200001a4

08012038 <sbrk_aligned>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	4e0f      	ldr	r6, [pc, #60]	@ (8012078 <sbrk_aligned+0x40>)
 801203c:	460c      	mov	r4, r1
 801203e:	6831      	ldr	r1, [r6, #0]
 8012040:	4605      	mov	r5, r0
 8012042:	b911      	cbnz	r1, 801204a <sbrk_aligned+0x12>
 8012044:	f000 ff5c 	bl	8012f00 <_sbrk_r>
 8012048:	6030      	str	r0, [r6, #0]
 801204a:	4621      	mov	r1, r4
 801204c:	4628      	mov	r0, r5
 801204e:	f000 ff57 	bl	8012f00 <_sbrk_r>
 8012052:	1c43      	adds	r3, r0, #1
 8012054:	d103      	bne.n	801205e <sbrk_aligned+0x26>
 8012056:	f04f 34ff 	mov.w	r4, #4294967295
 801205a:	4620      	mov	r0, r4
 801205c:	bd70      	pop	{r4, r5, r6, pc}
 801205e:	1cc4      	adds	r4, r0, #3
 8012060:	f024 0403 	bic.w	r4, r4, #3
 8012064:	42a0      	cmp	r0, r4
 8012066:	d0f8      	beq.n	801205a <sbrk_aligned+0x22>
 8012068:	1a21      	subs	r1, r4, r0
 801206a:	4628      	mov	r0, r5
 801206c:	f000 ff48 	bl	8012f00 <_sbrk_r>
 8012070:	3001      	adds	r0, #1
 8012072:	d1f2      	bne.n	801205a <sbrk_aligned+0x22>
 8012074:	e7ef      	b.n	8012056 <sbrk_aligned+0x1e>
 8012076:	bf00      	nop
 8012078:	200009d0 	.word	0x200009d0

0801207c <_malloc_r>:
 801207c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012080:	1ccd      	adds	r5, r1, #3
 8012082:	f025 0503 	bic.w	r5, r5, #3
 8012086:	3508      	adds	r5, #8
 8012088:	2d0c      	cmp	r5, #12
 801208a:	bf38      	it	cc
 801208c:	250c      	movcc	r5, #12
 801208e:	2d00      	cmp	r5, #0
 8012090:	4606      	mov	r6, r0
 8012092:	db01      	blt.n	8012098 <_malloc_r+0x1c>
 8012094:	42a9      	cmp	r1, r5
 8012096:	d904      	bls.n	80120a2 <_malloc_r+0x26>
 8012098:	230c      	movs	r3, #12
 801209a:	6033      	str	r3, [r6, #0]
 801209c:	2000      	movs	r0, #0
 801209e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012178 <_malloc_r+0xfc>
 80120a6:	f000 f869 	bl	801217c <__malloc_lock>
 80120aa:	f8d8 3000 	ldr.w	r3, [r8]
 80120ae:	461c      	mov	r4, r3
 80120b0:	bb44      	cbnz	r4, 8012104 <_malloc_r+0x88>
 80120b2:	4629      	mov	r1, r5
 80120b4:	4630      	mov	r0, r6
 80120b6:	f7ff ffbf 	bl	8012038 <sbrk_aligned>
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	4604      	mov	r4, r0
 80120be:	d158      	bne.n	8012172 <_malloc_r+0xf6>
 80120c0:	f8d8 4000 	ldr.w	r4, [r8]
 80120c4:	4627      	mov	r7, r4
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	d143      	bne.n	8012152 <_malloc_r+0xd6>
 80120ca:	2c00      	cmp	r4, #0
 80120cc:	d04b      	beq.n	8012166 <_malloc_r+0xea>
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	4639      	mov	r1, r7
 80120d2:	4630      	mov	r0, r6
 80120d4:	eb04 0903 	add.w	r9, r4, r3
 80120d8:	f000 ff12 	bl	8012f00 <_sbrk_r>
 80120dc:	4581      	cmp	r9, r0
 80120de:	d142      	bne.n	8012166 <_malloc_r+0xea>
 80120e0:	6821      	ldr	r1, [r4, #0]
 80120e2:	4630      	mov	r0, r6
 80120e4:	1a6d      	subs	r5, r5, r1
 80120e6:	4629      	mov	r1, r5
 80120e8:	f7ff ffa6 	bl	8012038 <sbrk_aligned>
 80120ec:	3001      	adds	r0, #1
 80120ee:	d03a      	beq.n	8012166 <_malloc_r+0xea>
 80120f0:	6823      	ldr	r3, [r4, #0]
 80120f2:	442b      	add	r3, r5
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	f8d8 3000 	ldr.w	r3, [r8]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	bb62      	cbnz	r2, 8012158 <_malloc_r+0xdc>
 80120fe:	f8c8 7000 	str.w	r7, [r8]
 8012102:	e00f      	b.n	8012124 <_malloc_r+0xa8>
 8012104:	6822      	ldr	r2, [r4, #0]
 8012106:	1b52      	subs	r2, r2, r5
 8012108:	d420      	bmi.n	801214c <_malloc_r+0xd0>
 801210a:	2a0b      	cmp	r2, #11
 801210c:	d917      	bls.n	801213e <_malloc_r+0xc2>
 801210e:	1961      	adds	r1, r4, r5
 8012110:	42a3      	cmp	r3, r4
 8012112:	6025      	str	r5, [r4, #0]
 8012114:	bf18      	it	ne
 8012116:	6059      	strne	r1, [r3, #4]
 8012118:	6863      	ldr	r3, [r4, #4]
 801211a:	bf08      	it	eq
 801211c:	f8c8 1000 	streq.w	r1, [r8]
 8012120:	5162      	str	r2, [r4, r5]
 8012122:	604b      	str	r3, [r1, #4]
 8012124:	4630      	mov	r0, r6
 8012126:	f000 f82f 	bl	8012188 <__malloc_unlock>
 801212a:	f104 000b 	add.w	r0, r4, #11
 801212e:	1d23      	adds	r3, r4, #4
 8012130:	f020 0007 	bic.w	r0, r0, #7
 8012134:	1ac2      	subs	r2, r0, r3
 8012136:	bf1c      	itt	ne
 8012138:	1a1b      	subne	r3, r3, r0
 801213a:	50a3      	strne	r3, [r4, r2]
 801213c:	e7af      	b.n	801209e <_malloc_r+0x22>
 801213e:	6862      	ldr	r2, [r4, #4]
 8012140:	42a3      	cmp	r3, r4
 8012142:	bf0c      	ite	eq
 8012144:	f8c8 2000 	streq.w	r2, [r8]
 8012148:	605a      	strne	r2, [r3, #4]
 801214a:	e7eb      	b.n	8012124 <_malloc_r+0xa8>
 801214c:	4623      	mov	r3, r4
 801214e:	6864      	ldr	r4, [r4, #4]
 8012150:	e7ae      	b.n	80120b0 <_malloc_r+0x34>
 8012152:	463c      	mov	r4, r7
 8012154:	687f      	ldr	r7, [r7, #4]
 8012156:	e7b6      	b.n	80120c6 <_malloc_r+0x4a>
 8012158:	461a      	mov	r2, r3
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	42a3      	cmp	r3, r4
 801215e:	d1fb      	bne.n	8012158 <_malloc_r+0xdc>
 8012160:	2300      	movs	r3, #0
 8012162:	6053      	str	r3, [r2, #4]
 8012164:	e7de      	b.n	8012124 <_malloc_r+0xa8>
 8012166:	230c      	movs	r3, #12
 8012168:	4630      	mov	r0, r6
 801216a:	6033      	str	r3, [r6, #0]
 801216c:	f000 f80c 	bl	8012188 <__malloc_unlock>
 8012170:	e794      	b.n	801209c <_malloc_r+0x20>
 8012172:	6005      	str	r5, [r0, #0]
 8012174:	e7d6      	b.n	8012124 <_malloc_r+0xa8>
 8012176:	bf00      	nop
 8012178:	200009d4 	.word	0x200009d4

0801217c <__malloc_lock>:
 801217c:	4801      	ldr	r0, [pc, #4]	@ (8012184 <__malloc_lock+0x8>)
 801217e:	f7ff b8aa 	b.w	80112d6 <__retarget_lock_acquire_recursive>
 8012182:	bf00      	nop
 8012184:	200009cc 	.word	0x200009cc

08012188 <__malloc_unlock>:
 8012188:	4801      	ldr	r0, [pc, #4]	@ (8012190 <__malloc_unlock+0x8>)
 801218a:	f7ff b8a5 	b.w	80112d8 <__retarget_lock_release_recursive>
 801218e:	bf00      	nop
 8012190:	200009cc 	.word	0x200009cc

08012194 <_Balloc>:
 8012194:	b570      	push	{r4, r5, r6, lr}
 8012196:	69c6      	ldr	r6, [r0, #28]
 8012198:	4604      	mov	r4, r0
 801219a:	460d      	mov	r5, r1
 801219c:	b976      	cbnz	r6, 80121bc <_Balloc+0x28>
 801219e:	2010      	movs	r0, #16
 80121a0:	f7ff ff42 	bl	8012028 <malloc>
 80121a4:	4602      	mov	r2, r0
 80121a6:	61e0      	str	r0, [r4, #28]
 80121a8:	b920      	cbnz	r0, 80121b4 <_Balloc+0x20>
 80121aa:	216b      	movs	r1, #107	@ 0x6b
 80121ac:	4b17      	ldr	r3, [pc, #92]	@ (801220c <_Balloc+0x78>)
 80121ae:	4818      	ldr	r0, [pc, #96]	@ (8012210 <_Balloc+0x7c>)
 80121b0:	f000 fec4 	bl	8012f3c <__assert_func>
 80121b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121b8:	6006      	str	r6, [r0, #0]
 80121ba:	60c6      	str	r6, [r0, #12]
 80121bc:	69e6      	ldr	r6, [r4, #28]
 80121be:	68f3      	ldr	r3, [r6, #12]
 80121c0:	b183      	cbz	r3, 80121e4 <_Balloc+0x50>
 80121c2:	69e3      	ldr	r3, [r4, #28]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121ca:	b9b8      	cbnz	r0, 80121fc <_Balloc+0x68>
 80121cc:	2101      	movs	r1, #1
 80121ce:	fa01 f605 	lsl.w	r6, r1, r5
 80121d2:	1d72      	adds	r2, r6, #5
 80121d4:	4620      	mov	r0, r4
 80121d6:	0092      	lsls	r2, r2, #2
 80121d8:	f000 fece 	bl	8012f78 <_calloc_r>
 80121dc:	b160      	cbz	r0, 80121f8 <_Balloc+0x64>
 80121de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121e2:	e00e      	b.n	8012202 <_Balloc+0x6e>
 80121e4:	2221      	movs	r2, #33	@ 0x21
 80121e6:	2104      	movs	r1, #4
 80121e8:	4620      	mov	r0, r4
 80121ea:	f000 fec5 	bl	8012f78 <_calloc_r>
 80121ee:	69e3      	ldr	r3, [r4, #28]
 80121f0:	60f0      	str	r0, [r6, #12]
 80121f2:	68db      	ldr	r3, [r3, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1e4      	bne.n	80121c2 <_Balloc+0x2e>
 80121f8:	2000      	movs	r0, #0
 80121fa:	bd70      	pop	{r4, r5, r6, pc}
 80121fc:	6802      	ldr	r2, [r0, #0]
 80121fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012202:	2300      	movs	r3, #0
 8012204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012208:	e7f7      	b.n	80121fa <_Balloc+0x66>
 801220a:	bf00      	nop
 801220c:	0801418d 	.word	0x0801418d
 8012210:	0801420d 	.word	0x0801420d

08012214 <_Bfree>:
 8012214:	b570      	push	{r4, r5, r6, lr}
 8012216:	69c6      	ldr	r6, [r0, #28]
 8012218:	4605      	mov	r5, r0
 801221a:	460c      	mov	r4, r1
 801221c:	b976      	cbnz	r6, 801223c <_Bfree+0x28>
 801221e:	2010      	movs	r0, #16
 8012220:	f7ff ff02 	bl	8012028 <malloc>
 8012224:	4602      	mov	r2, r0
 8012226:	61e8      	str	r0, [r5, #28]
 8012228:	b920      	cbnz	r0, 8012234 <_Bfree+0x20>
 801222a:	218f      	movs	r1, #143	@ 0x8f
 801222c:	4b08      	ldr	r3, [pc, #32]	@ (8012250 <_Bfree+0x3c>)
 801222e:	4809      	ldr	r0, [pc, #36]	@ (8012254 <_Bfree+0x40>)
 8012230:	f000 fe84 	bl	8012f3c <__assert_func>
 8012234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012238:	6006      	str	r6, [r0, #0]
 801223a:	60c6      	str	r6, [r0, #12]
 801223c:	b13c      	cbz	r4, 801224e <_Bfree+0x3a>
 801223e:	69eb      	ldr	r3, [r5, #28]
 8012240:	6862      	ldr	r2, [r4, #4]
 8012242:	68db      	ldr	r3, [r3, #12]
 8012244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012248:	6021      	str	r1, [r4, #0]
 801224a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	0801418d 	.word	0x0801418d
 8012254:	0801420d 	.word	0x0801420d

08012258 <__multadd>:
 8012258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801225c:	4607      	mov	r7, r0
 801225e:	460c      	mov	r4, r1
 8012260:	461e      	mov	r6, r3
 8012262:	2000      	movs	r0, #0
 8012264:	690d      	ldr	r5, [r1, #16]
 8012266:	f101 0c14 	add.w	ip, r1, #20
 801226a:	f8dc 3000 	ldr.w	r3, [ip]
 801226e:	3001      	adds	r0, #1
 8012270:	b299      	uxth	r1, r3
 8012272:	fb02 6101 	mla	r1, r2, r1, r6
 8012276:	0c1e      	lsrs	r6, r3, #16
 8012278:	0c0b      	lsrs	r3, r1, #16
 801227a:	fb02 3306 	mla	r3, r2, r6, r3
 801227e:	b289      	uxth	r1, r1
 8012280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012284:	4285      	cmp	r5, r0
 8012286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801228a:	f84c 1b04 	str.w	r1, [ip], #4
 801228e:	dcec      	bgt.n	801226a <__multadd+0x12>
 8012290:	b30e      	cbz	r6, 80122d6 <__multadd+0x7e>
 8012292:	68a3      	ldr	r3, [r4, #8]
 8012294:	42ab      	cmp	r3, r5
 8012296:	dc19      	bgt.n	80122cc <__multadd+0x74>
 8012298:	6861      	ldr	r1, [r4, #4]
 801229a:	4638      	mov	r0, r7
 801229c:	3101      	adds	r1, #1
 801229e:	f7ff ff79 	bl	8012194 <_Balloc>
 80122a2:	4680      	mov	r8, r0
 80122a4:	b928      	cbnz	r0, 80122b2 <__multadd+0x5a>
 80122a6:	4602      	mov	r2, r0
 80122a8:	21ba      	movs	r1, #186	@ 0xba
 80122aa:	4b0c      	ldr	r3, [pc, #48]	@ (80122dc <__multadd+0x84>)
 80122ac:	480c      	ldr	r0, [pc, #48]	@ (80122e0 <__multadd+0x88>)
 80122ae:	f000 fe45 	bl	8012f3c <__assert_func>
 80122b2:	6922      	ldr	r2, [r4, #16]
 80122b4:	f104 010c 	add.w	r1, r4, #12
 80122b8:	3202      	adds	r2, #2
 80122ba:	0092      	lsls	r2, r2, #2
 80122bc:	300c      	adds	r0, #12
 80122be:	f000 fe2f 	bl	8012f20 <memcpy>
 80122c2:	4621      	mov	r1, r4
 80122c4:	4638      	mov	r0, r7
 80122c6:	f7ff ffa5 	bl	8012214 <_Bfree>
 80122ca:	4644      	mov	r4, r8
 80122cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122d0:	3501      	adds	r5, #1
 80122d2:	615e      	str	r6, [r3, #20]
 80122d4:	6125      	str	r5, [r4, #16]
 80122d6:	4620      	mov	r0, r4
 80122d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122dc:	080141fc 	.word	0x080141fc
 80122e0:	0801420d 	.word	0x0801420d

080122e4 <__hi0bits>:
 80122e4:	4603      	mov	r3, r0
 80122e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122ea:	bf3a      	itte	cc
 80122ec:	0403      	lslcc	r3, r0, #16
 80122ee:	2010      	movcc	r0, #16
 80122f0:	2000      	movcs	r0, #0
 80122f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122f6:	bf3c      	itt	cc
 80122f8:	021b      	lslcc	r3, r3, #8
 80122fa:	3008      	addcc	r0, #8
 80122fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012300:	bf3c      	itt	cc
 8012302:	011b      	lslcc	r3, r3, #4
 8012304:	3004      	addcc	r0, #4
 8012306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801230a:	bf3c      	itt	cc
 801230c:	009b      	lslcc	r3, r3, #2
 801230e:	3002      	addcc	r0, #2
 8012310:	2b00      	cmp	r3, #0
 8012312:	db05      	blt.n	8012320 <__hi0bits+0x3c>
 8012314:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012318:	f100 0001 	add.w	r0, r0, #1
 801231c:	bf08      	it	eq
 801231e:	2020      	moveq	r0, #32
 8012320:	4770      	bx	lr

08012322 <__lo0bits>:
 8012322:	6803      	ldr	r3, [r0, #0]
 8012324:	4602      	mov	r2, r0
 8012326:	f013 0007 	ands.w	r0, r3, #7
 801232a:	d00b      	beq.n	8012344 <__lo0bits+0x22>
 801232c:	07d9      	lsls	r1, r3, #31
 801232e:	d421      	bmi.n	8012374 <__lo0bits+0x52>
 8012330:	0798      	lsls	r0, r3, #30
 8012332:	bf49      	itett	mi
 8012334:	085b      	lsrmi	r3, r3, #1
 8012336:	089b      	lsrpl	r3, r3, #2
 8012338:	2001      	movmi	r0, #1
 801233a:	6013      	strmi	r3, [r2, #0]
 801233c:	bf5c      	itt	pl
 801233e:	2002      	movpl	r0, #2
 8012340:	6013      	strpl	r3, [r2, #0]
 8012342:	4770      	bx	lr
 8012344:	b299      	uxth	r1, r3
 8012346:	b909      	cbnz	r1, 801234c <__lo0bits+0x2a>
 8012348:	2010      	movs	r0, #16
 801234a:	0c1b      	lsrs	r3, r3, #16
 801234c:	b2d9      	uxtb	r1, r3
 801234e:	b909      	cbnz	r1, 8012354 <__lo0bits+0x32>
 8012350:	3008      	adds	r0, #8
 8012352:	0a1b      	lsrs	r3, r3, #8
 8012354:	0719      	lsls	r1, r3, #28
 8012356:	bf04      	itt	eq
 8012358:	091b      	lsreq	r3, r3, #4
 801235a:	3004      	addeq	r0, #4
 801235c:	0799      	lsls	r1, r3, #30
 801235e:	bf04      	itt	eq
 8012360:	089b      	lsreq	r3, r3, #2
 8012362:	3002      	addeq	r0, #2
 8012364:	07d9      	lsls	r1, r3, #31
 8012366:	d403      	bmi.n	8012370 <__lo0bits+0x4e>
 8012368:	085b      	lsrs	r3, r3, #1
 801236a:	f100 0001 	add.w	r0, r0, #1
 801236e:	d003      	beq.n	8012378 <__lo0bits+0x56>
 8012370:	6013      	str	r3, [r2, #0]
 8012372:	4770      	bx	lr
 8012374:	2000      	movs	r0, #0
 8012376:	4770      	bx	lr
 8012378:	2020      	movs	r0, #32
 801237a:	4770      	bx	lr

0801237c <__i2b>:
 801237c:	b510      	push	{r4, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	2101      	movs	r1, #1
 8012382:	f7ff ff07 	bl	8012194 <_Balloc>
 8012386:	4602      	mov	r2, r0
 8012388:	b928      	cbnz	r0, 8012396 <__i2b+0x1a>
 801238a:	f240 1145 	movw	r1, #325	@ 0x145
 801238e:	4b04      	ldr	r3, [pc, #16]	@ (80123a0 <__i2b+0x24>)
 8012390:	4804      	ldr	r0, [pc, #16]	@ (80123a4 <__i2b+0x28>)
 8012392:	f000 fdd3 	bl	8012f3c <__assert_func>
 8012396:	2301      	movs	r3, #1
 8012398:	6144      	str	r4, [r0, #20]
 801239a:	6103      	str	r3, [r0, #16]
 801239c:	bd10      	pop	{r4, pc}
 801239e:	bf00      	nop
 80123a0:	080141fc 	.word	0x080141fc
 80123a4:	0801420d 	.word	0x0801420d

080123a8 <__multiply>:
 80123a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ac:	4614      	mov	r4, r2
 80123ae:	690a      	ldr	r2, [r1, #16]
 80123b0:	6923      	ldr	r3, [r4, #16]
 80123b2:	460f      	mov	r7, r1
 80123b4:	429a      	cmp	r2, r3
 80123b6:	bfa2      	ittt	ge
 80123b8:	4623      	movge	r3, r4
 80123ba:	460c      	movge	r4, r1
 80123bc:	461f      	movge	r7, r3
 80123be:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80123c2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80123c6:	68a3      	ldr	r3, [r4, #8]
 80123c8:	6861      	ldr	r1, [r4, #4]
 80123ca:	eb0a 0609 	add.w	r6, sl, r9
 80123ce:	42b3      	cmp	r3, r6
 80123d0:	b085      	sub	sp, #20
 80123d2:	bfb8      	it	lt
 80123d4:	3101      	addlt	r1, #1
 80123d6:	f7ff fedd 	bl	8012194 <_Balloc>
 80123da:	b930      	cbnz	r0, 80123ea <__multiply+0x42>
 80123dc:	4602      	mov	r2, r0
 80123de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123e2:	4b43      	ldr	r3, [pc, #268]	@ (80124f0 <__multiply+0x148>)
 80123e4:	4843      	ldr	r0, [pc, #268]	@ (80124f4 <__multiply+0x14c>)
 80123e6:	f000 fda9 	bl	8012f3c <__assert_func>
 80123ea:	f100 0514 	add.w	r5, r0, #20
 80123ee:	462b      	mov	r3, r5
 80123f0:	2200      	movs	r2, #0
 80123f2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80123f6:	4543      	cmp	r3, r8
 80123f8:	d321      	bcc.n	801243e <__multiply+0x96>
 80123fa:	f107 0114 	add.w	r1, r7, #20
 80123fe:	f104 0214 	add.w	r2, r4, #20
 8012402:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012406:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801240a:	9302      	str	r3, [sp, #8]
 801240c:	1b13      	subs	r3, r2, r4
 801240e:	3b15      	subs	r3, #21
 8012410:	f023 0303 	bic.w	r3, r3, #3
 8012414:	3304      	adds	r3, #4
 8012416:	f104 0715 	add.w	r7, r4, #21
 801241a:	42ba      	cmp	r2, r7
 801241c:	bf38      	it	cc
 801241e:	2304      	movcc	r3, #4
 8012420:	9301      	str	r3, [sp, #4]
 8012422:	9b02      	ldr	r3, [sp, #8]
 8012424:	9103      	str	r1, [sp, #12]
 8012426:	428b      	cmp	r3, r1
 8012428:	d80c      	bhi.n	8012444 <__multiply+0x9c>
 801242a:	2e00      	cmp	r6, #0
 801242c:	dd03      	ble.n	8012436 <__multiply+0x8e>
 801242e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012432:	2b00      	cmp	r3, #0
 8012434:	d05a      	beq.n	80124ec <__multiply+0x144>
 8012436:	6106      	str	r6, [r0, #16]
 8012438:	b005      	add	sp, #20
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243e:	f843 2b04 	str.w	r2, [r3], #4
 8012442:	e7d8      	b.n	80123f6 <__multiply+0x4e>
 8012444:	f8b1 a000 	ldrh.w	sl, [r1]
 8012448:	f1ba 0f00 	cmp.w	sl, #0
 801244c:	d023      	beq.n	8012496 <__multiply+0xee>
 801244e:	46a9      	mov	r9, r5
 8012450:	f04f 0c00 	mov.w	ip, #0
 8012454:	f104 0e14 	add.w	lr, r4, #20
 8012458:	f85e 7b04 	ldr.w	r7, [lr], #4
 801245c:	f8d9 3000 	ldr.w	r3, [r9]
 8012460:	fa1f fb87 	uxth.w	fp, r7
 8012464:	b29b      	uxth	r3, r3
 8012466:	fb0a 330b 	mla	r3, sl, fp, r3
 801246a:	4463      	add	r3, ip
 801246c:	f8d9 c000 	ldr.w	ip, [r9]
 8012470:	0c3f      	lsrs	r7, r7, #16
 8012472:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012476:	fb0a c707 	mla	r7, sl, r7, ip
 801247a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801247e:	b29b      	uxth	r3, r3
 8012480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012484:	4572      	cmp	r2, lr
 8012486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801248a:	f849 3b04 	str.w	r3, [r9], #4
 801248e:	d8e3      	bhi.n	8012458 <__multiply+0xb0>
 8012490:	9b01      	ldr	r3, [sp, #4]
 8012492:	f845 c003 	str.w	ip, [r5, r3]
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	3104      	adds	r1, #4
 801249a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801249e:	f1b9 0f00 	cmp.w	r9, #0
 80124a2:	d021      	beq.n	80124e8 <__multiply+0x140>
 80124a4:	46ae      	mov	lr, r5
 80124a6:	f04f 0a00 	mov.w	sl, #0
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	f104 0c14 	add.w	ip, r4, #20
 80124b0:	f8bc b000 	ldrh.w	fp, [ip]
 80124b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	fb09 770b 	mla	r7, r9, fp, r7
 80124be:	4457      	add	r7, sl
 80124c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80124c4:	f84e 3b04 	str.w	r3, [lr], #4
 80124c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80124cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124d0:	f8be 3000 	ldrh.w	r3, [lr]
 80124d4:	4562      	cmp	r2, ip
 80124d6:	fb09 330a 	mla	r3, r9, sl, r3
 80124da:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80124de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124e2:	d8e5      	bhi.n	80124b0 <__multiply+0x108>
 80124e4:	9f01      	ldr	r7, [sp, #4]
 80124e6:	51eb      	str	r3, [r5, r7]
 80124e8:	3504      	adds	r5, #4
 80124ea:	e79a      	b.n	8012422 <__multiply+0x7a>
 80124ec:	3e01      	subs	r6, #1
 80124ee:	e79c      	b.n	801242a <__multiply+0x82>
 80124f0:	080141fc 	.word	0x080141fc
 80124f4:	0801420d 	.word	0x0801420d

080124f8 <__pow5mult>:
 80124f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124fc:	4615      	mov	r5, r2
 80124fe:	f012 0203 	ands.w	r2, r2, #3
 8012502:	4607      	mov	r7, r0
 8012504:	460e      	mov	r6, r1
 8012506:	d007      	beq.n	8012518 <__pow5mult+0x20>
 8012508:	4c25      	ldr	r4, [pc, #148]	@ (80125a0 <__pow5mult+0xa8>)
 801250a:	3a01      	subs	r2, #1
 801250c:	2300      	movs	r3, #0
 801250e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012512:	f7ff fea1 	bl	8012258 <__multadd>
 8012516:	4606      	mov	r6, r0
 8012518:	10ad      	asrs	r5, r5, #2
 801251a:	d03d      	beq.n	8012598 <__pow5mult+0xa0>
 801251c:	69fc      	ldr	r4, [r7, #28]
 801251e:	b97c      	cbnz	r4, 8012540 <__pow5mult+0x48>
 8012520:	2010      	movs	r0, #16
 8012522:	f7ff fd81 	bl	8012028 <malloc>
 8012526:	4602      	mov	r2, r0
 8012528:	61f8      	str	r0, [r7, #28]
 801252a:	b928      	cbnz	r0, 8012538 <__pow5mult+0x40>
 801252c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012530:	4b1c      	ldr	r3, [pc, #112]	@ (80125a4 <__pow5mult+0xac>)
 8012532:	481d      	ldr	r0, [pc, #116]	@ (80125a8 <__pow5mult+0xb0>)
 8012534:	f000 fd02 	bl	8012f3c <__assert_func>
 8012538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801253c:	6004      	str	r4, [r0, #0]
 801253e:	60c4      	str	r4, [r0, #12]
 8012540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012548:	b94c      	cbnz	r4, 801255e <__pow5mult+0x66>
 801254a:	f240 2171 	movw	r1, #625	@ 0x271
 801254e:	4638      	mov	r0, r7
 8012550:	f7ff ff14 	bl	801237c <__i2b>
 8012554:	2300      	movs	r3, #0
 8012556:	4604      	mov	r4, r0
 8012558:	f8c8 0008 	str.w	r0, [r8, #8]
 801255c:	6003      	str	r3, [r0, #0]
 801255e:	f04f 0900 	mov.w	r9, #0
 8012562:	07eb      	lsls	r3, r5, #31
 8012564:	d50a      	bpl.n	801257c <__pow5mult+0x84>
 8012566:	4631      	mov	r1, r6
 8012568:	4622      	mov	r2, r4
 801256a:	4638      	mov	r0, r7
 801256c:	f7ff ff1c 	bl	80123a8 <__multiply>
 8012570:	4680      	mov	r8, r0
 8012572:	4631      	mov	r1, r6
 8012574:	4638      	mov	r0, r7
 8012576:	f7ff fe4d 	bl	8012214 <_Bfree>
 801257a:	4646      	mov	r6, r8
 801257c:	106d      	asrs	r5, r5, #1
 801257e:	d00b      	beq.n	8012598 <__pow5mult+0xa0>
 8012580:	6820      	ldr	r0, [r4, #0]
 8012582:	b938      	cbnz	r0, 8012594 <__pow5mult+0x9c>
 8012584:	4622      	mov	r2, r4
 8012586:	4621      	mov	r1, r4
 8012588:	4638      	mov	r0, r7
 801258a:	f7ff ff0d 	bl	80123a8 <__multiply>
 801258e:	6020      	str	r0, [r4, #0]
 8012590:	f8c0 9000 	str.w	r9, [r0]
 8012594:	4604      	mov	r4, r0
 8012596:	e7e4      	b.n	8012562 <__pow5mult+0x6a>
 8012598:	4630      	mov	r0, r6
 801259a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259e:	bf00      	nop
 80125a0:	08014268 	.word	0x08014268
 80125a4:	0801418d 	.word	0x0801418d
 80125a8:	0801420d 	.word	0x0801420d

080125ac <__lshift>:
 80125ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b0:	460c      	mov	r4, r1
 80125b2:	4607      	mov	r7, r0
 80125b4:	4691      	mov	r9, r2
 80125b6:	6923      	ldr	r3, [r4, #16]
 80125b8:	6849      	ldr	r1, [r1, #4]
 80125ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80125be:	68a3      	ldr	r3, [r4, #8]
 80125c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125c4:	f108 0601 	add.w	r6, r8, #1
 80125c8:	42b3      	cmp	r3, r6
 80125ca:	db0b      	blt.n	80125e4 <__lshift+0x38>
 80125cc:	4638      	mov	r0, r7
 80125ce:	f7ff fde1 	bl	8012194 <_Balloc>
 80125d2:	4605      	mov	r5, r0
 80125d4:	b948      	cbnz	r0, 80125ea <__lshift+0x3e>
 80125d6:	4602      	mov	r2, r0
 80125d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125dc:	4b27      	ldr	r3, [pc, #156]	@ (801267c <__lshift+0xd0>)
 80125de:	4828      	ldr	r0, [pc, #160]	@ (8012680 <__lshift+0xd4>)
 80125e0:	f000 fcac 	bl	8012f3c <__assert_func>
 80125e4:	3101      	adds	r1, #1
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	e7ee      	b.n	80125c8 <__lshift+0x1c>
 80125ea:	2300      	movs	r3, #0
 80125ec:	f100 0114 	add.w	r1, r0, #20
 80125f0:	f100 0210 	add.w	r2, r0, #16
 80125f4:	4618      	mov	r0, r3
 80125f6:	4553      	cmp	r3, sl
 80125f8:	db33      	blt.n	8012662 <__lshift+0xb6>
 80125fa:	6920      	ldr	r0, [r4, #16]
 80125fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012600:	f104 0314 	add.w	r3, r4, #20
 8012604:	f019 091f 	ands.w	r9, r9, #31
 8012608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801260c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012610:	d02b      	beq.n	801266a <__lshift+0xbe>
 8012612:	468a      	mov	sl, r1
 8012614:	2200      	movs	r2, #0
 8012616:	f1c9 0e20 	rsb	lr, r9, #32
 801261a:	6818      	ldr	r0, [r3, #0]
 801261c:	fa00 f009 	lsl.w	r0, r0, r9
 8012620:	4310      	orrs	r0, r2
 8012622:	f84a 0b04 	str.w	r0, [sl], #4
 8012626:	f853 2b04 	ldr.w	r2, [r3], #4
 801262a:	459c      	cmp	ip, r3
 801262c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012630:	d8f3      	bhi.n	801261a <__lshift+0x6e>
 8012632:	ebac 0304 	sub.w	r3, ip, r4
 8012636:	3b15      	subs	r3, #21
 8012638:	f023 0303 	bic.w	r3, r3, #3
 801263c:	3304      	adds	r3, #4
 801263e:	f104 0015 	add.w	r0, r4, #21
 8012642:	4584      	cmp	ip, r0
 8012644:	bf38      	it	cc
 8012646:	2304      	movcc	r3, #4
 8012648:	50ca      	str	r2, [r1, r3]
 801264a:	b10a      	cbz	r2, 8012650 <__lshift+0xa4>
 801264c:	f108 0602 	add.w	r6, r8, #2
 8012650:	3e01      	subs	r6, #1
 8012652:	4638      	mov	r0, r7
 8012654:	4621      	mov	r1, r4
 8012656:	612e      	str	r6, [r5, #16]
 8012658:	f7ff fddc 	bl	8012214 <_Bfree>
 801265c:	4628      	mov	r0, r5
 801265e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012662:	f842 0f04 	str.w	r0, [r2, #4]!
 8012666:	3301      	adds	r3, #1
 8012668:	e7c5      	b.n	80125f6 <__lshift+0x4a>
 801266a:	3904      	subs	r1, #4
 801266c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012670:	459c      	cmp	ip, r3
 8012672:	f841 2f04 	str.w	r2, [r1, #4]!
 8012676:	d8f9      	bhi.n	801266c <__lshift+0xc0>
 8012678:	e7ea      	b.n	8012650 <__lshift+0xa4>
 801267a:	bf00      	nop
 801267c:	080141fc 	.word	0x080141fc
 8012680:	0801420d 	.word	0x0801420d

08012684 <__mcmp>:
 8012684:	4603      	mov	r3, r0
 8012686:	690a      	ldr	r2, [r1, #16]
 8012688:	6900      	ldr	r0, [r0, #16]
 801268a:	b530      	push	{r4, r5, lr}
 801268c:	1a80      	subs	r0, r0, r2
 801268e:	d10e      	bne.n	80126ae <__mcmp+0x2a>
 8012690:	3314      	adds	r3, #20
 8012692:	3114      	adds	r1, #20
 8012694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801269c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80126a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80126a4:	4295      	cmp	r5, r2
 80126a6:	d003      	beq.n	80126b0 <__mcmp+0x2c>
 80126a8:	d205      	bcs.n	80126b6 <__mcmp+0x32>
 80126aa:	f04f 30ff 	mov.w	r0, #4294967295
 80126ae:	bd30      	pop	{r4, r5, pc}
 80126b0:	42a3      	cmp	r3, r4
 80126b2:	d3f3      	bcc.n	801269c <__mcmp+0x18>
 80126b4:	e7fb      	b.n	80126ae <__mcmp+0x2a>
 80126b6:	2001      	movs	r0, #1
 80126b8:	e7f9      	b.n	80126ae <__mcmp+0x2a>
	...

080126bc <__mdiff>:
 80126bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c0:	4689      	mov	r9, r1
 80126c2:	4606      	mov	r6, r0
 80126c4:	4611      	mov	r1, r2
 80126c6:	4648      	mov	r0, r9
 80126c8:	4614      	mov	r4, r2
 80126ca:	f7ff ffdb 	bl	8012684 <__mcmp>
 80126ce:	1e05      	subs	r5, r0, #0
 80126d0:	d112      	bne.n	80126f8 <__mdiff+0x3c>
 80126d2:	4629      	mov	r1, r5
 80126d4:	4630      	mov	r0, r6
 80126d6:	f7ff fd5d 	bl	8012194 <_Balloc>
 80126da:	4602      	mov	r2, r0
 80126dc:	b928      	cbnz	r0, 80126ea <__mdiff+0x2e>
 80126de:	f240 2137 	movw	r1, #567	@ 0x237
 80126e2:	4b3e      	ldr	r3, [pc, #248]	@ (80127dc <__mdiff+0x120>)
 80126e4:	483e      	ldr	r0, [pc, #248]	@ (80127e0 <__mdiff+0x124>)
 80126e6:	f000 fc29 	bl	8012f3c <__assert_func>
 80126ea:	2301      	movs	r3, #1
 80126ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126f0:	4610      	mov	r0, r2
 80126f2:	b003      	add	sp, #12
 80126f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f8:	bfbc      	itt	lt
 80126fa:	464b      	movlt	r3, r9
 80126fc:	46a1      	movlt	r9, r4
 80126fe:	4630      	mov	r0, r6
 8012700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012704:	bfba      	itte	lt
 8012706:	461c      	movlt	r4, r3
 8012708:	2501      	movlt	r5, #1
 801270a:	2500      	movge	r5, #0
 801270c:	f7ff fd42 	bl	8012194 <_Balloc>
 8012710:	4602      	mov	r2, r0
 8012712:	b918      	cbnz	r0, 801271c <__mdiff+0x60>
 8012714:	f240 2145 	movw	r1, #581	@ 0x245
 8012718:	4b30      	ldr	r3, [pc, #192]	@ (80127dc <__mdiff+0x120>)
 801271a:	e7e3      	b.n	80126e4 <__mdiff+0x28>
 801271c:	f100 0b14 	add.w	fp, r0, #20
 8012720:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012724:	f109 0310 	add.w	r3, r9, #16
 8012728:	60c5      	str	r5, [r0, #12]
 801272a:	f04f 0c00 	mov.w	ip, #0
 801272e:	f109 0514 	add.w	r5, r9, #20
 8012732:	46d9      	mov	r9, fp
 8012734:	6926      	ldr	r6, [r4, #16]
 8012736:	f104 0e14 	add.w	lr, r4, #20
 801273a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801273e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	9b01      	ldr	r3, [sp, #4]
 8012746:	f85e 0b04 	ldr.w	r0, [lr], #4
 801274a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801274e:	b281      	uxth	r1, r0
 8012750:	9301      	str	r3, [sp, #4]
 8012752:	fa1f f38a 	uxth.w	r3, sl
 8012756:	1a5b      	subs	r3, r3, r1
 8012758:	0c00      	lsrs	r0, r0, #16
 801275a:	4463      	add	r3, ip
 801275c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012760:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012764:	b29b      	uxth	r3, r3
 8012766:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801276a:	4576      	cmp	r6, lr
 801276c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012770:	f849 3b04 	str.w	r3, [r9], #4
 8012774:	d8e6      	bhi.n	8012744 <__mdiff+0x88>
 8012776:	1b33      	subs	r3, r6, r4
 8012778:	3b15      	subs	r3, #21
 801277a:	f023 0303 	bic.w	r3, r3, #3
 801277e:	3415      	adds	r4, #21
 8012780:	3304      	adds	r3, #4
 8012782:	42a6      	cmp	r6, r4
 8012784:	bf38      	it	cc
 8012786:	2304      	movcc	r3, #4
 8012788:	441d      	add	r5, r3
 801278a:	445b      	add	r3, fp
 801278c:	461e      	mov	r6, r3
 801278e:	462c      	mov	r4, r5
 8012790:	4544      	cmp	r4, r8
 8012792:	d30e      	bcc.n	80127b2 <__mdiff+0xf6>
 8012794:	f108 0103 	add.w	r1, r8, #3
 8012798:	1b49      	subs	r1, r1, r5
 801279a:	f021 0103 	bic.w	r1, r1, #3
 801279e:	3d03      	subs	r5, #3
 80127a0:	45a8      	cmp	r8, r5
 80127a2:	bf38      	it	cc
 80127a4:	2100      	movcc	r1, #0
 80127a6:	440b      	add	r3, r1
 80127a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80127ac:	b199      	cbz	r1, 80127d6 <__mdiff+0x11a>
 80127ae:	6117      	str	r7, [r2, #16]
 80127b0:	e79e      	b.n	80126f0 <__mdiff+0x34>
 80127b2:	46e6      	mov	lr, ip
 80127b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80127b8:	fa1f fc81 	uxth.w	ip, r1
 80127bc:	44f4      	add	ip, lr
 80127be:	0c08      	lsrs	r0, r1, #16
 80127c0:	4471      	add	r1, lr
 80127c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80127c6:	b289      	uxth	r1, r1
 80127c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80127cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127d0:	f846 1b04 	str.w	r1, [r6], #4
 80127d4:	e7dc      	b.n	8012790 <__mdiff+0xd4>
 80127d6:	3f01      	subs	r7, #1
 80127d8:	e7e6      	b.n	80127a8 <__mdiff+0xec>
 80127da:	bf00      	nop
 80127dc:	080141fc 	.word	0x080141fc
 80127e0:	0801420d 	.word	0x0801420d

080127e4 <__d2b>:
 80127e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80127e8:	2101      	movs	r1, #1
 80127ea:	4690      	mov	r8, r2
 80127ec:	4699      	mov	r9, r3
 80127ee:	9e08      	ldr	r6, [sp, #32]
 80127f0:	f7ff fcd0 	bl	8012194 <_Balloc>
 80127f4:	4604      	mov	r4, r0
 80127f6:	b930      	cbnz	r0, 8012806 <__d2b+0x22>
 80127f8:	4602      	mov	r2, r0
 80127fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80127fe:	4b23      	ldr	r3, [pc, #140]	@ (801288c <__d2b+0xa8>)
 8012800:	4823      	ldr	r0, [pc, #140]	@ (8012890 <__d2b+0xac>)
 8012802:	f000 fb9b 	bl	8012f3c <__assert_func>
 8012806:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801280a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801280e:	b10d      	cbz	r5, 8012814 <__d2b+0x30>
 8012810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012814:	9301      	str	r3, [sp, #4]
 8012816:	f1b8 0300 	subs.w	r3, r8, #0
 801281a:	d024      	beq.n	8012866 <__d2b+0x82>
 801281c:	4668      	mov	r0, sp
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	f7ff fd7f 	bl	8012322 <__lo0bits>
 8012824:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012828:	b1d8      	cbz	r0, 8012862 <__d2b+0x7e>
 801282a:	f1c0 0320 	rsb	r3, r0, #32
 801282e:	fa02 f303 	lsl.w	r3, r2, r3
 8012832:	430b      	orrs	r3, r1
 8012834:	40c2      	lsrs	r2, r0
 8012836:	6163      	str	r3, [r4, #20]
 8012838:	9201      	str	r2, [sp, #4]
 801283a:	9b01      	ldr	r3, [sp, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	bf0c      	ite	eq
 8012840:	2201      	moveq	r2, #1
 8012842:	2202      	movne	r2, #2
 8012844:	61a3      	str	r3, [r4, #24]
 8012846:	6122      	str	r2, [r4, #16]
 8012848:	b1ad      	cbz	r5, 8012876 <__d2b+0x92>
 801284a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801284e:	4405      	add	r5, r0
 8012850:	6035      	str	r5, [r6, #0]
 8012852:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012858:	6018      	str	r0, [r3, #0]
 801285a:	4620      	mov	r0, r4
 801285c:	b002      	add	sp, #8
 801285e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8012862:	6161      	str	r1, [r4, #20]
 8012864:	e7e9      	b.n	801283a <__d2b+0x56>
 8012866:	a801      	add	r0, sp, #4
 8012868:	f7ff fd5b 	bl	8012322 <__lo0bits>
 801286c:	9b01      	ldr	r3, [sp, #4]
 801286e:	2201      	movs	r2, #1
 8012870:	6163      	str	r3, [r4, #20]
 8012872:	3020      	adds	r0, #32
 8012874:	e7e7      	b.n	8012846 <__d2b+0x62>
 8012876:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801287a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801287e:	6030      	str	r0, [r6, #0]
 8012880:	6918      	ldr	r0, [r3, #16]
 8012882:	f7ff fd2f 	bl	80122e4 <__hi0bits>
 8012886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801288a:	e7e4      	b.n	8012856 <__d2b+0x72>
 801288c:	080141fc 	.word	0x080141fc
 8012890:	0801420d 	.word	0x0801420d

08012894 <__ssputs_r>:
 8012894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012898:	461f      	mov	r7, r3
 801289a:	688e      	ldr	r6, [r1, #8]
 801289c:	4682      	mov	sl, r0
 801289e:	42be      	cmp	r6, r7
 80128a0:	460c      	mov	r4, r1
 80128a2:	4690      	mov	r8, r2
 80128a4:	680b      	ldr	r3, [r1, #0]
 80128a6:	d82d      	bhi.n	8012904 <__ssputs_r+0x70>
 80128a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80128b0:	d026      	beq.n	8012900 <__ssputs_r+0x6c>
 80128b2:	6965      	ldr	r5, [r4, #20]
 80128b4:	6909      	ldr	r1, [r1, #16]
 80128b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80128ba:	eba3 0901 	sub.w	r9, r3, r1
 80128be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80128c2:	1c7b      	adds	r3, r7, #1
 80128c4:	444b      	add	r3, r9
 80128c6:	106d      	asrs	r5, r5, #1
 80128c8:	429d      	cmp	r5, r3
 80128ca:	bf38      	it	cc
 80128cc:	461d      	movcc	r5, r3
 80128ce:	0553      	lsls	r3, r2, #21
 80128d0:	d527      	bpl.n	8012922 <__ssputs_r+0x8e>
 80128d2:	4629      	mov	r1, r5
 80128d4:	f7ff fbd2 	bl	801207c <_malloc_r>
 80128d8:	4606      	mov	r6, r0
 80128da:	b360      	cbz	r0, 8012936 <__ssputs_r+0xa2>
 80128dc:	464a      	mov	r2, r9
 80128de:	6921      	ldr	r1, [r4, #16]
 80128e0:	f000 fb1e 	bl	8012f20 <memcpy>
 80128e4:	89a3      	ldrh	r3, [r4, #12]
 80128e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80128ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128ee:	81a3      	strh	r3, [r4, #12]
 80128f0:	6126      	str	r6, [r4, #16]
 80128f2:	444e      	add	r6, r9
 80128f4:	6026      	str	r6, [r4, #0]
 80128f6:	463e      	mov	r6, r7
 80128f8:	6165      	str	r5, [r4, #20]
 80128fa:	eba5 0509 	sub.w	r5, r5, r9
 80128fe:	60a5      	str	r5, [r4, #8]
 8012900:	42be      	cmp	r6, r7
 8012902:	d900      	bls.n	8012906 <__ssputs_r+0x72>
 8012904:	463e      	mov	r6, r7
 8012906:	4632      	mov	r2, r6
 8012908:	4641      	mov	r1, r8
 801290a:	6820      	ldr	r0, [r4, #0]
 801290c:	f000 fabb 	bl	8012e86 <memmove>
 8012910:	2000      	movs	r0, #0
 8012912:	68a3      	ldr	r3, [r4, #8]
 8012914:	1b9b      	subs	r3, r3, r6
 8012916:	60a3      	str	r3, [r4, #8]
 8012918:	6823      	ldr	r3, [r4, #0]
 801291a:	4433      	add	r3, r6
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012922:	462a      	mov	r2, r5
 8012924:	f000 fb4e 	bl	8012fc4 <_realloc_r>
 8012928:	4606      	mov	r6, r0
 801292a:	2800      	cmp	r0, #0
 801292c:	d1e0      	bne.n	80128f0 <__ssputs_r+0x5c>
 801292e:	4650      	mov	r0, sl
 8012930:	6921      	ldr	r1, [r4, #16]
 8012932:	f7ff fb31 	bl	8011f98 <_free_r>
 8012936:	230c      	movs	r3, #12
 8012938:	f8ca 3000 	str.w	r3, [sl]
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	f04f 30ff 	mov.w	r0, #4294967295
 8012942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012946:	81a3      	strh	r3, [r4, #12]
 8012948:	e7e9      	b.n	801291e <__ssputs_r+0x8a>
	...

0801294c <_svfiprintf_r>:
 801294c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012950:	4698      	mov	r8, r3
 8012952:	898b      	ldrh	r3, [r1, #12]
 8012954:	4607      	mov	r7, r0
 8012956:	061b      	lsls	r3, r3, #24
 8012958:	460d      	mov	r5, r1
 801295a:	4614      	mov	r4, r2
 801295c:	b09d      	sub	sp, #116	@ 0x74
 801295e:	d510      	bpl.n	8012982 <_svfiprintf_r+0x36>
 8012960:	690b      	ldr	r3, [r1, #16]
 8012962:	b973      	cbnz	r3, 8012982 <_svfiprintf_r+0x36>
 8012964:	2140      	movs	r1, #64	@ 0x40
 8012966:	f7ff fb89 	bl	801207c <_malloc_r>
 801296a:	6028      	str	r0, [r5, #0]
 801296c:	6128      	str	r0, [r5, #16]
 801296e:	b930      	cbnz	r0, 801297e <_svfiprintf_r+0x32>
 8012970:	230c      	movs	r3, #12
 8012972:	603b      	str	r3, [r7, #0]
 8012974:	f04f 30ff 	mov.w	r0, #4294967295
 8012978:	b01d      	add	sp, #116	@ 0x74
 801297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801297e:	2340      	movs	r3, #64	@ 0x40
 8012980:	616b      	str	r3, [r5, #20]
 8012982:	2300      	movs	r3, #0
 8012984:	9309      	str	r3, [sp, #36]	@ 0x24
 8012986:	2320      	movs	r3, #32
 8012988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801298c:	2330      	movs	r3, #48	@ 0x30
 801298e:	f04f 0901 	mov.w	r9, #1
 8012992:	f8cd 800c 	str.w	r8, [sp, #12]
 8012996:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8012b30 <_svfiprintf_r+0x1e4>
 801299a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801299e:	4623      	mov	r3, r4
 80129a0:	469a      	mov	sl, r3
 80129a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129a6:	b10a      	cbz	r2, 80129ac <_svfiprintf_r+0x60>
 80129a8:	2a25      	cmp	r2, #37	@ 0x25
 80129aa:	d1f9      	bne.n	80129a0 <_svfiprintf_r+0x54>
 80129ac:	ebba 0b04 	subs.w	fp, sl, r4
 80129b0:	d00b      	beq.n	80129ca <_svfiprintf_r+0x7e>
 80129b2:	465b      	mov	r3, fp
 80129b4:	4622      	mov	r2, r4
 80129b6:	4629      	mov	r1, r5
 80129b8:	4638      	mov	r0, r7
 80129ba:	f7ff ff6b 	bl	8012894 <__ssputs_r>
 80129be:	3001      	adds	r0, #1
 80129c0:	f000 80a7 	beq.w	8012b12 <_svfiprintf_r+0x1c6>
 80129c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80129c6:	445a      	add	r2, fp
 80129c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80129ca:	f89a 3000 	ldrb.w	r3, [sl]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f000 809f 	beq.w	8012b12 <_svfiprintf_r+0x1c6>
 80129d4:	2300      	movs	r3, #0
 80129d6:	f04f 32ff 	mov.w	r2, #4294967295
 80129da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129de:	f10a 0a01 	add.w	sl, sl, #1
 80129e2:	9304      	str	r3, [sp, #16]
 80129e4:	9307      	str	r3, [sp, #28]
 80129e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80129ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80129ec:	4654      	mov	r4, sl
 80129ee:	2205      	movs	r2, #5
 80129f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f4:	484e      	ldr	r0, [pc, #312]	@ (8012b30 <_svfiprintf_r+0x1e4>)
 80129f6:	f7fe fc70 	bl	80112da <memchr>
 80129fa:	9a04      	ldr	r2, [sp, #16]
 80129fc:	b9d8      	cbnz	r0, 8012a36 <_svfiprintf_r+0xea>
 80129fe:	06d0      	lsls	r0, r2, #27
 8012a00:	bf44      	itt	mi
 8012a02:	2320      	movmi	r3, #32
 8012a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a08:	0711      	lsls	r1, r2, #28
 8012a0a:	bf44      	itt	mi
 8012a0c:	232b      	movmi	r3, #43	@ 0x2b
 8012a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a12:	f89a 3000 	ldrb.w	r3, [sl]
 8012a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a18:	d015      	beq.n	8012a46 <_svfiprintf_r+0xfa>
 8012a1a:	4654      	mov	r4, sl
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	f04f 0c0a 	mov.w	ip, #10
 8012a22:	9a07      	ldr	r2, [sp, #28]
 8012a24:	4621      	mov	r1, r4
 8012a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a2a:	3b30      	subs	r3, #48	@ 0x30
 8012a2c:	2b09      	cmp	r3, #9
 8012a2e:	d94b      	bls.n	8012ac8 <_svfiprintf_r+0x17c>
 8012a30:	b1b0      	cbz	r0, 8012a60 <_svfiprintf_r+0x114>
 8012a32:	9207      	str	r2, [sp, #28]
 8012a34:	e014      	b.n	8012a60 <_svfiprintf_r+0x114>
 8012a36:	eba0 0308 	sub.w	r3, r0, r8
 8012a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	46a2      	mov	sl, r4
 8012a42:	9304      	str	r3, [sp, #16]
 8012a44:	e7d2      	b.n	80129ec <_svfiprintf_r+0xa0>
 8012a46:	9b03      	ldr	r3, [sp, #12]
 8012a48:	1d19      	adds	r1, r3, #4
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	9103      	str	r1, [sp, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	bfbb      	ittet	lt
 8012a52:	425b      	neglt	r3, r3
 8012a54:	f042 0202 	orrlt.w	r2, r2, #2
 8012a58:	9307      	strge	r3, [sp, #28]
 8012a5a:	9307      	strlt	r3, [sp, #28]
 8012a5c:	bfb8      	it	lt
 8012a5e:	9204      	strlt	r2, [sp, #16]
 8012a60:	7823      	ldrb	r3, [r4, #0]
 8012a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a64:	d10a      	bne.n	8012a7c <_svfiprintf_r+0x130>
 8012a66:	7863      	ldrb	r3, [r4, #1]
 8012a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a6a:	d132      	bne.n	8012ad2 <_svfiprintf_r+0x186>
 8012a6c:	9b03      	ldr	r3, [sp, #12]
 8012a6e:	3402      	adds	r4, #2
 8012a70:	1d1a      	adds	r2, r3, #4
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	9203      	str	r2, [sp, #12]
 8012a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a7a:	9305      	str	r3, [sp, #20]
 8012a7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8012b34 <_svfiprintf_r+0x1e8>
 8012a80:	2203      	movs	r2, #3
 8012a82:	4650      	mov	r0, sl
 8012a84:	7821      	ldrb	r1, [r4, #0]
 8012a86:	f7fe fc28 	bl	80112da <memchr>
 8012a8a:	b138      	cbz	r0, 8012a9c <_svfiprintf_r+0x150>
 8012a8c:	2240      	movs	r2, #64	@ 0x40
 8012a8e:	9b04      	ldr	r3, [sp, #16]
 8012a90:	eba0 000a 	sub.w	r0, r0, sl
 8012a94:	4082      	lsls	r2, r0
 8012a96:	4313      	orrs	r3, r2
 8012a98:	3401      	adds	r4, #1
 8012a9a:	9304      	str	r3, [sp, #16]
 8012a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aa0:	2206      	movs	r2, #6
 8012aa2:	4825      	ldr	r0, [pc, #148]	@ (8012b38 <_svfiprintf_r+0x1ec>)
 8012aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012aa8:	f7fe fc17 	bl	80112da <memchr>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d036      	beq.n	8012b1e <_svfiprintf_r+0x1d2>
 8012ab0:	4b22      	ldr	r3, [pc, #136]	@ (8012b3c <_svfiprintf_r+0x1f0>)
 8012ab2:	bb1b      	cbnz	r3, 8012afc <_svfiprintf_r+0x1b0>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	3307      	adds	r3, #7
 8012ab8:	f023 0307 	bic.w	r3, r3, #7
 8012abc:	3308      	adds	r3, #8
 8012abe:	9303      	str	r3, [sp, #12]
 8012ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ac2:	4433      	add	r3, r6
 8012ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ac6:	e76a      	b.n	801299e <_svfiprintf_r+0x52>
 8012ac8:	460c      	mov	r4, r1
 8012aca:	2001      	movs	r0, #1
 8012acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ad0:	e7a8      	b.n	8012a24 <_svfiprintf_r+0xd8>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	f04f 0c0a 	mov.w	ip, #10
 8012ad8:	4619      	mov	r1, r3
 8012ada:	3401      	adds	r4, #1
 8012adc:	9305      	str	r3, [sp, #20]
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ae4:	3a30      	subs	r2, #48	@ 0x30
 8012ae6:	2a09      	cmp	r2, #9
 8012ae8:	d903      	bls.n	8012af2 <_svfiprintf_r+0x1a6>
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d0c6      	beq.n	8012a7c <_svfiprintf_r+0x130>
 8012aee:	9105      	str	r1, [sp, #20]
 8012af0:	e7c4      	b.n	8012a7c <_svfiprintf_r+0x130>
 8012af2:	4604      	mov	r4, r0
 8012af4:	2301      	movs	r3, #1
 8012af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012afa:	e7f0      	b.n	8012ade <_svfiprintf_r+0x192>
 8012afc:	ab03      	add	r3, sp, #12
 8012afe:	9300      	str	r3, [sp, #0]
 8012b00:	462a      	mov	r2, r5
 8012b02:	4638      	mov	r0, r7
 8012b04:	4b0e      	ldr	r3, [pc, #56]	@ (8012b40 <_svfiprintf_r+0x1f4>)
 8012b06:	a904      	add	r1, sp, #16
 8012b08:	f7fd fc90 	bl	801042c <_printf_float>
 8012b0c:	1c42      	adds	r2, r0, #1
 8012b0e:	4606      	mov	r6, r0
 8012b10:	d1d6      	bne.n	8012ac0 <_svfiprintf_r+0x174>
 8012b12:	89ab      	ldrh	r3, [r5, #12]
 8012b14:	065b      	lsls	r3, r3, #25
 8012b16:	f53f af2d 	bmi.w	8012974 <_svfiprintf_r+0x28>
 8012b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b1c:	e72c      	b.n	8012978 <_svfiprintf_r+0x2c>
 8012b1e:	ab03      	add	r3, sp, #12
 8012b20:	9300      	str	r3, [sp, #0]
 8012b22:	462a      	mov	r2, r5
 8012b24:	4638      	mov	r0, r7
 8012b26:	4b06      	ldr	r3, [pc, #24]	@ (8012b40 <_svfiprintf_r+0x1f4>)
 8012b28:	a904      	add	r1, sp, #16
 8012b2a:	f7fd ff1d 	bl	8010968 <_printf_i>
 8012b2e:	e7ed      	b.n	8012b0c <_svfiprintf_r+0x1c0>
 8012b30:	08014368 	.word	0x08014368
 8012b34:	0801436e 	.word	0x0801436e
 8012b38:	08014372 	.word	0x08014372
 8012b3c:	0801042d 	.word	0x0801042d
 8012b40:	08012895 	.word	0x08012895

08012b44 <__sfputc_r>:
 8012b44:	6893      	ldr	r3, [r2, #8]
 8012b46:	b410      	push	{r4}
 8012b48:	3b01      	subs	r3, #1
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	6093      	str	r3, [r2, #8]
 8012b4e:	da07      	bge.n	8012b60 <__sfputc_r+0x1c>
 8012b50:	6994      	ldr	r4, [r2, #24]
 8012b52:	42a3      	cmp	r3, r4
 8012b54:	db01      	blt.n	8012b5a <__sfputc_r+0x16>
 8012b56:	290a      	cmp	r1, #10
 8012b58:	d102      	bne.n	8012b60 <__sfputc_r+0x1c>
 8012b5a:	bc10      	pop	{r4}
 8012b5c:	f7fe baa9 	b.w	80110b2 <__swbuf_r>
 8012b60:	6813      	ldr	r3, [r2, #0]
 8012b62:	1c58      	adds	r0, r3, #1
 8012b64:	6010      	str	r0, [r2, #0]
 8012b66:	7019      	strb	r1, [r3, #0]
 8012b68:	4608      	mov	r0, r1
 8012b6a:	bc10      	pop	{r4}
 8012b6c:	4770      	bx	lr

08012b6e <__sfputs_r>:
 8012b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b70:	4606      	mov	r6, r0
 8012b72:	460f      	mov	r7, r1
 8012b74:	4614      	mov	r4, r2
 8012b76:	18d5      	adds	r5, r2, r3
 8012b78:	42ac      	cmp	r4, r5
 8012b7a:	d101      	bne.n	8012b80 <__sfputs_r+0x12>
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	e007      	b.n	8012b90 <__sfputs_r+0x22>
 8012b80:	463a      	mov	r2, r7
 8012b82:	4630      	mov	r0, r6
 8012b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b88:	f7ff ffdc 	bl	8012b44 <__sfputc_r>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d1f3      	bne.n	8012b78 <__sfputs_r+0xa>
 8012b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b94 <_vfiprintf_r>:
 8012b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b98:	460d      	mov	r5, r1
 8012b9a:	4614      	mov	r4, r2
 8012b9c:	4698      	mov	r8, r3
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	b09d      	sub	sp, #116	@ 0x74
 8012ba2:	b118      	cbz	r0, 8012bac <_vfiprintf_r+0x18>
 8012ba4:	6a03      	ldr	r3, [r0, #32]
 8012ba6:	b90b      	cbnz	r3, 8012bac <_vfiprintf_r+0x18>
 8012ba8:	f7fe f946 	bl	8010e38 <__sinit>
 8012bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bae:	07d9      	lsls	r1, r3, #31
 8012bb0:	d405      	bmi.n	8012bbe <_vfiprintf_r+0x2a>
 8012bb2:	89ab      	ldrh	r3, [r5, #12]
 8012bb4:	059a      	lsls	r2, r3, #22
 8012bb6:	d402      	bmi.n	8012bbe <_vfiprintf_r+0x2a>
 8012bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bba:	f7fe fb8c 	bl	80112d6 <__retarget_lock_acquire_recursive>
 8012bbe:	89ab      	ldrh	r3, [r5, #12]
 8012bc0:	071b      	lsls	r3, r3, #28
 8012bc2:	d501      	bpl.n	8012bc8 <_vfiprintf_r+0x34>
 8012bc4:	692b      	ldr	r3, [r5, #16]
 8012bc6:	b99b      	cbnz	r3, 8012bf0 <_vfiprintf_r+0x5c>
 8012bc8:	4629      	mov	r1, r5
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f7fe fab0 	bl	8011130 <__swsetup_r>
 8012bd0:	b170      	cbz	r0, 8012bf0 <_vfiprintf_r+0x5c>
 8012bd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bd4:	07dc      	lsls	r4, r3, #31
 8012bd6:	d504      	bpl.n	8012be2 <_vfiprintf_r+0x4e>
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	b01d      	add	sp, #116	@ 0x74
 8012bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be2:	89ab      	ldrh	r3, [r5, #12]
 8012be4:	0598      	lsls	r0, r3, #22
 8012be6:	d4f7      	bmi.n	8012bd8 <_vfiprintf_r+0x44>
 8012be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bea:	f7fe fb75 	bl	80112d8 <__retarget_lock_release_recursive>
 8012bee:	e7f3      	b.n	8012bd8 <_vfiprintf_r+0x44>
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bf4:	2320      	movs	r3, #32
 8012bf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012bfa:	2330      	movs	r3, #48	@ 0x30
 8012bfc:	f04f 0901 	mov.w	r9, #1
 8012c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012db0 <_vfiprintf_r+0x21c>
 8012c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c0c:	4623      	mov	r3, r4
 8012c0e:	469a      	mov	sl, r3
 8012c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c14:	b10a      	cbz	r2, 8012c1a <_vfiprintf_r+0x86>
 8012c16:	2a25      	cmp	r2, #37	@ 0x25
 8012c18:	d1f9      	bne.n	8012c0e <_vfiprintf_r+0x7a>
 8012c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c1e:	d00b      	beq.n	8012c38 <_vfiprintf_r+0xa4>
 8012c20:	465b      	mov	r3, fp
 8012c22:	4622      	mov	r2, r4
 8012c24:	4629      	mov	r1, r5
 8012c26:	4630      	mov	r0, r6
 8012c28:	f7ff ffa1 	bl	8012b6e <__sfputs_r>
 8012c2c:	3001      	adds	r0, #1
 8012c2e:	f000 80a7 	beq.w	8012d80 <_vfiprintf_r+0x1ec>
 8012c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c34:	445a      	add	r2, fp
 8012c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c38:	f89a 3000 	ldrb.w	r3, [sl]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	f000 809f 	beq.w	8012d80 <_vfiprintf_r+0x1ec>
 8012c42:	2300      	movs	r3, #0
 8012c44:	f04f 32ff 	mov.w	r2, #4294967295
 8012c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c4c:	f10a 0a01 	add.w	sl, sl, #1
 8012c50:	9304      	str	r3, [sp, #16]
 8012c52:	9307      	str	r3, [sp, #28]
 8012c54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c58:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c5a:	4654      	mov	r4, sl
 8012c5c:	2205      	movs	r2, #5
 8012c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c62:	4853      	ldr	r0, [pc, #332]	@ (8012db0 <_vfiprintf_r+0x21c>)
 8012c64:	f7fe fb39 	bl	80112da <memchr>
 8012c68:	9a04      	ldr	r2, [sp, #16]
 8012c6a:	b9d8      	cbnz	r0, 8012ca4 <_vfiprintf_r+0x110>
 8012c6c:	06d1      	lsls	r1, r2, #27
 8012c6e:	bf44      	itt	mi
 8012c70:	2320      	movmi	r3, #32
 8012c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c76:	0713      	lsls	r3, r2, #28
 8012c78:	bf44      	itt	mi
 8012c7a:	232b      	movmi	r3, #43	@ 0x2b
 8012c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c80:	f89a 3000 	ldrb.w	r3, [sl]
 8012c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c86:	d015      	beq.n	8012cb4 <_vfiprintf_r+0x120>
 8012c88:	4654      	mov	r4, sl
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	f04f 0c0a 	mov.w	ip, #10
 8012c90:	9a07      	ldr	r2, [sp, #28]
 8012c92:	4621      	mov	r1, r4
 8012c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c98:	3b30      	subs	r3, #48	@ 0x30
 8012c9a:	2b09      	cmp	r3, #9
 8012c9c:	d94b      	bls.n	8012d36 <_vfiprintf_r+0x1a2>
 8012c9e:	b1b0      	cbz	r0, 8012cce <_vfiprintf_r+0x13a>
 8012ca0:	9207      	str	r2, [sp, #28]
 8012ca2:	e014      	b.n	8012cce <_vfiprintf_r+0x13a>
 8012ca4:	eba0 0308 	sub.w	r3, r0, r8
 8012ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8012cac:	4313      	orrs	r3, r2
 8012cae:	46a2      	mov	sl, r4
 8012cb0:	9304      	str	r3, [sp, #16]
 8012cb2:	e7d2      	b.n	8012c5a <_vfiprintf_r+0xc6>
 8012cb4:	9b03      	ldr	r3, [sp, #12]
 8012cb6:	1d19      	adds	r1, r3, #4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	9103      	str	r1, [sp, #12]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	bfbb      	ittet	lt
 8012cc0:	425b      	neglt	r3, r3
 8012cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8012cc6:	9307      	strge	r3, [sp, #28]
 8012cc8:	9307      	strlt	r3, [sp, #28]
 8012cca:	bfb8      	it	lt
 8012ccc:	9204      	strlt	r2, [sp, #16]
 8012cce:	7823      	ldrb	r3, [r4, #0]
 8012cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cd2:	d10a      	bne.n	8012cea <_vfiprintf_r+0x156>
 8012cd4:	7863      	ldrb	r3, [r4, #1]
 8012cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cd8:	d132      	bne.n	8012d40 <_vfiprintf_r+0x1ac>
 8012cda:	9b03      	ldr	r3, [sp, #12]
 8012cdc:	3402      	adds	r4, #2
 8012cde:	1d1a      	adds	r2, r3, #4
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	9203      	str	r2, [sp, #12]
 8012ce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ce8:	9305      	str	r3, [sp, #20]
 8012cea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8012db4 <_vfiprintf_r+0x220>
 8012cee:	2203      	movs	r2, #3
 8012cf0:	4650      	mov	r0, sl
 8012cf2:	7821      	ldrb	r1, [r4, #0]
 8012cf4:	f7fe faf1 	bl	80112da <memchr>
 8012cf8:	b138      	cbz	r0, 8012d0a <_vfiprintf_r+0x176>
 8012cfa:	2240      	movs	r2, #64	@ 0x40
 8012cfc:	9b04      	ldr	r3, [sp, #16]
 8012cfe:	eba0 000a 	sub.w	r0, r0, sl
 8012d02:	4082      	lsls	r2, r0
 8012d04:	4313      	orrs	r3, r2
 8012d06:	3401      	adds	r4, #1
 8012d08:	9304      	str	r3, [sp, #16]
 8012d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d0e:	2206      	movs	r2, #6
 8012d10:	4829      	ldr	r0, [pc, #164]	@ (8012db8 <_vfiprintf_r+0x224>)
 8012d12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d16:	f7fe fae0 	bl	80112da <memchr>
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d03f      	beq.n	8012d9e <_vfiprintf_r+0x20a>
 8012d1e:	4b27      	ldr	r3, [pc, #156]	@ (8012dbc <_vfiprintf_r+0x228>)
 8012d20:	bb1b      	cbnz	r3, 8012d6a <_vfiprintf_r+0x1d6>
 8012d22:	9b03      	ldr	r3, [sp, #12]
 8012d24:	3307      	adds	r3, #7
 8012d26:	f023 0307 	bic.w	r3, r3, #7
 8012d2a:	3308      	adds	r3, #8
 8012d2c:	9303      	str	r3, [sp, #12]
 8012d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d30:	443b      	add	r3, r7
 8012d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d34:	e76a      	b.n	8012c0c <_vfiprintf_r+0x78>
 8012d36:	460c      	mov	r4, r1
 8012d38:	2001      	movs	r0, #1
 8012d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d3e:	e7a8      	b.n	8012c92 <_vfiprintf_r+0xfe>
 8012d40:	2300      	movs	r3, #0
 8012d42:	f04f 0c0a 	mov.w	ip, #10
 8012d46:	4619      	mov	r1, r3
 8012d48:	3401      	adds	r4, #1
 8012d4a:	9305      	str	r3, [sp, #20]
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d52:	3a30      	subs	r2, #48	@ 0x30
 8012d54:	2a09      	cmp	r2, #9
 8012d56:	d903      	bls.n	8012d60 <_vfiprintf_r+0x1cc>
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d0c6      	beq.n	8012cea <_vfiprintf_r+0x156>
 8012d5c:	9105      	str	r1, [sp, #20]
 8012d5e:	e7c4      	b.n	8012cea <_vfiprintf_r+0x156>
 8012d60:	4604      	mov	r4, r0
 8012d62:	2301      	movs	r3, #1
 8012d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d68:	e7f0      	b.n	8012d4c <_vfiprintf_r+0x1b8>
 8012d6a:	ab03      	add	r3, sp, #12
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	462a      	mov	r2, r5
 8012d70:	4630      	mov	r0, r6
 8012d72:	4b13      	ldr	r3, [pc, #76]	@ (8012dc0 <_vfiprintf_r+0x22c>)
 8012d74:	a904      	add	r1, sp, #16
 8012d76:	f7fd fb59 	bl	801042c <_printf_float>
 8012d7a:	4607      	mov	r7, r0
 8012d7c:	1c78      	adds	r0, r7, #1
 8012d7e:	d1d6      	bne.n	8012d2e <_vfiprintf_r+0x19a>
 8012d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d82:	07d9      	lsls	r1, r3, #31
 8012d84:	d405      	bmi.n	8012d92 <_vfiprintf_r+0x1fe>
 8012d86:	89ab      	ldrh	r3, [r5, #12]
 8012d88:	059a      	lsls	r2, r3, #22
 8012d8a:	d402      	bmi.n	8012d92 <_vfiprintf_r+0x1fe>
 8012d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d8e:	f7fe faa3 	bl	80112d8 <__retarget_lock_release_recursive>
 8012d92:	89ab      	ldrh	r3, [r5, #12]
 8012d94:	065b      	lsls	r3, r3, #25
 8012d96:	f53f af1f 	bmi.w	8012bd8 <_vfiprintf_r+0x44>
 8012d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d9c:	e71e      	b.n	8012bdc <_vfiprintf_r+0x48>
 8012d9e:	ab03      	add	r3, sp, #12
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	462a      	mov	r2, r5
 8012da4:	4630      	mov	r0, r6
 8012da6:	4b06      	ldr	r3, [pc, #24]	@ (8012dc0 <_vfiprintf_r+0x22c>)
 8012da8:	a904      	add	r1, sp, #16
 8012daa:	f7fd fddd 	bl	8010968 <_printf_i>
 8012dae:	e7e4      	b.n	8012d7a <_vfiprintf_r+0x1e6>
 8012db0:	08014368 	.word	0x08014368
 8012db4:	0801436e 	.word	0x0801436e
 8012db8:	08014372 	.word	0x08014372
 8012dbc:	0801042d 	.word	0x0801042d
 8012dc0:	08012b6f 	.word	0x08012b6f

08012dc4 <__swhatbuf_r>:
 8012dc4:	b570      	push	{r4, r5, r6, lr}
 8012dc6:	460c      	mov	r4, r1
 8012dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dcc:	4615      	mov	r5, r2
 8012dce:	2900      	cmp	r1, #0
 8012dd0:	461e      	mov	r6, r3
 8012dd2:	b096      	sub	sp, #88	@ 0x58
 8012dd4:	da0c      	bge.n	8012df0 <__swhatbuf_r+0x2c>
 8012dd6:	89a3      	ldrh	r3, [r4, #12]
 8012dd8:	2100      	movs	r1, #0
 8012dda:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012dde:	bf14      	ite	ne
 8012de0:	2340      	movne	r3, #64	@ 0x40
 8012de2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012de6:	2000      	movs	r0, #0
 8012de8:	6031      	str	r1, [r6, #0]
 8012dea:	602b      	str	r3, [r5, #0]
 8012dec:	b016      	add	sp, #88	@ 0x58
 8012dee:	bd70      	pop	{r4, r5, r6, pc}
 8012df0:	466a      	mov	r2, sp
 8012df2:	f000 f863 	bl	8012ebc <_fstat_r>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	dbed      	blt.n	8012dd6 <__swhatbuf_r+0x12>
 8012dfa:	9901      	ldr	r1, [sp, #4]
 8012dfc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012e00:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012e04:	4259      	negs	r1, r3
 8012e06:	4159      	adcs	r1, r3
 8012e08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012e0c:	e7eb      	b.n	8012de6 <__swhatbuf_r+0x22>

08012e0e <__smakebuf_r>:
 8012e0e:	898b      	ldrh	r3, [r1, #12]
 8012e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e12:	079d      	lsls	r5, r3, #30
 8012e14:	4606      	mov	r6, r0
 8012e16:	460c      	mov	r4, r1
 8012e18:	d507      	bpl.n	8012e2a <__smakebuf_r+0x1c>
 8012e1a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012e1e:	6023      	str	r3, [r4, #0]
 8012e20:	6123      	str	r3, [r4, #16]
 8012e22:	2301      	movs	r3, #1
 8012e24:	6163      	str	r3, [r4, #20]
 8012e26:	b003      	add	sp, #12
 8012e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e2a:	466a      	mov	r2, sp
 8012e2c:	ab01      	add	r3, sp, #4
 8012e2e:	f7ff ffc9 	bl	8012dc4 <__swhatbuf_r>
 8012e32:	9f00      	ldr	r7, [sp, #0]
 8012e34:	4605      	mov	r5, r0
 8012e36:	4639      	mov	r1, r7
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ff f91f 	bl	801207c <_malloc_r>
 8012e3e:	b948      	cbnz	r0, 8012e54 <__smakebuf_r+0x46>
 8012e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e44:	059a      	lsls	r2, r3, #22
 8012e46:	d4ee      	bmi.n	8012e26 <__smakebuf_r+0x18>
 8012e48:	f023 0303 	bic.w	r3, r3, #3
 8012e4c:	f043 0302 	orr.w	r3, r3, #2
 8012e50:	81a3      	strh	r3, [r4, #12]
 8012e52:	e7e2      	b.n	8012e1a <__smakebuf_r+0xc>
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e5e:	81a3      	strh	r3, [r4, #12]
 8012e60:	9b01      	ldr	r3, [sp, #4]
 8012e62:	6020      	str	r0, [r4, #0]
 8012e64:	b15b      	cbz	r3, 8012e7e <__smakebuf_r+0x70>
 8012e66:	4630      	mov	r0, r6
 8012e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e6c:	f000 f838 	bl	8012ee0 <_isatty_r>
 8012e70:	b128      	cbz	r0, 8012e7e <__smakebuf_r+0x70>
 8012e72:	89a3      	ldrh	r3, [r4, #12]
 8012e74:	f023 0303 	bic.w	r3, r3, #3
 8012e78:	f043 0301 	orr.w	r3, r3, #1
 8012e7c:	81a3      	strh	r3, [r4, #12]
 8012e7e:	89a3      	ldrh	r3, [r4, #12]
 8012e80:	431d      	orrs	r5, r3
 8012e82:	81a5      	strh	r5, [r4, #12]
 8012e84:	e7cf      	b.n	8012e26 <__smakebuf_r+0x18>

08012e86 <memmove>:
 8012e86:	4288      	cmp	r0, r1
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	eb01 0402 	add.w	r4, r1, r2
 8012e8e:	d902      	bls.n	8012e96 <memmove+0x10>
 8012e90:	4284      	cmp	r4, r0
 8012e92:	4623      	mov	r3, r4
 8012e94:	d807      	bhi.n	8012ea6 <memmove+0x20>
 8012e96:	1e43      	subs	r3, r0, #1
 8012e98:	42a1      	cmp	r1, r4
 8012e9a:	d008      	beq.n	8012eae <memmove+0x28>
 8012e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ea0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ea4:	e7f8      	b.n	8012e98 <memmove+0x12>
 8012ea6:	4601      	mov	r1, r0
 8012ea8:	4402      	add	r2, r0
 8012eaa:	428a      	cmp	r2, r1
 8012eac:	d100      	bne.n	8012eb0 <memmove+0x2a>
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012eb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012eb8:	e7f7      	b.n	8012eaa <memmove+0x24>
	...

08012ebc <_fstat_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	4d06      	ldr	r5, [pc, #24]	@ (8012edc <_fstat_r+0x20>)
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	4608      	mov	r0, r1
 8012ec6:	4611      	mov	r1, r2
 8012ec8:	602b      	str	r3, [r5, #0]
 8012eca:	f7ef fd2b 	bl	8002924 <_fstat>
 8012ece:	1c43      	adds	r3, r0, #1
 8012ed0:	d102      	bne.n	8012ed8 <_fstat_r+0x1c>
 8012ed2:	682b      	ldr	r3, [r5, #0]
 8012ed4:	b103      	cbz	r3, 8012ed8 <_fstat_r+0x1c>
 8012ed6:	6023      	str	r3, [r4, #0]
 8012ed8:	bd38      	pop	{r3, r4, r5, pc}
 8012eda:	bf00      	nop
 8012edc:	200009c8 	.word	0x200009c8

08012ee0 <_isatty_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	4d05      	ldr	r5, [pc, #20]	@ (8012efc <_isatty_r+0x1c>)
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	4608      	mov	r0, r1
 8012eea:	602b      	str	r3, [r5, #0]
 8012eec:	f7ef fd29 	bl	8002942 <_isatty>
 8012ef0:	1c43      	adds	r3, r0, #1
 8012ef2:	d102      	bne.n	8012efa <_isatty_r+0x1a>
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	b103      	cbz	r3, 8012efa <_isatty_r+0x1a>
 8012ef8:	6023      	str	r3, [r4, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	200009c8 	.word	0x200009c8

08012f00 <_sbrk_r>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	2300      	movs	r3, #0
 8012f04:	4d05      	ldr	r5, [pc, #20]	@ (8012f1c <_sbrk_r+0x1c>)
 8012f06:	4604      	mov	r4, r0
 8012f08:	4608      	mov	r0, r1
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	f7ef fd30 	bl	8002970 <_sbrk>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_sbrk_r+0x1a>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_sbrk_r+0x1a>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	200009c8 	.word	0x200009c8

08012f20 <memcpy>:
 8012f20:	440a      	add	r2, r1
 8012f22:	4291      	cmp	r1, r2
 8012f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f28:	d100      	bne.n	8012f2c <memcpy+0xc>
 8012f2a:	4770      	bx	lr
 8012f2c:	b510      	push	{r4, lr}
 8012f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f32:	4291      	cmp	r1, r2
 8012f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f38:	d1f9      	bne.n	8012f2e <memcpy+0xe>
 8012f3a:	bd10      	pop	{r4, pc}

08012f3c <__assert_func>:
 8012f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f3e:	4614      	mov	r4, r2
 8012f40:	461a      	mov	r2, r3
 8012f42:	4b09      	ldr	r3, [pc, #36]	@ (8012f68 <__assert_func+0x2c>)
 8012f44:	4605      	mov	r5, r0
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	68d8      	ldr	r0, [r3, #12]
 8012f4a:	b954      	cbnz	r4, 8012f62 <__assert_func+0x26>
 8012f4c:	4b07      	ldr	r3, [pc, #28]	@ (8012f6c <__assert_func+0x30>)
 8012f4e:	461c      	mov	r4, r3
 8012f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f54:	9100      	str	r1, [sp, #0]
 8012f56:	462b      	mov	r3, r5
 8012f58:	4905      	ldr	r1, [pc, #20]	@ (8012f70 <__assert_func+0x34>)
 8012f5a:	f000 f86f 	bl	801303c <fiprintf>
 8012f5e:	f000 f87f 	bl	8013060 <abort>
 8012f62:	4b04      	ldr	r3, [pc, #16]	@ (8012f74 <__assert_func+0x38>)
 8012f64:	e7f4      	b.n	8012f50 <__assert_func+0x14>
 8012f66:	bf00      	nop
 8012f68:	200001a4 	.word	0x200001a4
 8012f6c:	080143be 	.word	0x080143be
 8012f70:	08014390 	.word	0x08014390
 8012f74:	08014383 	.word	0x08014383

08012f78 <_calloc_r>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	fba1 5402 	umull	r5, r4, r1, r2
 8012f7e:	b93c      	cbnz	r4, 8012f90 <_calloc_r+0x18>
 8012f80:	4629      	mov	r1, r5
 8012f82:	f7ff f87b 	bl	801207c <_malloc_r>
 8012f86:	4606      	mov	r6, r0
 8012f88:	b928      	cbnz	r0, 8012f96 <_calloc_r+0x1e>
 8012f8a:	2600      	movs	r6, #0
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	bd70      	pop	{r4, r5, r6, pc}
 8012f90:	220c      	movs	r2, #12
 8012f92:	6002      	str	r2, [r0, #0]
 8012f94:	e7f9      	b.n	8012f8a <_calloc_r+0x12>
 8012f96:	462a      	mov	r2, r5
 8012f98:	4621      	mov	r1, r4
 8012f9a:	f7fe f91f 	bl	80111dc <memset>
 8012f9e:	e7f5      	b.n	8012f8c <_calloc_r+0x14>

08012fa0 <__ascii_mbtowc>:
 8012fa0:	b082      	sub	sp, #8
 8012fa2:	b901      	cbnz	r1, 8012fa6 <__ascii_mbtowc+0x6>
 8012fa4:	a901      	add	r1, sp, #4
 8012fa6:	b142      	cbz	r2, 8012fba <__ascii_mbtowc+0x1a>
 8012fa8:	b14b      	cbz	r3, 8012fbe <__ascii_mbtowc+0x1e>
 8012faa:	7813      	ldrb	r3, [r2, #0]
 8012fac:	600b      	str	r3, [r1, #0]
 8012fae:	7812      	ldrb	r2, [r2, #0]
 8012fb0:	1e10      	subs	r0, r2, #0
 8012fb2:	bf18      	it	ne
 8012fb4:	2001      	movne	r0, #1
 8012fb6:	b002      	add	sp, #8
 8012fb8:	4770      	bx	lr
 8012fba:	4610      	mov	r0, r2
 8012fbc:	e7fb      	b.n	8012fb6 <__ascii_mbtowc+0x16>
 8012fbe:	f06f 0001 	mvn.w	r0, #1
 8012fc2:	e7f8      	b.n	8012fb6 <__ascii_mbtowc+0x16>

08012fc4 <_realloc_r>:
 8012fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fc8:	4680      	mov	r8, r0
 8012fca:	4615      	mov	r5, r2
 8012fcc:	460c      	mov	r4, r1
 8012fce:	b921      	cbnz	r1, 8012fda <_realloc_r+0x16>
 8012fd0:	4611      	mov	r1, r2
 8012fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd6:	f7ff b851 	b.w	801207c <_malloc_r>
 8012fda:	b92a      	cbnz	r2, 8012fe8 <_realloc_r+0x24>
 8012fdc:	f7fe ffdc 	bl	8011f98 <_free_r>
 8012fe0:	2400      	movs	r4, #0
 8012fe2:	4620      	mov	r0, r4
 8012fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe8:	f000 f841 	bl	801306e <_malloc_usable_size_r>
 8012fec:	4285      	cmp	r5, r0
 8012fee:	4606      	mov	r6, r0
 8012ff0:	d802      	bhi.n	8012ff8 <_realloc_r+0x34>
 8012ff2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012ff6:	d8f4      	bhi.n	8012fe2 <_realloc_r+0x1e>
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	4640      	mov	r0, r8
 8012ffc:	f7ff f83e 	bl	801207c <_malloc_r>
 8013000:	4607      	mov	r7, r0
 8013002:	2800      	cmp	r0, #0
 8013004:	d0ec      	beq.n	8012fe0 <_realloc_r+0x1c>
 8013006:	42b5      	cmp	r5, r6
 8013008:	462a      	mov	r2, r5
 801300a:	4621      	mov	r1, r4
 801300c:	bf28      	it	cs
 801300e:	4632      	movcs	r2, r6
 8013010:	f7ff ff86 	bl	8012f20 <memcpy>
 8013014:	4621      	mov	r1, r4
 8013016:	4640      	mov	r0, r8
 8013018:	f7fe ffbe 	bl	8011f98 <_free_r>
 801301c:	463c      	mov	r4, r7
 801301e:	e7e0      	b.n	8012fe2 <_realloc_r+0x1e>

08013020 <__ascii_wctomb>:
 8013020:	4603      	mov	r3, r0
 8013022:	4608      	mov	r0, r1
 8013024:	b141      	cbz	r1, 8013038 <__ascii_wctomb+0x18>
 8013026:	2aff      	cmp	r2, #255	@ 0xff
 8013028:	d904      	bls.n	8013034 <__ascii_wctomb+0x14>
 801302a:	228a      	movs	r2, #138	@ 0x8a
 801302c:	f04f 30ff 	mov.w	r0, #4294967295
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	4770      	bx	lr
 8013034:	2001      	movs	r0, #1
 8013036:	700a      	strb	r2, [r1, #0]
 8013038:	4770      	bx	lr
	...

0801303c <fiprintf>:
 801303c:	b40e      	push	{r1, r2, r3}
 801303e:	b503      	push	{r0, r1, lr}
 8013040:	4601      	mov	r1, r0
 8013042:	ab03      	add	r3, sp, #12
 8013044:	4805      	ldr	r0, [pc, #20]	@ (801305c <fiprintf+0x20>)
 8013046:	f853 2b04 	ldr.w	r2, [r3], #4
 801304a:	6800      	ldr	r0, [r0, #0]
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f7ff fda1 	bl	8012b94 <_vfiprintf_r>
 8013052:	b002      	add	sp, #8
 8013054:	f85d eb04 	ldr.w	lr, [sp], #4
 8013058:	b003      	add	sp, #12
 801305a:	4770      	bx	lr
 801305c:	200001a4 	.word	0x200001a4

08013060 <abort>:
 8013060:	2006      	movs	r0, #6
 8013062:	b508      	push	{r3, lr}
 8013064:	f000 f834 	bl	80130d0 <raise>
 8013068:	2001      	movs	r0, #1
 801306a:	f7ef fc0c 	bl	8002886 <_exit>

0801306e <_malloc_usable_size_r>:
 801306e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013072:	1f18      	subs	r0, r3, #4
 8013074:	2b00      	cmp	r3, #0
 8013076:	bfbc      	itt	lt
 8013078:	580b      	ldrlt	r3, [r1, r0]
 801307a:	18c0      	addlt	r0, r0, r3
 801307c:	4770      	bx	lr

0801307e <_raise_r>:
 801307e:	291f      	cmp	r1, #31
 8013080:	b538      	push	{r3, r4, r5, lr}
 8013082:	4605      	mov	r5, r0
 8013084:	460c      	mov	r4, r1
 8013086:	d904      	bls.n	8013092 <_raise_r+0x14>
 8013088:	2316      	movs	r3, #22
 801308a:	6003      	str	r3, [r0, #0]
 801308c:	f04f 30ff 	mov.w	r0, #4294967295
 8013090:	bd38      	pop	{r3, r4, r5, pc}
 8013092:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013094:	b112      	cbz	r2, 801309c <_raise_r+0x1e>
 8013096:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801309a:	b94b      	cbnz	r3, 80130b0 <_raise_r+0x32>
 801309c:	4628      	mov	r0, r5
 801309e:	f000 f831 	bl	8013104 <_getpid_r>
 80130a2:	4622      	mov	r2, r4
 80130a4:	4601      	mov	r1, r0
 80130a6:	4628      	mov	r0, r5
 80130a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130ac:	f000 b818 	b.w	80130e0 <_kill_r>
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d00a      	beq.n	80130ca <_raise_r+0x4c>
 80130b4:	1c59      	adds	r1, r3, #1
 80130b6:	d103      	bne.n	80130c0 <_raise_r+0x42>
 80130b8:	2316      	movs	r3, #22
 80130ba:	6003      	str	r3, [r0, #0]
 80130bc:	2001      	movs	r0, #1
 80130be:	e7e7      	b.n	8013090 <_raise_r+0x12>
 80130c0:	2100      	movs	r1, #0
 80130c2:	4620      	mov	r0, r4
 80130c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80130c8:	4798      	blx	r3
 80130ca:	2000      	movs	r0, #0
 80130cc:	e7e0      	b.n	8013090 <_raise_r+0x12>
	...

080130d0 <raise>:
 80130d0:	4b02      	ldr	r3, [pc, #8]	@ (80130dc <raise+0xc>)
 80130d2:	4601      	mov	r1, r0
 80130d4:	6818      	ldr	r0, [r3, #0]
 80130d6:	f7ff bfd2 	b.w	801307e <_raise_r>
 80130da:	bf00      	nop
 80130dc:	200001a4 	.word	0x200001a4

080130e0 <_kill_r>:
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	2300      	movs	r3, #0
 80130e4:	4d06      	ldr	r5, [pc, #24]	@ (8013100 <_kill_r+0x20>)
 80130e6:	4604      	mov	r4, r0
 80130e8:	4608      	mov	r0, r1
 80130ea:	4611      	mov	r1, r2
 80130ec:	602b      	str	r3, [r5, #0]
 80130ee:	f7ef fbba 	bl	8002866 <_kill>
 80130f2:	1c43      	adds	r3, r0, #1
 80130f4:	d102      	bne.n	80130fc <_kill_r+0x1c>
 80130f6:	682b      	ldr	r3, [r5, #0]
 80130f8:	b103      	cbz	r3, 80130fc <_kill_r+0x1c>
 80130fa:	6023      	str	r3, [r4, #0]
 80130fc:	bd38      	pop	{r3, r4, r5, pc}
 80130fe:	bf00      	nop
 8013100:	200009c8 	.word	0x200009c8

08013104 <_getpid_r>:
 8013104:	f7ef bba8 	b.w	8002858 <_getpid>

08013108 <pow>:
 8013108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801310c:	4614      	mov	r4, r2
 801310e:	461d      	mov	r5, r3
 8013110:	4680      	mov	r8, r0
 8013112:	4689      	mov	r9, r1
 8013114:	f000 f994 	bl	8013440 <__ieee754_pow>
 8013118:	4622      	mov	r2, r4
 801311a:	4606      	mov	r6, r0
 801311c:	460f      	mov	r7, r1
 801311e:	462b      	mov	r3, r5
 8013120:	4620      	mov	r0, r4
 8013122:	4629      	mov	r1, r5
 8013124:	f7ed fc8a 	bl	8000a3c <__aeabi_dcmpun>
 8013128:	bbc8      	cbnz	r0, 801319e <pow+0x96>
 801312a:	2200      	movs	r2, #0
 801312c:	2300      	movs	r3, #0
 801312e:	4640      	mov	r0, r8
 8013130:	4649      	mov	r1, r9
 8013132:	f7ed fc51 	bl	80009d8 <__aeabi_dcmpeq>
 8013136:	b1b8      	cbz	r0, 8013168 <pow+0x60>
 8013138:	2200      	movs	r2, #0
 801313a:	2300      	movs	r3, #0
 801313c:	4620      	mov	r0, r4
 801313e:	4629      	mov	r1, r5
 8013140:	f7ed fc4a 	bl	80009d8 <__aeabi_dcmpeq>
 8013144:	2800      	cmp	r0, #0
 8013146:	d141      	bne.n	80131cc <pow+0xc4>
 8013148:	4620      	mov	r0, r4
 801314a:	4629      	mov	r1, r5
 801314c:	f000 f868 	bl	8013220 <finite>
 8013150:	b328      	cbz	r0, 801319e <pow+0x96>
 8013152:	2200      	movs	r2, #0
 8013154:	2300      	movs	r3, #0
 8013156:	4620      	mov	r0, r4
 8013158:	4629      	mov	r1, r5
 801315a:	f7ed fc47 	bl	80009ec <__aeabi_dcmplt>
 801315e:	b1f0      	cbz	r0, 801319e <pow+0x96>
 8013160:	f7fe f88e 	bl	8011280 <__errno>
 8013164:	2322      	movs	r3, #34	@ 0x22
 8013166:	e019      	b.n	801319c <pow+0x94>
 8013168:	4630      	mov	r0, r6
 801316a:	4639      	mov	r1, r7
 801316c:	f000 f858 	bl	8013220 <finite>
 8013170:	b9c8      	cbnz	r0, 80131a6 <pow+0x9e>
 8013172:	4640      	mov	r0, r8
 8013174:	4649      	mov	r1, r9
 8013176:	f000 f853 	bl	8013220 <finite>
 801317a:	b1a0      	cbz	r0, 80131a6 <pow+0x9e>
 801317c:	4620      	mov	r0, r4
 801317e:	4629      	mov	r1, r5
 8013180:	f000 f84e 	bl	8013220 <finite>
 8013184:	b178      	cbz	r0, 80131a6 <pow+0x9e>
 8013186:	4632      	mov	r2, r6
 8013188:	463b      	mov	r3, r7
 801318a:	4630      	mov	r0, r6
 801318c:	4639      	mov	r1, r7
 801318e:	f7ed fc55 	bl	8000a3c <__aeabi_dcmpun>
 8013192:	2800      	cmp	r0, #0
 8013194:	d0e4      	beq.n	8013160 <pow+0x58>
 8013196:	f7fe f873 	bl	8011280 <__errno>
 801319a:	2321      	movs	r3, #33	@ 0x21
 801319c:	6003      	str	r3, [r0, #0]
 801319e:	4630      	mov	r0, r6
 80131a0:	4639      	mov	r1, r7
 80131a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a6:	2200      	movs	r2, #0
 80131a8:	2300      	movs	r3, #0
 80131aa:	4630      	mov	r0, r6
 80131ac:	4639      	mov	r1, r7
 80131ae:	f7ed fc13 	bl	80009d8 <__aeabi_dcmpeq>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d0f3      	beq.n	801319e <pow+0x96>
 80131b6:	4640      	mov	r0, r8
 80131b8:	4649      	mov	r1, r9
 80131ba:	f000 f831 	bl	8013220 <finite>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d0ed      	beq.n	801319e <pow+0x96>
 80131c2:	4620      	mov	r0, r4
 80131c4:	4629      	mov	r1, r5
 80131c6:	f000 f82b 	bl	8013220 <finite>
 80131ca:	e7c8      	b.n	801315e <pow+0x56>
 80131cc:	2600      	movs	r6, #0
 80131ce:	4f01      	ldr	r7, [pc, #4]	@ (80131d4 <pow+0xcc>)
 80131d0:	e7e5      	b.n	801319e <pow+0x96>
 80131d2:	bf00      	nop
 80131d4:	3ff00000 	.word	0x3ff00000

080131d8 <sqrt>:
 80131d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131da:	4606      	mov	r6, r0
 80131dc:	460f      	mov	r7, r1
 80131de:	f000 f825 	bl	801322c <__ieee754_sqrt>
 80131e2:	4632      	mov	r2, r6
 80131e4:	4604      	mov	r4, r0
 80131e6:	460d      	mov	r5, r1
 80131e8:	463b      	mov	r3, r7
 80131ea:	4630      	mov	r0, r6
 80131ec:	4639      	mov	r1, r7
 80131ee:	f7ed fc25 	bl	8000a3c <__aeabi_dcmpun>
 80131f2:	b990      	cbnz	r0, 801321a <sqrt+0x42>
 80131f4:	2200      	movs	r2, #0
 80131f6:	2300      	movs	r3, #0
 80131f8:	4630      	mov	r0, r6
 80131fa:	4639      	mov	r1, r7
 80131fc:	f7ed fbf6 	bl	80009ec <__aeabi_dcmplt>
 8013200:	b158      	cbz	r0, 801321a <sqrt+0x42>
 8013202:	f7fe f83d 	bl	8011280 <__errno>
 8013206:	2321      	movs	r3, #33	@ 0x21
 8013208:	2200      	movs	r2, #0
 801320a:	6003      	str	r3, [r0, #0]
 801320c:	2300      	movs	r3, #0
 801320e:	4610      	mov	r0, r2
 8013210:	4619      	mov	r1, r3
 8013212:	f7ed faa3 	bl	800075c <__aeabi_ddiv>
 8013216:	4604      	mov	r4, r0
 8013218:	460d      	mov	r5, r1
 801321a:	4620      	mov	r0, r4
 801321c:	4629      	mov	r1, r5
 801321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013220 <finite>:
 8013220:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8013224:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013228:	0fc0      	lsrs	r0, r0, #31
 801322a:	4770      	bx	lr

0801322c <__ieee754_sqrt>:
 801322c:	4a67      	ldr	r2, [pc, #412]	@ (80133cc <__ieee754_sqrt+0x1a0>)
 801322e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013232:	438a      	bics	r2, r1
 8013234:	4606      	mov	r6, r0
 8013236:	460f      	mov	r7, r1
 8013238:	460b      	mov	r3, r1
 801323a:	4604      	mov	r4, r0
 801323c:	d10e      	bne.n	801325c <__ieee754_sqrt+0x30>
 801323e:	4602      	mov	r2, r0
 8013240:	f7ed f962 	bl	8000508 <__aeabi_dmul>
 8013244:	4602      	mov	r2, r0
 8013246:	460b      	mov	r3, r1
 8013248:	4630      	mov	r0, r6
 801324a:	4639      	mov	r1, r7
 801324c:	f7ec ffa6 	bl	800019c <__adddf3>
 8013250:	4606      	mov	r6, r0
 8013252:	460f      	mov	r7, r1
 8013254:	4630      	mov	r0, r6
 8013256:	4639      	mov	r1, r7
 8013258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	2900      	cmp	r1, #0
 801325e:	dc0c      	bgt.n	801327a <__ieee754_sqrt+0x4e>
 8013260:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8013264:	4302      	orrs	r2, r0
 8013266:	d0f5      	beq.n	8013254 <__ieee754_sqrt+0x28>
 8013268:	b189      	cbz	r1, 801328e <__ieee754_sqrt+0x62>
 801326a:	4602      	mov	r2, r0
 801326c:	f7ec ff94 	bl	8000198 <__aeabi_dsub>
 8013270:	4602      	mov	r2, r0
 8013272:	460b      	mov	r3, r1
 8013274:	f7ed fa72 	bl	800075c <__aeabi_ddiv>
 8013278:	e7ea      	b.n	8013250 <__ieee754_sqrt+0x24>
 801327a:	150a      	asrs	r2, r1, #20
 801327c:	d115      	bne.n	80132aa <__ieee754_sqrt+0x7e>
 801327e:	2100      	movs	r1, #0
 8013280:	e009      	b.n	8013296 <__ieee754_sqrt+0x6a>
 8013282:	0ae3      	lsrs	r3, r4, #11
 8013284:	3a15      	subs	r2, #21
 8013286:	0564      	lsls	r4, r4, #21
 8013288:	2b00      	cmp	r3, #0
 801328a:	d0fa      	beq.n	8013282 <__ieee754_sqrt+0x56>
 801328c:	e7f7      	b.n	801327e <__ieee754_sqrt+0x52>
 801328e:	460a      	mov	r2, r1
 8013290:	e7fa      	b.n	8013288 <__ieee754_sqrt+0x5c>
 8013292:	005b      	lsls	r3, r3, #1
 8013294:	3101      	adds	r1, #1
 8013296:	02d8      	lsls	r0, r3, #11
 8013298:	d5fb      	bpl.n	8013292 <__ieee754_sqrt+0x66>
 801329a:	1e48      	subs	r0, r1, #1
 801329c:	1a12      	subs	r2, r2, r0
 801329e:	f1c1 0020 	rsb	r0, r1, #32
 80132a2:	fa24 f000 	lsr.w	r0, r4, r0
 80132a6:	4303      	orrs	r3, r0
 80132a8:	408c      	lsls	r4, r1
 80132aa:	2600      	movs	r6, #0
 80132ac:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80132b0:	2116      	movs	r1, #22
 80132b2:	07d2      	lsls	r2, r2, #31
 80132b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80132b8:	4632      	mov	r2, r6
 80132ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80132c2:	bf5c      	itt	pl
 80132c4:	005b      	lslpl	r3, r3, #1
 80132c6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80132ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80132ce:	bf58      	it	pl
 80132d0:	0064      	lslpl	r4, r4, #1
 80132d2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80132d6:	107f      	asrs	r7, r7, #1
 80132d8:	0064      	lsls	r4, r4, #1
 80132da:	1815      	adds	r5, r2, r0
 80132dc:	429d      	cmp	r5, r3
 80132de:	bfde      	ittt	le
 80132e0:	182a      	addle	r2, r5, r0
 80132e2:	1b5b      	suble	r3, r3, r5
 80132e4:	1836      	addle	r6, r6, r0
 80132e6:	0fe5      	lsrs	r5, r4, #31
 80132e8:	3901      	subs	r1, #1
 80132ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80132ee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80132f2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80132f6:	d1f0      	bne.n	80132da <__ieee754_sqrt+0xae>
 80132f8:	460d      	mov	r5, r1
 80132fa:	f04f 0a20 	mov.w	sl, #32
 80132fe:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013302:	429a      	cmp	r2, r3
 8013304:	eb01 0c00 	add.w	ip, r1, r0
 8013308:	db02      	blt.n	8013310 <__ieee754_sqrt+0xe4>
 801330a:	d113      	bne.n	8013334 <__ieee754_sqrt+0x108>
 801330c:	45a4      	cmp	ip, r4
 801330e:	d811      	bhi.n	8013334 <__ieee754_sqrt+0x108>
 8013310:	f1bc 0f00 	cmp.w	ip, #0
 8013314:	eb0c 0100 	add.w	r1, ip, r0
 8013318:	da42      	bge.n	80133a0 <__ieee754_sqrt+0x174>
 801331a:	2900      	cmp	r1, #0
 801331c:	db40      	blt.n	80133a0 <__ieee754_sqrt+0x174>
 801331e:	f102 0e01 	add.w	lr, r2, #1
 8013322:	1a9b      	subs	r3, r3, r2
 8013324:	4672      	mov	r2, lr
 8013326:	45a4      	cmp	ip, r4
 8013328:	bf88      	it	hi
 801332a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801332e:	eba4 040c 	sub.w	r4, r4, ip
 8013332:	4405      	add	r5, r0
 8013334:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8013338:	f1ba 0a01 	subs.w	sl, sl, #1
 801333c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8013340:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8013344:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013348:	d1db      	bne.n	8013302 <__ieee754_sqrt+0xd6>
 801334a:	431c      	orrs	r4, r3
 801334c:	d01a      	beq.n	8013384 <__ieee754_sqrt+0x158>
 801334e:	4c20      	ldr	r4, [pc, #128]	@ (80133d0 <__ieee754_sqrt+0x1a4>)
 8013350:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80133d4 <__ieee754_sqrt+0x1a8>
 8013354:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013358:	e9db 2300 	ldrd	r2, r3, [fp]
 801335c:	f7ec ff1c 	bl	8000198 <__aeabi_dsub>
 8013360:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4640      	mov	r0, r8
 801336a:	4649      	mov	r1, r9
 801336c:	f7ed fb48 	bl	8000a00 <__aeabi_dcmple>
 8013370:	b140      	cbz	r0, 8013384 <__ieee754_sqrt+0x158>
 8013372:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013376:	e9db 2300 	ldrd	r2, r3, [fp]
 801337a:	f1b5 3fff 	cmp.w	r5, #4294967295
 801337e:	d111      	bne.n	80133a4 <__ieee754_sqrt+0x178>
 8013380:	4655      	mov	r5, sl
 8013382:	3601      	adds	r6, #1
 8013384:	1072      	asrs	r2, r6, #1
 8013386:	086b      	lsrs	r3, r5, #1
 8013388:	07f1      	lsls	r1, r6, #31
 801338a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801338e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013392:	bf48      	it	mi
 8013394:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013398:	4618      	mov	r0, r3
 801339a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 801339e:	e757      	b.n	8013250 <__ieee754_sqrt+0x24>
 80133a0:	4696      	mov	lr, r2
 80133a2:	e7be      	b.n	8013322 <__ieee754_sqrt+0xf6>
 80133a4:	f7ec fefa 	bl	800019c <__adddf3>
 80133a8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80133ac:	4602      	mov	r2, r0
 80133ae:	460b      	mov	r3, r1
 80133b0:	4640      	mov	r0, r8
 80133b2:	4649      	mov	r1, r9
 80133b4:	f7ed fb1a 	bl	80009ec <__aeabi_dcmplt>
 80133b8:	b120      	cbz	r0, 80133c4 <__ieee754_sqrt+0x198>
 80133ba:	1ca8      	adds	r0, r5, #2
 80133bc:	bf08      	it	eq
 80133be:	3601      	addeq	r6, #1
 80133c0:	3502      	adds	r5, #2
 80133c2:	e7df      	b.n	8013384 <__ieee754_sqrt+0x158>
 80133c4:	1c6b      	adds	r3, r5, #1
 80133c6:	f023 0501 	bic.w	r5, r3, #1
 80133ca:	e7db      	b.n	8013384 <__ieee754_sqrt+0x158>
 80133cc:	7ff00000 	.word	0x7ff00000
 80133d0:	20000368 	.word	0x20000368
 80133d4:	20000360 	.word	0x20000360

080133d8 <trunc>:
 80133d8:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
 80133dc:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80133e0:	f2a5 34ff 	subw	r4, r5, #1023	@ 0x3ff
 80133e4:	2c13      	cmp	r4, #19
 80133e6:	4683      	mov	fp, r0
 80133e8:	468c      	mov	ip, r1
 80133ea:	dc13      	bgt.n	8013414 <trunc+0x3c>
 80133ec:	2c00      	cmp	r4, #0
 80133ee:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80133f2:	da06      	bge.n	8013402 <trunc+0x2a>
 80133f4:	2200      	movs	r2, #0
 80133f6:	46ac      	mov	ip, r5
 80133f8:	4693      	mov	fp, r2
 80133fa:	4658      	mov	r0, fp
 80133fc:	4661      	mov	r1, ip
 80133fe:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
 8013402:	2000      	movs	r0, #0
 8013404:	4b0c      	ldr	r3, [pc, #48]	@ (8013438 <trunc+0x60>)
 8013406:	4123      	asrs	r3, r4
 8013408:	400b      	ands	r3, r1
 801340a:	ea43 0105 	orr.w	r1, r3, r5
 801340e:	4683      	mov	fp, r0
 8013410:	468c      	mov	ip, r1
 8013412:	e7f2      	b.n	80133fa <trunc+0x22>
 8013414:	2c33      	cmp	r4, #51	@ 0x33
 8013416:	dd07      	ble.n	8013428 <trunc+0x50>
 8013418:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801341c:	d1ed      	bne.n	80133fa <trunc+0x22>
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	f7ec febb 	bl	800019c <__adddf3>
 8013426:	e7f2      	b.n	801340e <trunc+0x36>
 8013428:	f04f 33ff 	mov.w	r3, #4294967295
 801342c:	f2a5 4513 	subw	r5, r5, #1043	@ 0x413
 8013430:	40eb      	lsrs	r3, r5
 8013432:	ea20 0003 	bic.w	r0, r0, r3
 8013436:	e7ea      	b.n	801340e <trunc+0x36>
 8013438:	fff00000 	.word	0xfff00000
 801343c:	00000000 	.word	0x00000000

08013440 <__ieee754_pow>:
 8013440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	b091      	sub	sp, #68	@ 0x44
 8013446:	e9cd 2300 	strd	r2, r3, [sp]
 801344a:	468b      	mov	fp, r1
 801344c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8013450:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8013454:	4682      	mov	sl, r0
 8013456:	ea57 0001 	orrs.w	r0, r7, r1
 801345a:	d112      	bne.n	8013482 <__ieee754_pow+0x42>
 801345c:	4653      	mov	r3, sl
 801345e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8013462:	18db      	adds	r3, r3, r3
 8013464:	4152      	adcs	r2, r2
 8013466:	4298      	cmp	r0, r3
 8013468:	4b91      	ldr	r3, [pc, #580]	@ (80136b0 <__ieee754_pow+0x270>)
 801346a:	4193      	sbcs	r3, r2
 801346c:	f080 84ce 	bcs.w	8013e0c <__ieee754_pow+0x9cc>
 8013470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013474:	4650      	mov	r0, sl
 8013476:	4659      	mov	r1, fp
 8013478:	f7ec fe90 	bl	800019c <__adddf3>
 801347c:	b011      	add	sp, #68	@ 0x44
 801347e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013482:	4b8c      	ldr	r3, [pc, #560]	@ (80136b4 <__ieee754_pow+0x274>)
 8013484:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8013488:	429e      	cmp	r6, r3
 801348a:	465d      	mov	r5, fp
 801348c:	46d1      	mov	r9, sl
 801348e:	d807      	bhi.n	80134a0 <__ieee754_pow+0x60>
 8013490:	d102      	bne.n	8013498 <__ieee754_pow+0x58>
 8013492:	f1ba 0f00 	cmp.w	sl, #0
 8013496:	d1eb      	bne.n	8013470 <__ieee754_pow+0x30>
 8013498:	429f      	cmp	r7, r3
 801349a:	d801      	bhi.n	80134a0 <__ieee754_pow+0x60>
 801349c:	d10f      	bne.n	80134be <__ieee754_pow+0x7e>
 801349e:	b171      	cbz	r1, 80134be <__ieee754_pow+0x7e>
 80134a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80134a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80134a8:	ea55 0509 	orrs.w	r5, r5, r9
 80134ac:	d1e0      	bne.n	8013470 <__ieee754_pow+0x30>
 80134ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80134b2:	18db      	adds	r3, r3, r3
 80134b4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80134b8:	4152      	adcs	r2, r2
 80134ba:	429d      	cmp	r5, r3
 80134bc:	e7d4      	b.n	8013468 <__ieee754_pow+0x28>
 80134be:	2d00      	cmp	r5, #0
 80134c0:	4633      	mov	r3, r6
 80134c2:	da39      	bge.n	8013538 <__ieee754_pow+0xf8>
 80134c4:	4a7c      	ldr	r2, [pc, #496]	@ (80136b8 <__ieee754_pow+0x278>)
 80134c6:	4297      	cmp	r7, r2
 80134c8:	d84e      	bhi.n	8013568 <__ieee754_pow+0x128>
 80134ca:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80134ce:	4297      	cmp	r7, r2
 80134d0:	f240 84ab 	bls.w	8013e2a <__ieee754_pow+0x9ea>
 80134d4:	153a      	asrs	r2, r7, #20
 80134d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80134da:	2a14      	cmp	r2, #20
 80134dc:	dd0f      	ble.n	80134fe <__ieee754_pow+0xbe>
 80134de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80134e2:	fa21 f402 	lsr.w	r4, r1, r2
 80134e6:	fa04 f202 	lsl.w	r2, r4, r2
 80134ea:	428a      	cmp	r2, r1
 80134ec:	f040 849d 	bne.w	8013e2a <__ieee754_pow+0x9ea>
 80134f0:	f004 0401 	and.w	r4, r4, #1
 80134f4:	f1c4 0402 	rsb	r4, r4, #2
 80134f8:	2900      	cmp	r1, #0
 80134fa:	d15a      	bne.n	80135b2 <__ieee754_pow+0x172>
 80134fc:	e00e      	b.n	801351c <__ieee754_pow+0xdc>
 80134fe:	2900      	cmp	r1, #0
 8013500:	d156      	bne.n	80135b0 <__ieee754_pow+0x170>
 8013502:	f1c2 0214 	rsb	r2, r2, #20
 8013506:	fa47 f402 	asr.w	r4, r7, r2
 801350a:	fa04 f202 	lsl.w	r2, r4, r2
 801350e:	42ba      	cmp	r2, r7
 8013510:	f040 8488 	bne.w	8013e24 <__ieee754_pow+0x9e4>
 8013514:	f004 0401 	and.w	r4, r4, #1
 8013518:	f1c4 0402 	rsb	r4, r4, #2
 801351c:	4a67      	ldr	r2, [pc, #412]	@ (80136bc <__ieee754_pow+0x27c>)
 801351e:	4297      	cmp	r7, r2
 8013520:	d130      	bne.n	8013584 <__ieee754_pow+0x144>
 8013522:	f1b8 0f00 	cmp.w	r8, #0
 8013526:	f280 8479 	bge.w	8013e1c <__ieee754_pow+0x9dc>
 801352a:	4652      	mov	r2, sl
 801352c:	465b      	mov	r3, fp
 801352e:	2000      	movs	r0, #0
 8013530:	4962      	ldr	r1, [pc, #392]	@ (80136bc <__ieee754_pow+0x27c>)
 8013532:	f7ed f913 	bl	800075c <__aeabi_ddiv>
 8013536:	e7a1      	b.n	801347c <__ieee754_pow+0x3c>
 8013538:	2400      	movs	r4, #0
 801353a:	2900      	cmp	r1, #0
 801353c:	d139      	bne.n	80135b2 <__ieee754_pow+0x172>
 801353e:	4a5d      	ldr	r2, [pc, #372]	@ (80136b4 <__ieee754_pow+0x274>)
 8013540:	4297      	cmp	r7, r2
 8013542:	d1eb      	bne.n	801351c <__ieee754_pow+0xdc>
 8013544:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8013548:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801354c:	ea53 0309 	orrs.w	r3, r3, r9
 8013550:	f000 845c 	beq.w	8013e0c <__ieee754_pow+0x9cc>
 8013554:	4b5a      	ldr	r3, [pc, #360]	@ (80136c0 <__ieee754_pow+0x280>)
 8013556:	429e      	cmp	r6, r3
 8013558:	d908      	bls.n	801356c <__ieee754_pow+0x12c>
 801355a:	f1b8 0f00 	cmp.w	r8, #0
 801355e:	f2c0 8459 	blt.w	8013e14 <__ieee754_pow+0x9d4>
 8013562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013566:	e789      	b.n	801347c <__ieee754_pow+0x3c>
 8013568:	2402      	movs	r4, #2
 801356a:	e7e6      	b.n	801353a <__ieee754_pow+0xfa>
 801356c:	f1b8 0f00 	cmp.w	r8, #0
 8013570:	f04f 0000 	mov.w	r0, #0
 8013574:	f04f 0100 	mov.w	r1, #0
 8013578:	da80      	bge.n	801347c <__ieee754_pow+0x3c>
 801357a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801357e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013582:	e77b      	b.n	801347c <__ieee754_pow+0x3c>
 8013584:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8013588:	d106      	bne.n	8013598 <__ieee754_pow+0x158>
 801358a:	4652      	mov	r2, sl
 801358c:	465b      	mov	r3, fp
 801358e:	4650      	mov	r0, sl
 8013590:	4659      	mov	r1, fp
 8013592:	f7ec ffb9 	bl	8000508 <__aeabi_dmul>
 8013596:	e771      	b.n	801347c <__ieee754_pow+0x3c>
 8013598:	4a4a      	ldr	r2, [pc, #296]	@ (80136c4 <__ieee754_pow+0x284>)
 801359a:	4590      	cmp	r8, r2
 801359c:	d109      	bne.n	80135b2 <__ieee754_pow+0x172>
 801359e:	2d00      	cmp	r5, #0
 80135a0:	db07      	blt.n	80135b2 <__ieee754_pow+0x172>
 80135a2:	4650      	mov	r0, sl
 80135a4:	4659      	mov	r1, fp
 80135a6:	b011      	add	sp, #68	@ 0x44
 80135a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	f7ff be3e 	b.w	801322c <__ieee754_sqrt>
 80135b0:	2400      	movs	r4, #0
 80135b2:	4650      	mov	r0, sl
 80135b4:	4659      	mov	r1, fp
 80135b6:	9302      	str	r3, [sp, #8]
 80135b8:	f000 fc6a 	bl	8013e90 <fabs>
 80135bc:	9b02      	ldr	r3, [sp, #8]
 80135be:	f1b9 0f00 	cmp.w	r9, #0
 80135c2:	d127      	bne.n	8013614 <__ieee754_pow+0x1d4>
 80135c4:	4a3d      	ldr	r2, [pc, #244]	@ (80136bc <__ieee754_pow+0x27c>)
 80135c6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80135ca:	4594      	cmp	ip, r2
 80135cc:	d000      	beq.n	80135d0 <__ieee754_pow+0x190>
 80135ce:	bb0e      	cbnz	r6, 8013614 <__ieee754_pow+0x1d4>
 80135d0:	f1b8 0f00 	cmp.w	r8, #0
 80135d4:	da05      	bge.n	80135e2 <__ieee754_pow+0x1a2>
 80135d6:	4602      	mov	r2, r0
 80135d8:	460b      	mov	r3, r1
 80135da:	2000      	movs	r0, #0
 80135dc:	4937      	ldr	r1, [pc, #220]	@ (80136bc <__ieee754_pow+0x27c>)
 80135de:	f7ed f8bd 	bl	800075c <__aeabi_ddiv>
 80135e2:	2d00      	cmp	r5, #0
 80135e4:	f6bf af4a 	bge.w	801347c <__ieee754_pow+0x3c>
 80135e8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80135ec:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80135f0:	4326      	orrs	r6, r4
 80135f2:	d108      	bne.n	8013606 <__ieee754_pow+0x1c6>
 80135f4:	4602      	mov	r2, r0
 80135f6:	460b      	mov	r3, r1
 80135f8:	4610      	mov	r0, r2
 80135fa:	4619      	mov	r1, r3
 80135fc:	f7ec fdcc 	bl	8000198 <__aeabi_dsub>
 8013600:	4602      	mov	r2, r0
 8013602:	460b      	mov	r3, r1
 8013604:	e795      	b.n	8013532 <__ieee754_pow+0xf2>
 8013606:	2c01      	cmp	r4, #1
 8013608:	f47f af38 	bne.w	801347c <__ieee754_pow+0x3c>
 801360c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013610:	4619      	mov	r1, r3
 8013612:	e733      	b.n	801347c <__ieee754_pow+0x3c>
 8013614:	0fea      	lsrs	r2, r5, #31
 8013616:	3a01      	subs	r2, #1
 8013618:	ea52 0c04 	orrs.w	ip, r2, r4
 801361c:	d102      	bne.n	8013624 <__ieee754_pow+0x1e4>
 801361e:	4652      	mov	r2, sl
 8013620:	465b      	mov	r3, fp
 8013622:	e7e9      	b.n	80135f8 <__ieee754_pow+0x1b8>
 8013624:	f04f 0900 	mov.w	r9, #0
 8013628:	3c01      	subs	r4, #1
 801362a:	4314      	orrs	r4, r2
 801362c:	bf14      	ite	ne
 801362e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80136bc <__ieee754_pow+0x27c>
 8013632:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80136c8 <__ieee754_pow+0x288>
 8013636:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 801363a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 801363e:	f240 8107 	bls.w	8013850 <__ieee754_pow+0x410>
 8013642:	4b22      	ldr	r3, [pc, #136]	@ (80136cc <__ieee754_pow+0x28c>)
 8013644:	429f      	cmp	r7, r3
 8013646:	4b1e      	ldr	r3, [pc, #120]	@ (80136c0 <__ieee754_pow+0x280>)
 8013648:	d913      	bls.n	8013672 <__ieee754_pow+0x232>
 801364a:	429e      	cmp	r6, r3
 801364c:	d808      	bhi.n	8013660 <__ieee754_pow+0x220>
 801364e:	f1b8 0f00 	cmp.w	r8, #0
 8013652:	da08      	bge.n	8013666 <__ieee754_pow+0x226>
 8013654:	2000      	movs	r0, #0
 8013656:	b011      	add	sp, #68	@ 0x44
 8013658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801365c:	f000 bcb4 	b.w	8013fc8 <__math_oflow>
 8013660:	f1b8 0f00 	cmp.w	r8, #0
 8013664:	dcf6      	bgt.n	8013654 <__ieee754_pow+0x214>
 8013666:	2000      	movs	r0, #0
 8013668:	b011      	add	sp, #68	@ 0x44
 801366a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801366e:	f000 bca6 	b.w	8013fbe <__math_uflow>
 8013672:	429e      	cmp	r6, r3
 8013674:	d20c      	bcs.n	8013690 <__ieee754_pow+0x250>
 8013676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801367a:	2200      	movs	r2, #0
 801367c:	2300      	movs	r3, #0
 801367e:	f7ed f9b5 	bl	80009ec <__aeabi_dcmplt>
 8013682:	3800      	subs	r0, #0
 8013684:	bf18      	it	ne
 8013686:	2001      	movne	r0, #1
 8013688:	f1b8 0f00 	cmp.w	r8, #0
 801368c:	daec      	bge.n	8013668 <__ieee754_pow+0x228>
 801368e:	e7e2      	b.n	8013656 <__ieee754_pow+0x216>
 8013690:	4b0a      	ldr	r3, [pc, #40]	@ (80136bc <__ieee754_pow+0x27c>)
 8013692:	2200      	movs	r2, #0
 8013694:	429e      	cmp	r6, r3
 8013696:	d91b      	bls.n	80136d0 <__ieee754_pow+0x290>
 8013698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801369c:	2300      	movs	r3, #0
 801369e:	f7ed f9a5 	bl	80009ec <__aeabi_dcmplt>
 80136a2:	3800      	subs	r0, #0
 80136a4:	bf18      	it	ne
 80136a6:	2001      	movne	r0, #1
 80136a8:	f1b8 0f00 	cmp.w	r8, #0
 80136ac:	dcd3      	bgt.n	8013656 <__ieee754_pow+0x216>
 80136ae:	e7db      	b.n	8013668 <__ieee754_pow+0x228>
 80136b0:	fff00000 	.word	0xfff00000
 80136b4:	7ff00000 	.word	0x7ff00000
 80136b8:	433fffff 	.word	0x433fffff
 80136bc:	3ff00000 	.word	0x3ff00000
 80136c0:	3fefffff 	.word	0x3fefffff
 80136c4:	3fe00000 	.word	0x3fe00000
 80136c8:	bff00000 	.word	0xbff00000
 80136cc:	43f00000 	.word	0x43f00000
 80136d0:	4b5b      	ldr	r3, [pc, #364]	@ (8013840 <__ieee754_pow+0x400>)
 80136d2:	f7ec fd61 	bl	8000198 <__aeabi_dsub>
 80136d6:	a352      	add	r3, pc, #328	@ (adr r3, 8013820 <__ieee754_pow+0x3e0>)
 80136d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136dc:	4604      	mov	r4, r0
 80136de:	460d      	mov	r5, r1
 80136e0:	f7ec ff12 	bl	8000508 <__aeabi_dmul>
 80136e4:	a350      	add	r3, pc, #320	@ (adr r3, 8013828 <__ieee754_pow+0x3e8>)
 80136e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ea:	4606      	mov	r6, r0
 80136ec:	460f      	mov	r7, r1
 80136ee:	4620      	mov	r0, r4
 80136f0:	4629      	mov	r1, r5
 80136f2:	f7ec ff09 	bl	8000508 <__aeabi_dmul>
 80136f6:	2200      	movs	r2, #0
 80136f8:	4682      	mov	sl, r0
 80136fa:	468b      	mov	fp, r1
 80136fc:	4620      	mov	r0, r4
 80136fe:	4629      	mov	r1, r5
 8013700:	4b50      	ldr	r3, [pc, #320]	@ (8013844 <__ieee754_pow+0x404>)
 8013702:	f7ec ff01 	bl	8000508 <__aeabi_dmul>
 8013706:	4602      	mov	r2, r0
 8013708:	460b      	mov	r3, r1
 801370a:	a149      	add	r1, pc, #292	@ (adr r1, 8013830 <__ieee754_pow+0x3f0>)
 801370c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013710:	f7ec fd42 	bl	8000198 <__aeabi_dsub>
 8013714:	4622      	mov	r2, r4
 8013716:	462b      	mov	r3, r5
 8013718:	f7ec fef6 	bl	8000508 <__aeabi_dmul>
 801371c:	4602      	mov	r2, r0
 801371e:	460b      	mov	r3, r1
 8013720:	2000      	movs	r0, #0
 8013722:	4949      	ldr	r1, [pc, #292]	@ (8013848 <__ieee754_pow+0x408>)
 8013724:	f7ec fd38 	bl	8000198 <__aeabi_dsub>
 8013728:	4622      	mov	r2, r4
 801372a:	4680      	mov	r8, r0
 801372c:	4689      	mov	r9, r1
 801372e:	462b      	mov	r3, r5
 8013730:	4620      	mov	r0, r4
 8013732:	4629      	mov	r1, r5
 8013734:	f7ec fee8 	bl	8000508 <__aeabi_dmul>
 8013738:	4602      	mov	r2, r0
 801373a:	460b      	mov	r3, r1
 801373c:	4640      	mov	r0, r8
 801373e:	4649      	mov	r1, r9
 8013740:	f7ec fee2 	bl	8000508 <__aeabi_dmul>
 8013744:	a33c      	add	r3, pc, #240	@ (adr r3, 8013838 <__ieee754_pow+0x3f8>)
 8013746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374a:	f7ec fedd 	bl	8000508 <__aeabi_dmul>
 801374e:	4602      	mov	r2, r0
 8013750:	460b      	mov	r3, r1
 8013752:	4650      	mov	r0, sl
 8013754:	4659      	mov	r1, fp
 8013756:	f7ec fd1f 	bl	8000198 <__aeabi_dsub>
 801375a:	2400      	movs	r4, #0
 801375c:	4602      	mov	r2, r0
 801375e:	460b      	mov	r3, r1
 8013760:	4680      	mov	r8, r0
 8013762:	4689      	mov	r9, r1
 8013764:	4630      	mov	r0, r6
 8013766:	4639      	mov	r1, r7
 8013768:	f7ec fd18 	bl	800019c <__adddf3>
 801376c:	4632      	mov	r2, r6
 801376e:	463b      	mov	r3, r7
 8013770:	4620      	mov	r0, r4
 8013772:	460d      	mov	r5, r1
 8013774:	f7ec fd10 	bl	8000198 <__aeabi_dsub>
 8013778:	4602      	mov	r2, r0
 801377a:	460b      	mov	r3, r1
 801377c:	4640      	mov	r0, r8
 801377e:	4649      	mov	r1, r9
 8013780:	f7ec fd0a 	bl	8000198 <__aeabi_dsub>
 8013784:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801378c:	2300      	movs	r3, #0
 801378e:	9304      	str	r3, [sp, #16]
 8013790:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013794:	4606      	mov	r6, r0
 8013796:	460f      	mov	r7, r1
 8013798:	e9dd 0100 	ldrd	r0, r1, [sp]
 801379c:	4652      	mov	r2, sl
 801379e:	465b      	mov	r3, fp
 80137a0:	f7ec fcfa 	bl	8000198 <__aeabi_dsub>
 80137a4:	4622      	mov	r2, r4
 80137a6:	462b      	mov	r3, r5
 80137a8:	f7ec feae 	bl	8000508 <__aeabi_dmul>
 80137ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80137b0:	4680      	mov	r8, r0
 80137b2:	4689      	mov	r9, r1
 80137b4:	4630      	mov	r0, r6
 80137b6:	4639      	mov	r1, r7
 80137b8:	f7ec fea6 	bl	8000508 <__aeabi_dmul>
 80137bc:	4602      	mov	r2, r0
 80137be:	460b      	mov	r3, r1
 80137c0:	4640      	mov	r0, r8
 80137c2:	4649      	mov	r1, r9
 80137c4:	f7ec fcea 	bl	800019c <__adddf3>
 80137c8:	4652      	mov	r2, sl
 80137ca:	465b      	mov	r3, fp
 80137cc:	4606      	mov	r6, r0
 80137ce:	460f      	mov	r7, r1
 80137d0:	4620      	mov	r0, r4
 80137d2:	4629      	mov	r1, r5
 80137d4:	f7ec fe98 	bl	8000508 <__aeabi_dmul>
 80137d8:	460b      	mov	r3, r1
 80137da:	4602      	mov	r2, r0
 80137dc:	4680      	mov	r8, r0
 80137de:	4689      	mov	r9, r1
 80137e0:	4630      	mov	r0, r6
 80137e2:	4639      	mov	r1, r7
 80137e4:	f7ec fcda 	bl	800019c <__adddf3>
 80137e8:	4b18      	ldr	r3, [pc, #96]	@ (801384c <__ieee754_pow+0x40c>)
 80137ea:	4604      	mov	r4, r0
 80137ec:	4299      	cmp	r1, r3
 80137ee:	460d      	mov	r5, r1
 80137f0:	468a      	mov	sl, r1
 80137f2:	468b      	mov	fp, r1
 80137f4:	f340 82e0 	ble.w	8013db8 <__ieee754_pow+0x978>
 80137f8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80137fc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013800:	4303      	orrs	r3, r0
 8013802:	f000 81df 	beq.w	8013bc4 <__ieee754_pow+0x784>
 8013806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801380a:	2200      	movs	r2, #0
 801380c:	2300      	movs	r3, #0
 801380e:	f7ed f8ed 	bl	80009ec <__aeabi_dcmplt>
 8013812:	3800      	subs	r0, #0
 8013814:	bf18      	it	ne
 8013816:	2001      	movne	r0, #1
 8013818:	e71d      	b.n	8013656 <__ieee754_pow+0x216>
 801381a:	bf00      	nop
 801381c:	f3af 8000 	nop.w
 8013820:	60000000 	.word	0x60000000
 8013824:	3ff71547 	.word	0x3ff71547
 8013828:	f85ddf44 	.word	0xf85ddf44
 801382c:	3e54ae0b 	.word	0x3e54ae0b
 8013830:	55555555 	.word	0x55555555
 8013834:	3fd55555 	.word	0x3fd55555
 8013838:	652b82fe 	.word	0x652b82fe
 801383c:	3ff71547 	.word	0x3ff71547
 8013840:	3ff00000 	.word	0x3ff00000
 8013844:	3fd00000 	.word	0x3fd00000
 8013848:	3fe00000 	.word	0x3fe00000
 801384c:	408fffff 	.word	0x408fffff
 8013850:	4ad3      	ldr	r2, [pc, #844]	@ (8013ba0 <__ieee754_pow+0x760>)
 8013852:	402a      	ands	r2, r5
 8013854:	2a00      	cmp	r2, #0
 8013856:	f040 817a 	bne.w	8013b4e <__ieee754_pow+0x70e>
 801385a:	4bd2      	ldr	r3, [pc, #840]	@ (8013ba4 <__ieee754_pow+0x764>)
 801385c:	2200      	movs	r2, #0
 801385e:	f7ec fe53 	bl	8000508 <__aeabi_dmul>
 8013862:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8013866:	460b      	mov	r3, r1
 8013868:	151a      	asrs	r2, r3, #20
 801386a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801386e:	4422      	add	r2, r4
 8013870:	920a      	str	r2, [sp, #40]	@ 0x28
 8013872:	4acd      	ldr	r2, [pc, #820]	@ (8013ba8 <__ieee754_pow+0x768>)
 8013874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013878:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801387c:	4293      	cmp	r3, r2
 801387e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013882:	dd08      	ble.n	8013896 <__ieee754_pow+0x456>
 8013884:	4ac9      	ldr	r2, [pc, #804]	@ (8013bac <__ieee754_pow+0x76c>)
 8013886:	4293      	cmp	r3, r2
 8013888:	f340 8163 	ble.w	8013b52 <__ieee754_pow+0x712>
 801388c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801388e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013892:	3301      	adds	r3, #1
 8013894:	930a      	str	r3, [sp, #40]	@ 0x28
 8013896:	2600      	movs	r6, #0
 8013898:	00f3      	lsls	r3, r6, #3
 801389a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801389c:	4bc4      	ldr	r3, [pc, #784]	@ (8013bb0 <__ieee754_pow+0x770>)
 801389e:	4629      	mov	r1, r5
 80138a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80138a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138a8:	461a      	mov	r2, r3
 80138aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80138ae:	4623      	mov	r3, r4
 80138b0:	4682      	mov	sl, r0
 80138b2:	f7ec fc71 	bl	8000198 <__aeabi_dsub>
 80138b6:	4652      	mov	r2, sl
 80138b8:	462b      	mov	r3, r5
 80138ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80138be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80138c2:	f7ec fc6b 	bl	800019c <__adddf3>
 80138c6:	4602      	mov	r2, r0
 80138c8:	460b      	mov	r3, r1
 80138ca:	2000      	movs	r0, #0
 80138cc:	49b9      	ldr	r1, [pc, #740]	@ (8013bb4 <__ieee754_pow+0x774>)
 80138ce:	f7ec ff45 	bl	800075c <__aeabi_ddiv>
 80138d2:	4602      	mov	r2, r0
 80138d4:	460b      	mov	r3, r1
 80138d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80138da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138de:	f7ec fe13 	bl	8000508 <__aeabi_dmul>
 80138e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80138e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80138ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80138ee:	2300      	movs	r3, #0
 80138f0:	2200      	movs	r2, #0
 80138f2:	46ab      	mov	fp, r5
 80138f4:	106d      	asrs	r5, r5, #1
 80138f6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80138fa:	9304      	str	r3, [sp, #16]
 80138fc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013900:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013904:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8013908:	4640      	mov	r0, r8
 801390a:	4649      	mov	r1, r9
 801390c:	4614      	mov	r4, r2
 801390e:	461d      	mov	r5, r3
 8013910:	f7ec fdfa 	bl	8000508 <__aeabi_dmul>
 8013914:	4602      	mov	r2, r0
 8013916:	460b      	mov	r3, r1
 8013918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801391c:	f7ec fc3c 	bl	8000198 <__aeabi_dsub>
 8013920:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013924:	4606      	mov	r6, r0
 8013926:	460f      	mov	r7, r1
 8013928:	4620      	mov	r0, r4
 801392a:	4629      	mov	r1, r5
 801392c:	f7ec fc34 	bl	8000198 <__aeabi_dsub>
 8013930:	4602      	mov	r2, r0
 8013932:	460b      	mov	r3, r1
 8013934:	4650      	mov	r0, sl
 8013936:	4659      	mov	r1, fp
 8013938:	f7ec fc2e 	bl	8000198 <__aeabi_dsub>
 801393c:	4642      	mov	r2, r8
 801393e:	464b      	mov	r3, r9
 8013940:	f7ec fde2 	bl	8000508 <__aeabi_dmul>
 8013944:	4602      	mov	r2, r0
 8013946:	460b      	mov	r3, r1
 8013948:	4630      	mov	r0, r6
 801394a:	4639      	mov	r1, r7
 801394c:	f7ec fc24 	bl	8000198 <__aeabi_dsub>
 8013950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013954:	f7ec fdd8 	bl	8000508 <__aeabi_dmul>
 8013958:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801395c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013960:	4610      	mov	r0, r2
 8013962:	4619      	mov	r1, r3
 8013964:	f7ec fdd0 	bl	8000508 <__aeabi_dmul>
 8013968:	a37b      	add	r3, pc, #492	@ (adr r3, 8013b58 <__ieee754_pow+0x718>)
 801396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396e:	4604      	mov	r4, r0
 8013970:	460d      	mov	r5, r1
 8013972:	f7ec fdc9 	bl	8000508 <__aeabi_dmul>
 8013976:	a37a      	add	r3, pc, #488	@ (adr r3, 8013b60 <__ieee754_pow+0x720>)
 8013978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397c:	f7ec fc0e 	bl	800019c <__adddf3>
 8013980:	4622      	mov	r2, r4
 8013982:	462b      	mov	r3, r5
 8013984:	f7ec fdc0 	bl	8000508 <__aeabi_dmul>
 8013988:	a377      	add	r3, pc, #476	@ (adr r3, 8013b68 <__ieee754_pow+0x728>)
 801398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398e:	f7ec fc05 	bl	800019c <__adddf3>
 8013992:	4622      	mov	r2, r4
 8013994:	462b      	mov	r3, r5
 8013996:	f7ec fdb7 	bl	8000508 <__aeabi_dmul>
 801399a:	a375      	add	r3, pc, #468	@ (adr r3, 8013b70 <__ieee754_pow+0x730>)
 801399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a0:	f7ec fbfc 	bl	800019c <__adddf3>
 80139a4:	4622      	mov	r2, r4
 80139a6:	462b      	mov	r3, r5
 80139a8:	f7ec fdae 	bl	8000508 <__aeabi_dmul>
 80139ac:	a372      	add	r3, pc, #456	@ (adr r3, 8013b78 <__ieee754_pow+0x738>)
 80139ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b2:	f7ec fbf3 	bl	800019c <__adddf3>
 80139b6:	4622      	mov	r2, r4
 80139b8:	462b      	mov	r3, r5
 80139ba:	f7ec fda5 	bl	8000508 <__aeabi_dmul>
 80139be:	a370      	add	r3, pc, #448	@ (adr r3, 8013b80 <__ieee754_pow+0x740>)
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	f7ec fbea 	bl	800019c <__adddf3>
 80139c8:	4622      	mov	r2, r4
 80139ca:	4606      	mov	r6, r0
 80139cc:	460f      	mov	r7, r1
 80139ce:	462b      	mov	r3, r5
 80139d0:	4620      	mov	r0, r4
 80139d2:	4629      	mov	r1, r5
 80139d4:	f7ec fd98 	bl	8000508 <__aeabi_dmul>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4630      	mov	r0, r6
 80139de:	4639      	mov	r1, r7
 80139e0:	f7ec fd92 	bl	8000508 <__aeabi_dmul>
 80139e4:	4604      	mov	r4, r0
 80139e6:	460d      	mov	r5, r1
 80139e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139ec:	4642      	mov	r2, r8
 80139ee:	464b      	mov	r3, r9
 80139f0:	f7ec fbd4 	bl	800019c <__adddf3>
 80139f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80139f8:	f7ec fd86 	bl	8000508 <__aeabi_dmul>
 80139fc:	4622      	mov	r2, r4
 80139fe:	462b      	mov	r3, r5
 8013a00:	f7ec fbcc 	bl	800019c <__adddf3>
 8013a04:	4642      	mov	r2, r8
 8013a06:	4682      	mov	sl, r0
 8013a08:	468b      	mov	fp, r1
 8013a0a:	464b      	mov	r3, r9
 8013a0c:	4640      	mov	r0, r8
 8013a0e:	4649      	mov	r1, r9
 8013a10:	f7ec fd7a 	bl	8000508 <__aeabi_dmul>
 8013a14:	2200      	movs	r2, #0
 8013a16:	4b68      	ldr	r3, [pc, #416]	@ (8013bb8 <__ieee754_pow+0x778>)
 8013a18:	4606      	mov	r6, r0
 8013a1a:	460f      	mov	r7, r1
 8013a1c:	f7ec fbbe 	bl	800019c <__adddf3>
 8013a20:	4652      	mov	r2, sl
 8013a22:	465b      	mov	r3, fp
 8013a24:	f7ec fbba 	bl	800019c <__adddf3>
 8013a28:	2400      	movs	r4, #0
 8013a2a:	460d      	mov	r5, r1
 8013a2c:	4622      	mov	r2, r4
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4640      	mov	r0, r8
 8013a32:	4649      	mov	r1, r9
 8013a34:	f7ec fd68 	bl	8000508 <__aeabi_dmul>
 8013a38:	2200      	movs	r2, #0
 8013a3a:	4680      	mov	r8, r0
 8013a3c:	4689      	mov	r9, r1
 8013a3e:	4620      	mov	r0, r4
 8013a40:	4629      	mov	r1, r5
 8013a42:	4b5d      	ldr	r3, [pc, #372]	@ (8013bb8 <__ieee754_pow+0x778>)
 8013a44:	f7ec fba8 	bl	8000198 <__aeabi_dsub>
 8013a48:	4632      	mov	r2, r6
 8013a4a:	463b      	mov	r3, r7
 8013a4c:	f7ec fba4 	bl	8000198 <__aeabi_dsub>
 8013a50:	4602      	mov	r2, r0
 8013a52:	460b      	mov	r3, r1
 8013a54:	4650      	mov	r0, sl
 8013a56:	4659      	mov	r1, fp
 8013a58:	f7ec fb9e 	bl	8000198 <__aeabi_dsub>
 8013a5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a60:	f7ec fd52 	bl	8000508 <__aeabi_dmul>
 8013a64:	4622      	mov	r2, r4
 8013a66:	4606      	mov	r6, r0
 8013a68:	460f      	mov	r7, r1
 8013a6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013a6e:	462b      	mov	r3, r5
 8013a70:	f7ec fd4a 	bl	8000508 <__aeabi_dmul>
 8013a74:	4602      	mov	r2, r0
 8013a76:	460b      	mov	r3, r1
 8013a78:	4630      	mov	r0, r6
 8013a7a:	4639      	mov	r1, r7
 8013a7c:	f7ec fb8e 	bl	800019c <__adddf3>
 8013a80:	2400      	movs	r4, #0
 8013a82:	4606      	mov	r6, r0
 8013a84:	460f      	mov	r7, r1
 8013a86:	4602      	mov	r2, r0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	4640      	mov	r0, r8
 8013a8c:	4649      	mov	r1, r9
 8013a8e:	f7ec fb85 	bl	800019c <__adddf3>
 8013a92:	a33d      	add	r3, pc, #244	@ (adr r3, 8013b88 <__ieee754_pow+0x748>)
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	f7ec fd34 	bl	8000508 <__aeabi_dmul>
 8013aa0:	4642      	mov	r2, r8
 8013aa2:	464b      	mov	r3, r9
 8013aa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f7ec fb74 	bl	8000198 <__aeabi_dsub>
 8013ab0:	4602      	mov	r2, r0
 8013ab2:	460b      	mov	r3, r1
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	4639      	mov	r1, r7
 8013ab8:	f7ec fb6e 	bl	8000198 <__aeabi_dsub>
 8013abc:	a334      	add	r3, pc, #208	@ (adr r3, 8013b90 <__ieee754_pow+0x750>)
 8013abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac2:	f7ec fd21 	bl	8000508 <__aeabi_dmul>
 8013ac6:	a334      	add	r3, pc, #208	@ (adr r3, 8013b98 <__ieee754_pow+0x758>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	4606      	mov	r6, r0
 8013ace:	460f      	mov	r7, r1
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	4629      	mov	r1, r5
 8013ad4:	f7ec fd18 	bl	8000508 <__aeabi_dmul>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	4630      	mov	r0, r6
 8013ade:	4639      	mov	r1, r7
 8013ae0:	f7ec fb5c 	bl	800019c <__adddf3>
 8013ae4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ae6:	4b35      	ldr	r3, [pc, #212]	@ (8013bbc <__ieee754_pow+0x77c>)
 8013ae8:	2400      	movs	r4, #0
 8013aea:	4413      	add	r3, r2
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f7ec fb54 	bl	800019c <__adddf3>
 8013af4:	4682      	mov	sl, r0
 8013af6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013af8:	468b      	mov	fp, r1
 8013afa:	f7ec fc9b 	bl	8000434 <__aeabi_i2d>
 8013afe:	4606      	mov	r6, r0
 8013b00:	460f      	mov	r7, r1
 8013b02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b04:	4b2e      	ldr	r3, [pc, #184]	@ (8013bc0 <__ieee754_pow+0x780>)
 8013b06:	4413      	add	r3, r2
 8013b08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b0c:	4652      	mov	r2, sl
 8013b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b12:	465b      	mov	r3, fp
 8013b14:	f7ec fb42 	bl	800019c <__adddf3>
 8013b18:	4642      	mov	r2, r8
 8013b1a:	464b      	mov	r3, r9
 8013b1c:	f7ec fb3e 	bl	800019c <__adddf3>
 8013b20:	4632      	mov	r2, r6
 8013b22:	463b      	mov	r3, r7
 8013b24:	f7ec fb3a 	bl	800019c <__adddf3>
 8013b28:	4632      	mov	r2, r6
 8013b2a:	463b      	mov	r3, r7
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	460d      	mov	r5, r1
 8013b30:	f7ec fb32 	bl	8000198 <__aeabi_dsub>
 8013b34:	4642      	mov	r2, r8
 8013b36:	464b      	mov	r3, r9
 8013b38:	f7ec fb2e 	bl	8000198 <__aeabi_dsub>
 8013b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b40:	f7ec fb2a 	bl	8000198 <__aeabi_dsub>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	4650      	mov	r0, sl
 8013b4a:	4659      	mov	r1, fp
 8013b4c:	e618      	b.n	8013780 <__ieee754_pow+0x340>
 8013b4e:	2400      	movs	r4, #0
 8013b50:	e68a      	b.n	8013868 <__ieee754_pow+0x428>
 8013b52:	2601      	movs	r6, #1
 8013b54:	e6a0      	b.n	8013898 <__ieee754_pow+0x458>
 8013b56:	bf00      	nop
 8013b58:	4a454eef 	.word	0x4a454eef
 8013b5c:	3fca7e28 	.word	0x3fca7e28
 8013b60:	93c9db65 	.word	0x93c9db65
 8013b64:	3fcd864a 	.word	0x3fcd864a
 8013b68:	a91d4101 	.word	0xa91d4101
 8013b6c:	3fd17460 	.word	0x3fd17460
 8013b70:	518f264d 	.word	0x518f264d
 8013b74:	3fd55555 	.word	0x3fd55555
 8013b78:	db6fabff 	.word	0xdb6fabff
 8013b7c:	3fdb6db6 	.word	0x3fdb6db6
 8013b80:	33333303 	.word	0x33333303
 8013b84:	3fe33333 	.word	0x3fe33333
 8013b88:	e0000000 	.word	0xe0000000
 8013b8c:	3feec709 	.word	0x3feec709
 8013b90:	dc3a03fd 	.word	0xdc3a03fd
 8013b94:	3feec709 	.word	0x3feec709
 8013b98:	145b01f5 	.word	0x145b01f5
 8013b9c:	be3e2fe0 	.word	0xbe3e2fe0
 8013ba0:	7ff00000 	.word	0x7ff00000
 8013ba4:	43400000 	.word	0x43400000
 8013ba8:	0003988e 	.word	0x0003988e
 8013bac:	000bb679 	.word	0x000bb679
 8013bb0:	080144e0 	.word	0x080144e0
 8013bb4:	3ff00000 	.word	0x3ff00000
 8013bb8:	40080000 	.word	0x40080000
 8013bbc:	080144c0 	.word	0x080144c0
 8013bc0:	080144d0 	.word	0x080144d0
 8013bc4:	a39a      	add	r3, pc, #616	@ (adr r3, 8013e30 <__ieee754_pow+0x9f0>)
 8013bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bca:	4630      	mov	r0, r6
 8013bcc:	4639      	mov	r1, r7
 8013bce:	f7ec fae5 	bl	800019c <__adddf3>
 8013bd2:	4642      	mov	r2, r8
 8013bd4:	e9cd 0100 	strd	r0, r1, [sp]
 8013bd8:	464b      	mov	r3, r9
 8013bda:	4620      	mov	r0, r4
 8013bdc:	4629      	mov	r1, r5
 8013bde:	f7ec fadb 	bl	8000198 <__aeabi_dsub>
 8013be2:	4602      	mov	r2, r0
 8013be4:	460b      	mov	r3, r1
 8013be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bea:	f7ec ff1d 	bl	8000a28 <__aeabi_dcmpgt>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	f47f ae09 	bne.w	8013806 <__ieee754_pow+0x3c6>
 8013bf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013bf8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013bfc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013c00:	fa43 fa0a 	asr.w	sl, r3, sl
 8013c04:	44da      	add	sl, fp
 8013c06:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013c0a:	489b      	ldr	r0, [pc, #620]	@ (8013e78 <__ieee754_pow+0xa38>)
 8013c0c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013c10:	4108      	asrs	r0, r1
 8013c12:	ea00 030a 	and.w	r3, r0, sl
 8013c16:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013c1a:	f1c1 0114 	rsb	r1, r1, #20
 8013c1e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013c22:	4640      	mov	r0, r8
 8013c24:	fa4a fa01 	asr.w	sl, sl, r1
 8013c28:	f1bb 0f00 	cmp.w	fp, #0
 8013c2c:	4649      	mov	r1, r9
 8013c2e:	f04f 0200 	mov.w	r2, #0
 8013c32:	bfb8      	it	lt
 8013c34:	f1ca 0a00 	rsblt	sl, sl, #0
 8013c38:	f7ec faae 	bl	8000198 <__aeabi_dsub>
 8013c3c:	4680      	mov	r8, r0
 8013c3e:	4689      	mov	r9, r1
 8013c40:	2400      	movs	r4, #0
 8013c42:	4632      	mov	r2, r6
 8013c44:	463b      	mov	r3, r7
 8013c46:	4640      	mov	r0, r8
 8013c48:	4649      	mov	r1, r9
 8013c4a:	f7ec faa7 	bl	800019c <__adddf3>
 8013c4e:	a37a      	add	r3, pc, #488	@ (adr r3, 8013e38 <__ieee754_pow+0x9f8>)
 8013c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c54:	4620      	mov	r0, r4
 8013c56:	460d      	mov	r5, r1
 8013c58:	f7ec fc56 	bl	8000508 <__aeabi_dmul>
 8013c5c:	4642      	mov	r2, r8
 8013c5e:	464b      	mov	r3, r9
 8013c60:	e9cd 0100 	strd	r0, r1, [sp]
 8013c64:	4620      	mov	r0, r4
 8013c66:	4629      	mov	r1, r5
 8013c68:	f7ec fa96 	bl	8000198 <__aeabi_dsub>
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	460b      	mov	r3, r1
 8013c70:	4630      	mov	r0, r6
 8013c72:	4639      	mov	r1, r7
 8013c74:	f7ec fa90 	bl	8000198 <__aeabi_dsub>
 8013c78:	a371      	add	r3, pc, #452	@ (adr r3, 8013e40 <__ieee754_pow+0xa00>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec fc43 	bl	8000508 <__aeabi_dmul>
 8013c82:	a371      	add	r3, pc, #452	@ (adr r3, 8013e48 <__ieee754_pow+0xa08>)
 8013c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c88:	4680      	mov	r8, r0
 8013c8a:	4689      	mov	r9, r1
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	4629      	mov	r1, r5
 8013c90:	f7ec fc3a 	bl	8000508 <__aeabi_dmul>
 8013c94:	4602      	mov	r2, r0
 8013c96:	460b      	mov	r3, r1
 8013c98:	4640      	mov	r0, r8
 8013c9a:	4649      	mov	r1, r9
 8013c9c:	f7ec fa7e 	bl	800019c <__adddf3>
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cac:	f7ec fa76 	bl	800019c <__adddf3>
 8013cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013cb4:	4680      	mov	r8, r0
 8013cb6:	4689      	mov	r9, r1
 8013cb8:	f7ec fa6e 	bl	8000198 <__aeabi_dsub>
 8013cbc:	4602      	mov	r2, r0
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	4629      	mov	r1, r5
 8013cc4:	f7ec fa68 	bl	8000198 <__aeabi_dsub>
 8013cc8:	4642      	mov	r2, r8
 8013cca:	4606      	mov	r6, r0
 8013ccc:	460f      	mov	r7, r1
 8013cce:	464b      	mov	r3, r9
 8013cd0:	4640      	mov	r0, r8
 8013cd2:	4649      	mov	r1, r9
 8013cd4:	f7ec fc18 	bl	8000508 <__aeabi_dmul>
 8013cd8:	a35d      	add	r3, pc, #372	@ (adr r3, 8013e50 <__ieee754_pow+0xa10>)
 8013cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cde:	4604      	mov	r4, r0
 8013ce0:	460d      	mov	r5, r1
 8013ce2:	f7ec fc11 	bl	8000508 <__aeabi_dmul>
 8013ce6:	a35c      	add	r3, pc, #368	@ (adr r3, 8013e58 <__ieee754_pow+0xa18>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	f7ec fa54 	bl	8000198 <__aeabi_dsub>
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	462b      	mov	r3, r5
 8013cf4:	f7ec fc08 	bl	8000508 <__aeabi_dmul>
 8013cf8:	a359      	add	r3, pc, #356	@ (adr r3, 8013e60 <__ieee754_pow+0xa20>)
 8013cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfe:	f7ec fa4d 	bl	800019c <__adddf3>
 8013d02:	4622      	mov	r2, r4
 8013d04:	462b      	mov	r3, r5
 8013d06:	f7ec fbff 	bl	8000508 <__aeabi_dmul>
 8013d0a:	a357      	add	r3, pc, #348	@ (adr r3, 8013e68 <__ieee754_pow+0xa28>)
 8013d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d10:	f7ec fa42 	bl	8000198 <__aeabi_dsub>
 8013d14:	4622      	mov	r2, r4
 8013d16:	462b      	mov	r3, r5
 8013d18:	f7ec fbf6 	bl	8000508 <__aeabi_dmul>
 8013d1c:	a354      	add	r3, pc, #336	@ (adr r3, 8013e70 <__ieee754_pow+0xa30>)
 8013d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d22:	f7ec fa3b 	bl	800019c <__adddf3>
 8013d26:	4622      	mov	r2, r4
 8013d28:	462b      	mov	r3, r5
 8013d2a:	f7ec fbed 	bl	8000508 <__aeabi_dmul>
 8013d2e:	4602      	mov	r2, r0
 8013d30:	460b      	mov	r3, r1
 8013d32:	4640      	mov	r0, r8
 8013d34:	4649      	mov	r1, r9
 8013d36:	f7ec fa2f 	bl	8000198 <__aeabi_dsub>
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	460d      	mov	r5, r1
 8013d3e:	4602      	mov	r2, r0
 8013d40:	460b      	mov	r3, r1
 8013d42:	4640      	mov	r0, r8
 8013d44:	4649      	mov	r1, r9
 8013d46:	f7ec fbdf 	bl	8000508 <__aeabi_dmul>
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8013d50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013d54:	4620      	mov	r0, r4
 8013d56:	4629      	mov	r1, r5
 8013d58:	f7ec fa1e 	bl	8000198 <__aeabi_dsub>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d64:	f7ec fcfa 	bl	800075c <__aeabi_ddiv>
 8013d68:	4632      	mov	r2, r6
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	460d      	mov	r5, r1
 8013d6e:	463b      	mov	r3, r7
 8013d70:	4640      	mov	r0, r8
 8013d72:	4649      	mov	r1, r9
 8013d74:	f7ec fbc8 	bl	8000508 <__aeabi_dmul>
 8013d78:	4632      	mov	r2, r6
 8013d7a:	463b      	mov	r3, r7
 8013d7c:	f7ec fa0e 	bl	800019c <__adddf3>
 8013d80:	4602      	mov	r2, r0
 8013d82:	460b      	mov	r3, r1
 8013d84:	4620      	mov	r0, r4
 8013d86:	4629      	mov	r1, r5
 8013d88:	f7ec fa06 	bl	8000198 <__aeabi_dsub>
 8013d8c:	4642      	mov	r2, r8
 8013d8e:	464b      	mov	r3, r9
 8013d90:	f7ec fa02 	bl	8000198 <__aeabi_dsub>
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	2000      	movs	r0, #0
 8013d9a:	4938      	ldr	r1, [pc, #224]	@ (8013e7c <__ieee754_pow+0xa3c>)
 8013d9c:	f7ec f9fc 	bl	8000198 <__aeabi_dsub>
 8013da0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013da4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8013da8:	da2e      	bge.n	8013e08 <__ieee754_pow+0x9c8>
 8013daa:	4652      	mov	r2, sl
 8013dac:	f000 f874 	bl	8013e98 <scalbn>
 8013db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013db4:	f7ff bbed 	b.w	8013592 <__ieee754_pow+0x152>
 8013db8:	4c31      	ldr	r4, [pc, #196]	@ (8013e80 <__ieee754_pow+0xa40>)
 8013dba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013dbe:	42a3      	cmp	r3, r4
 8013dc0:	d91a      	bls.n	8013df8 <__ieee754_pow+0x9b8>
 8013dc2:	4b30      	ldr	r3, [pc, #192]	@ (8013e84 <__ieee754_pow+0xa44>)
 8013dc4:	440b      	add	r3, r1
 8013dc6:	4303      	orrs	r3, r0
 8013dc8:	d009      	beq.n	8013dde <__ieee754_pow+0x99e>
 8013dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f7ec fe0b 	bl	80009ec <__aeabi_dcmplt>
 8013dd6:	3800      	subs	r0, #0
 8013dd8:	bf18      	it	ne
 8013dda:	2001      	movne	r0, #1
 8013ddc:	e444      	b.n	8013668 <__ieee754_pow+0x228>
 8013dde:	4642      	mov	r2, r8
 8013de0:	464b      	mov	r3, r9
 8013de2:	f7ec f9d9 	bl	8000198 <__aeabi_dsub>
 8013de6:	4632      	mov	r2, r6
 8013de8:	463b      	mov	r3, r7
 8013dea:	f7ec fe13 	bl	8000a14 <__aeabi_dcmpge>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d1eb      	bne.n	8013dca <__ieee754_pow+0x98a>
 8013df2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8013e88 <__ieee754_pow+0xa48>
 8013df6:	e6fd      	b.n	8013bf4 <__ieee754_pow+0x7b4>
 8013df8:	469a      	mov	sl, r3
 8013dfa:	4b24      	ldr	r3, [pc, #144]	@ (8013e8c <__ieee754_pow+0xa4c>)
 8013dfc:	459a      	cmp	sl, r3
 8013dfe:	f63f aef9 	bhi.w	8013bf4 <__ieee754_pow+0x7b4>
 8013e02:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013e06:	e71b      	b.n	8013c40 <__ieee754_pow+0x800>
 8013e08:	4621      	mov	r1, r4
 8013e0a:	e7d1      	b.n	8013db0 <__ieee754_pow+0x970>
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	491b      	ldr	r1, [pc, #108]	@ (8013e7c <__ieee754_pow+0xa3c>)
 8013e10:	f7ff bb34 	b.w	801347c <__ieee754_pow+0x3c>
 8013e14:	2000      	movs	r0, #0
 8013e16:	2100      	movs	r1, #0
 8013e18:	f7ff bb30 	b.w	801347c <__ieee754_pow+0x3c>
 8013e1c:	4650      	mov	r0, sl
 8013e1e:	4659      	mov	r1, fp
 8013e20:	f7ff bb2c 	b.w	801347c <__ieee754_pow+0x3c>
 8013e24:	460c      	mov	r4, r1
 8013e26:	f7ff bb79 	b.w	801351c <__ieee754_pow+0xdc>
 8013e2a:	2400      	movs	r4, #0
 8013e2c:	f7ff bb64 	b.w	80134f8 <__ieee754_pow+0xb8>
 8013e30:	652b82fe 	.word	0x652b82fe
 8013e34:	3c971547 	.word	0x3c971547
 8013e38:	00000000 	.word	0x00000000
 8013e3c:	3fe62e43 	.word	0x3fe62e43
 8013e40:	fefa39ef 	.word	0xfefa39ef
 8013e44:	3fe62e42 	.word	0x3fe62e42
 8013e48:	0ca86c39 	.word	0x0ca86c39
 8013e4c:	be205c61 	.word	0xbe205c61
 8013e50:	72bea4d0 	.word	0x72bea4d0
 8013e54:	3e663769 	.word	0x3e663769
 8013e58:	c5d26bf1 	.word	0xc5d26bf1
 8013e5c:	3ebbbd41 	.word	0x3ebbbd41
 8013e60:	af25de2c 	.word	0xaf25de2c
 8013e64:	3f11566a 	.word	0x3f11566a
 8013e68:	16bebd93 	.word	0x16bebd93
 8013e6c:	3f66c16c 	.word	0x3f66c16c
 8013e70:	5555553e 	.word	0x5555553e
 8013e74:	3fc55555 	.word	0x3fc55555
 8013e78:	fff00000 	.word	0xfff00000
 8013e7c:	3ff00000 	.word	0x3ff00000
 8013e80:	4090cbff 	.word	0x4090cbff
 8013e84:	3f6f3400 	.word	0x3f6f3400
 8013e88:	4090cc00 	.word	0x4090cc00
 8013e8c:	3fe00000 	.word	0x3fe00000

08013e90 <fabs>:
 8013e90:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013e94:	4619      	mov	r1, r3
 8013e96:	4770      	bx	lr

08013e98 <scalbn>:
 8013e98:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013e9c:	4616      	mov	r6, r2
 8013e9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013ea2:	4683      	mov	fp, r0
 8013ea4:	468c      	mov	ip, r1
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	b982      	cbnz	r2, 8013ecc <scalbn+0x34>
 8013eaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013eae:	4303      	orrs	r3, r0
 8013eb0:	d039      	beq.n	8013f26 <scalbn+0x8e>
 8013eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8013f70 <scalbn+0xd8>)
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f7ec fb27 	bl	8000508 <__aeabi_dmul>
 8013eba:	4b2e      	ldr	r3, [pc, #184]	@ (8013f74 <scalbn+0xdc>)
 8013ebc:	4683      	mov	fp, r0
 8013ebe:	429e      	cmp	r6, r3
 8013ec0:	468c      	mov	ip, r1
 8013ec2:	da0d      	bge.n	8013ee0 <scalbn+0x48>
 8013ec4:	a326      	add	r3, pc, #152	@ (adr r3, 8013f60 <scalbn+0xc8>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	e01b      	b.n	8013f04 <scalbn+0x6c>
 8013ecc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8013ed0:	42ba      	cmp	r2, r7
 8013ed2:	d109      	bne.n	8013ee8 <scalbn+0x50>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	f7ec f961 	bl	800019c <__adddf3>
 8013eda:	4683      	mov	fp, r0
 8013edc:	468c      	mov	ip, r1
 8013ede:	e022      	b.n	8013f26 <scalbn+0x8e>
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013ee6:	3a36      	subs	r2, #54	@ 0x36
 8013ee8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013eec:	428e      	cmp	r6, r1
 8013eee:	dd0c      	ble.n	8013f0a <scalbn+0x72>
 8013ef0:	a31d      	add	r3, pc, #116	@ (adr r3, 8013f68 <scalbn+0xd0>)
 8013ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef6:	461c      	mov	r4, r3
 8013ef8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8013efc:	f361 74df 	bfi	r4, r1, #31, #1
 8013f00:	4621      	mov	r1, r4
 8013f02:	481d      	ldr	r0, [pc, #116]	@ (8013f78 <scalbn+0xe0>)
 8013f04:	f7ec fb00 	bl	8000508 <__aeabi_dmul>
 8013f08:	e7e7      	b.n	8013eda <scalbn+0x42>
 8013f0a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013f0e:	4432      	add	r2, r6
 8013f10:	428a      	cmp	r2, r1
 8013f12:	dced      	bgt.n	8013ef0 <scalbn+0x58>
 8013f14:	2a00      	cmp	r2, #0
 8013f16:	dd0a      	ble.n	8013f2e <scalbn+0x96>
 8013f18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013f1c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013f20:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013f24:	46ac      	mov	ip, r5
 8013f26:	4658      	mov	r0, fp
 8013f28:	4661      	mov	r1, ip
 8013f2a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8013f2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013f32:	da09      	bge.n	8013f48 <scalbn+0xb0>
 8013f34:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8013f38:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8013f3c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8013f40:	480e      	ldr	r0, [pc, #56]	@ (8013f7c <scalbn+0xe4>)
 8013f42:	f041 011f 	orr.w	r1, r1, #31
 8013f46:	e7bd      	b.n	8013ec4 <scalbn+0x2c>
 8013f48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013f4c:	3236      	adds	r2, #54	@ 0x36
 8013f4e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013f52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013f56:	4658      	mov	r0, fp
 8013f58:	4629      	mov	r1, r5
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	4b08      	ldr	r3, [pc, #32]	@ (8013f80 <scalbn+0xe8>)
 8013f5e:	e7d1      	b.n	8013f04 <scalbn+0x6c>
 8013f60:	c2f8f359 	.word	0xc2f8f359
 8013f64:	01a56e1f 	.word	0x01a56e1f
 8013f68:	8800759c 	.word	0x8800759c
 8013f6c:	7e37e43c 	.word	0x7e37e43c
 8013f70:	43500000 	.word	0x43500000
 8013f74:	ffff3cb0 	.word	0xffff3cb0
 8013f78:	8800759c 	.word	0x8800759c
 8013f7c:	c2f8f359 	.word	0xc2f8f359
 8013f80:	3c900000 	.word	0x3c900000

08013f84 <with_errno>:
 8013f84:	b570      	push	{r4, r5, r6, lr}
 8013f86:	4604      	mov	r4, r0
 8013f88:	460d      	mov	r5, r1
 8013f8a:	4616      	mov	r6, r2
 8013f8c:	f7fd f978 	bl	8011280 <__errno>
 8013f90:	4629      	mov	r1, r5
 8013f92:	6006      	str	r6, [r0, #0]
 8013f94:	4620      	mov	r0, r4
 8013f96:	bd70      	pop	{r4, r5, r6, pc}

08013f98 <xflow>:
 8013f98:	b513      	push	{r0, r1, r4, lr}
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	b10c      	cbz	r4, 8013fa6 <xflow+0xe>
 8013fa2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8013faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fae:	f7ec faab 	bl	8000508 <__aeabi_dmul>
 8013fb2:	2222      	movs	r2, #34	@ 0x22
 8013fb4:	b002      	add	sp, #8
 8013fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fba:	f7ff bfe3 	b.w	8013f84 <with_errno>

08013fbe <__math_uflow>:
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8013fc4:	f7ff bfe8 	b.w	8013f98 <xflow>

08013fc8 <__math_oflow>:
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8013fce:	f7ff bfe3 	b.w	8013f98 <xflow>
	...

08013fd4 <_init>:
 8013fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd6:	bf00      	nop
 8013fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fda:	bc08      	pop	{r3}
 8013fdc:	469e      	mov	lr, r3
 8013fde:	4770      	bx	lr

08013fe0 <_fini>:
 8013fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe2:	bf00      	nop
 8013fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fe6:	bc08      	pop	{r3}
 8013fe8:	469e      	mov	lr, r3
 8013fea:	4770      	bx	lr
